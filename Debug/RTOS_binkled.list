
RTOS_binkled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b4c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  08006c0c  08006c0c  00016c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006eec  08006eec  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08006eec  08006eec  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006eec  08006eec  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006eec  08006eec  00016eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ef0  08006ef0  00016ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08006ef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001164  20000084  08006f78  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011e8  08006f78  000211e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001191a  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000271c  00000000  00000000  000319c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  000340e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f58  00000000  00000000  00035130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011b58  00000000  00000000  00036088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e22  00000000  00000000  00047be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006c588  00000000  00000000  00059a02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c5f8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040c4  00000000  00000000  000c5fdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000084 	.word	0x20000084
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006bf4 	.word	0x08006bf4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000088 	.word	0x20000088
 8000104:	08006bf4 	.word	0x08006bf4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cfrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	0008      	movs	r0, r1
 800040c:	4661      	mov	r1, ip
 800040e:	e7ff      	b.n	8000410 <__aeabi_cfcmpeq>

08000410 <__aeabi_cfcmpeq>:
 8000410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000412:	f000 fa55 	bl	80008c0 <__lesf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	d401      	bmi.n	800041e <__aeabi_cfcmpeq+0xe>
 800041a:	2100      	movs	r1, #0
 800041c:	42c8      	cmn	r0, r1
 800041e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000420 <__aeabi_fcmpeq>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 f9e1 	bl	80007e8 <__eqsf2>
 8000426:	4240      	negs	r0, r0
 8000428:	3001      	adds	r0, #1
 800042a:	bd10      	pop	{r4, pc}

0800042c <__aeabi_fcmplt>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fa47 	bl	80008c0 <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	db01      	blt.n	800043a <__aeabi_fcmplt+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_fcmple>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 fa3d 	bl	80008c0 <__lesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dd01      	ble.n	800044e <__aeabi_fcmple+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_fcmpgt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 f9ed 	bl	8000834 <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dc01      	bgt.n	8000462 <__aeabi_fcmpgt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_fcmpge>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 f9e3 	bl	8000834 <__gesf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	da01      	bge.n	8000476 <__aeabi_fcmpge+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_f2uiz>:
 800047c:	219e      	movs	r1, #158	; 0x9e
 800047e:	b510      	push	{r4, lr}
 8000480:	05c9      	lsls	r1, r1, #23
 8000482:	1c04      	adds	r4, r0, #0
 8000484:	f7ff fff0 	bl	8000468 <__aeabi_fcmpge>
 8000488:	2800      	cmp	r0, #0
 800048a:	d103      	bne.n	8000494 <__aeabi_f2uiz+0x18>
 800048c:	1c20      	adds	r0, r4, #0
 800048e:	f000 fd2f 	bl	8000ef0 <__aeabi_f2iz>
 8000492:	bd10      	pop	{r4, pc}
 8000494:	219e      	movs	r1, #158	; 0x9e
 8000496:	1c20      	adds	r0, r4, #0
 8000498:	05c9      	lsls	r1, r1, #23
 800049a:	f000 fb7b 	bl	8000b94 <__aeabi_fsub>
 800049e:	f000 fd27 	bl	8000ef0 <__aeabi_f2iz>
 80004a2:	2380      	movs	r3, #128	; 0x80
 80004a4:	061b      	lsls	r3, r3, #24
 80004a6:	469c      	mov	ip, r3
 80004a8:	4460      	add	r0, ip
 80004aa:	e7f2      	b.n	8000492 <__aeabi_f2uiz+0x16>

080004ac <__aeabi_fadd>:
 80004ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ae:	46c6      	mov	lr, r8
 80004b0:	0243      	lsls	r3, r0, #9
 80004b2:	0a5b      	lsrs	r3, r3, #9
 80004b4:	024e      	lsls	r6, r1, #9
 80004b6:	0045      	lsls	r5, r0, #1
 80004b8:	004f      	lsls	r7, r1, #1
 80004ba:	00da      	lsls	r2, r3, #3
 80004bc:	0fc4      	lsrs	r4, r0, #31
 80004be:	469c      	mov	ip, r3
 80004c0:	0a70      	lsrs	r0, r6, #9
 80004c2:	4690      	mov	r8, r2
 80004c4:	b500      	push	{lr}
 80004c6:	0e2d      	lsrs	r5, r5, #24
 80004c8:	0e3f      	lsrs	r7, r7, #24
 80004ca:	0fc9      	lsrs	r1, r1, #31
 80004cc:	09b6      	lsrs	r6, r6, #6
 80004ce:	428c      	cmp	r4, r1
 80004d0:	d04b      	beq.n	800056a <__aeabi_fadd+0xbe>
 80004d2:	1bea      	subs	r2, r5, r7
 80004d4:	2a00      	cmp	r2, #0
 80004d6:	dd36      	ble.n	8000546 <__aeabi_fadd+0x9a>
 80004d8:	2f00      	cmp	r7, #0
 80004da:	d061      	beq.n	80005a0 <__aeabi_fadd+0xf4>
 80004dc:	2dff      	cmp	r5, #255	; 0xff
 80004de:	d100      	bne.n	80004e2 <__aeabi_fadd+0x36>
 80004e0:	e0ad      	b.n	800063e <__aeabi_fadd+0x192>
 80004e2:	2380      	movs	r3, #128	; 0x80
 80004e4:	04db      	lsls	r3, r3, #19
 80004e6:	431e      	orrs	r6, r3
 80004e8:	2a1b      	cmp	r2, #27
 80004ea:	dc00      	bgt.n	80004ee <__aeabi_fadd+0x42>
 80004ec:	e0d3      	b.n	8000696 <__aeabi_fadd+0x1ea>
 80004ee:	2001      	movs	r0, #1
 80004f0:	4643      	mov	r3, r8
 80004f2:	1a18      	subs	r0, r3, r0
 80004f4:	0143      	lsls	r3, r0, #5
 80004f6:	d400      	bmi.n	80004fa <__aeabi_fadd+0x4e>
 80004f8:	e08c      	b.n	8000614 <__aeabi_fadd+0x168>
 80004fa:	0180      	lsls	r0, r0, #6
 80004fc:	0987      	lsrs	r7, r0, #6
 80004fe:	0038      	movs	r0, r7
 8000500:	f001 f888 	bl	8001614 <__clzsi2>
 8000504:	3805      	subs	r0, #5
 8000506:	4087      	lsls	r7, r0
 8000508:	4285      	cmp	r5, r0
 800050a:	dc00      	bgt.n	800050e <__aeabi_fadd+0x62>
 800050c:	e0b6      	b.n	800067c <__aeabi_fadd+0x1d0>
 800050e:	1a2d      	subs	r5, r5, r0
 8000510:	48b3      	ldr	r0, [pc, #716]	; (80007e0 <__aeabi_fadd+0x334>)
 8000512:	4038      	ands	r0, r7
 8000514:	0743      	lsls	r3, r0, #29
 8000516:	d004      	beq.n	8000522 <__aeabi_fadd+0x76>
 8000518:	230f      	movs	r3, #15
 800051a:	4003      	ands	r3, r0
 800051c:	2b04      	cmp	r3, #4
 800051e:	d000      	beq.n	8000522 <__aeabi_fadd+0x76>
 8000520:	3004      	adds	r0, #4
 8000522:	0143      	lsls	r3, r0, #5
 8000524:	d400      	bmi.n	8000528 <__aeabi_fadd+0x7c>
 8000526:	e078      	b.n	800061a <__aeabi_fadd+0x16e>
 8000528:	1c6a      	adds	r2, r5, #1
 800052a:	2dfe      	cmp	r5, #254	; 0xfe
 800052c:	d065      	beq.n	80005fa <__aeabi_fadd+0x14e>
 800052e:	0180      	lsls	r0, r0, #6
 8000530:	0a43      	lsrs	r3, r0, #9
 8000532:	469c      	mov	ip, r3
 8000534:	b2d2      	uxtb	r2, r2
 8000536:	4663      	mov	r3, ip
 8000538:	05d0      	lsls	r0, r2, #23
 800053a:	4318      	orrs	r0, r3
 800053c:	07e4      	lsls	r4, r4, #31
 800053e:	4320      	orrs	r0, r4
 8000540:	bc80      	pop	{r7}
 8000542:	46b8      	mov	r8, r7
 8000544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000546:	2a00      	cmp	r2, #0
 8000548:	d035      	beq.n	80005b6 <__aeabi_fadd+0x10a>
 800054a:	1b7a      	subs	r2, r7, r5
 800054c:	2d00      	cmp	r5, #0
 800054e:	d000      	beq.n	8000552 <__aeabi_fadd+0xa6>
 8000550:	e0af      	b.n	80006b2 <__aeabi_fadd+0x206>
 8000552:	4643      	mov	r3, r8
 8000554:	2b00      	cmp	r3, #0
 8000556:	d100      	bne.n	800055a <__aeabi_fadd+0xae>
 8000558:	e0a7      	b.n	80006aa <__aeabi_fadd+0x1fe>
 800055a:	1e53      	subs	r3, r2, #1
 800055c:	2a01      	cmp	r2, #1
 800055e:	d100      	bne.n	8000562 <__aeabi_fadd+0xb6>
 8000560:	e12f      	b.n	80007c2 <__aeabi_fadd+0x316>
 8000562:	2aff      	cmp	r2, #255	; 0xff
 8000564:	d069      	beq.n	800063a <__aeabi_fadd+0x18e>
 8000566:	001a      	movs	r2, r3
 8000568:	e0aa      	b.n	80006c0 <__aeabi_fadd+0x214>
 800056a:	1be9      	subs	r1, r5, r7
 800056c:	2900      	cmp	r1, #0
 800056e:	dd70      	ble.n	8000652 <__aeabi_fadd+0x1a6>
 8000570:	2f00      	cmp	r7, #0
 8000572:	d037      	beq.n	80005e4 <__aeabi_fadd+0x138>
 8000574:	2dff      	cmp	r5, #255	; 0xff
 8000576:	d062      	beq.n	800063e <__aeabi_fadd+0x192>
 8000578:	2380      	movs	r3, #128	; 0x80
 800057a:	04db      	lsls	r3, r3, #19
 800057c:	431e      	orrs	r6, r3
 800057e:	291b      	cmp	r1, #27
 8000580:	dc00      	bgt.n	8000584 <__aeabi_fadd+0xd8>
 8000582:	e0b0      	b.n	80006e6 <__aeabi_fadd+0x23a>
 8000584:	2001      	movs	r0, #1
 8000586:	4440      	add	r0, r8
 8000588:	0143      	lsls	r3, r0, #5
 800058a:	d543      	bpl.n	8000614 <__aeabi_fadd+0x168>
 800058c:	3501      	adds	r5, #1
 800058e:	2dff      	cmp	r5, #255	; 0xff
 8000590:	d033      	beq.n	80005fa <__aeabi_fadd+0x14e>
 8000592:	2301      	movs	r3, #1
 8000594:	4a93      	ldr	r2, [pc, #588]	; (80007e4 <__aeabi_fadd+0x338>)
 8000596:	4003      	ands	r3, r0
 8000598:	0840      	lsrs	r0, r0, #1
 800059a:	4010      	ands	r0, r2
 800059c:	4318      	orrs	r0, r3
 800059e:	e7b9      	b.n	8000514 <__aeabi_fadd+0x68>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d100      	bne.n	80005a6 <__aeabi_fadd+0xfa>
 80005a4:	e083      	b.n	80006ae <__aeabi_fadd+0x202>
 80005a6:	1e51      	subs	r1, r2, #1
 80005a8:	2a01      	cmp	r2, #1
 80005aa:	d100      	bne.n	80005ae <__aeabi_fadd+0x102>
 80005ac:	e0d8      	b.n	8000760 <__aeabi_fadd+0x2b4>
 80005ae:	2aff      	cmp	r2, #255	; 0xff
 80005b0:	d045      	beq.n	800063e <__aeabi_fadd+0x192>
 80005b2:	000a      	movs	r2, r1
 80005b4:	e798      	b.n	80004e8 <__aeabi_fadd+0x3c>
 80005b6:	27fe      	movs	r7, #254	; 0xfe
 80005b8:	1c6a      	adds	r2, r5, #1
 80005ba:	4217      	tst	r7, r2
 80005bc:	d000      	beq.n	80005c0 <__aeabi_fadd+0x114>
 80005be:	e086      	b.n	80006ce <__aeabi_fadd+0x222>
 80005c0:	2d00      	cmp	r5, #0
 80005c2:	d000      	beq.n	80005c6 <__aeabi_fadd+0x11a>
 80005c4:	e0b7      	b.n	8000736 <__aeabi_fadd+0x28a>
 80005c6:	4643      	mov	r3, r8
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d100      	bne.n	80005ce <__aeabi_fadd+0x122>
 80005cc:	e0f3      	b.n	80007b6 <__aeabi_fadd+0x30a>
 80005ce:	2200      	movs	r2, #0
 80005d0:	2e00      	cmp	r6, #0
 80005d2:	d0b0      	beq.n	8000536 <__aeabi_fadd+0x8a>
 80005d4:	1b98      	subs	r0, r3, r6
 80005d6:	0143      	lsls	r3, r0, #5
 80005d8:	d400      	bmi.n	80005dc <__aeabi_fadd+0x130>
 80005da:	e0fa      	b.n	80007d2 <__aeabi_fadd+0x326>
 80005dc:	4643      	mov	r3, r8
 80005de:	000c      	movs	r4, r1
 80005e0:	1af0      	subs	r0, r6, r3
 80005e2:	e797      	b.n	8000514 <__aeabi_fadd+0x68>
 80005e4:	2e00      	cmp	r6, #0
 80005e6:	d100      	bne.n	80005ea <__aeabi_fadd+0x13e>
 80005e8:	e0c8      	b.n	800077c <__aeabi_fadd+0x2d0>
 80005ea:	1e4a      	subs	r2, r1, #1
 80005ec:	2901      	cmp	r1, #1
 80005ee:	d100      	bne.n	80005f2 <__aeabi_fadd+0x146>
 80005f0:	e0ae      	b.n	8000750 <__aeabi_fadd+0x2a4>
 80005f2:	29ff      	cmp	r1, #255	; 0xff
 80005f4:	d023      	beq.n	800063e <__aeabi_fadd+0x192>
 80005f6:	0011      	movs	r1, r2
 80005f8:	e7c1      	b.n	800057e <__aeabi_fadd+0xd2>
 80005fa:	2300      	movs	r3, #0
 80005fc:	22ff      	movs	r2, #255	; 0xff
 80005fe:	469c      	mov	ip, r3
 8000600:	e799      	b.n	8000536 <__aeabi_fadd+0x8a>
 8000602:	21fe      	movs	r1, #254	; 0xfe
 8000604:	1c6a      	adds	r2, r5, #1
 8000606:	4211      	tst	r1, r2
 8000608:	d077      	beq.n	80006fa <__aeabi_fadd+0x24e>
 800060a:	2aff      	cmp	r2, #255	; 0xff
 800060c:	d0f5      	beq.n	80005fa <__aeabi_fadd+0x14e>
 800060e:	0015      	movs	r5, r2
 8000610:	4446      	add	r6, r8
 8000612:	0870      	lsrs	r0, r6, #1
 8000614:	0743      	lsls	r3, r0, #29
 8000616:	d000      	beq.n	800061a <__aeabi_fadd+0x16e>
 8000618:	e77e      	b.n	8000518 <__aeabi_fadd+0x6c>
 800061a:	08c3      	lsrs	r3, r0, #3
 800061c:	2dff      	cmp	r5, #255	; 0xff
 800061e:	d00e      	beq.n	800063e <__aeabi_fadd+0x192>
 8000620:	025b      	lsls	r3, r3, #9
 8000622:	0a5b      	lsrs	r3, r3, #9
 8000624:	469c      	mov	ip, r3
 8000626:	b2ea      	uxtb	r2, r5
 8000628:	e785      	b.n	8000536 <__aeabi_fadd+0x8a>
 800062a:	2e00      	cmp	r6, #0
 800062c:	d007      	beq.n	800063e <__aeabi_fadd+0x192>
 800062e:	2280      	movs	r2, #128	; 0x80
 8000630:	03d2      	lsls	r2, r2, #15
 8000632:	4213      	tst	r3, r2
 8000634:	d003      	beq.n	800063e <__aeabi_fadd+0x192>
 8000636:	4210      	tst	r0, r2
 8000638:	d101      	bne.n	800063e <__aeabi_fadd+0x192>
 800063a:	000c      	movs	r4, r1
 800063c:	0003      	movs	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d0db      	beq.n	80005fa <__aeabi_fadd+0x14e>
 8000642:	2080      	movs	r0, #128	; 0x80
 8000644:	03c0      	lsls	r0, r0, #15
 8000646:	4318      	orrs	r0, r3
 8000648:	0240      	lsls	r0, r0, #9
 800064a:	0a43      	lsrs	r3, r0, #9
 800064c:	469c      	mov	ip, r3
 800064e:	22ff      	movs	r2, #255	; 0xff
 8000650:	e771      	b.n	8000536 <__aeabi_fadd+0x8a>
 8000652:	2900      	cmp	r1, #0
 8000654:	d0d5      	beq.n	8000602 <__aeabi_fadd+0x156>
 8000656:	1b7a      	subs	r2, r7, r5
 8000658:	2d00      	cmp	r5, #0
 800065a:	d160      	bne.n	800071e <__aeabi_fadd+0x272>
 800065c:	4643      	mov	r3, r8
 800065e:	2b00      	cmp	r3, #0
 8000660:	d024      	beq.n	80006ac <__aeabi_fadd+0x200>
 8000662:	1e53      	subs	r3, r2, #1
 8000664:	2a01      	cmp	r2, #1
 8000666:	d073      	beq.n	8000750 <__aeabi_fadd+0x2a4>
 8000668:	2aff      	cmp	r2, #255	; 0xff
 800066a:	d0e7      	beq.n	800063c <__aeabi_fadd+0x190>
 800066c:	001a      	movs	r2, r3
 800066e:	2a1b      	cmp	r2, #27
 8000670:	dc00      	bgt.n	8000674 <__aeabi_fadd+0x1c8>
 8000672:	e085      	b.n	8000780 <__aeabi_fadd+0x2d4>
 8000674:	2001      	movs	r0, #1
 8000676:	003d      	movs	r5, r7
 8000678:	1980      	adds	r0, r0, r6
 800067a:	e785      	b.n	8000588 <__aeabi_fadd+0xdc>
 800067c:	2320      	movs	r3, #32
 800067e:	003a      	movs	r2, r7
 8000680:	1b45      	subs	r5, r0, r5
 8000682:	0038      	movs	r0, r7
 8000684:	3501      	adds	r5, #1
 8000686:	40ea      	lsrs	r2, r5
 8000688:	1b5d      	subs	r5, r3, r5
 800068a:	40a8      	lsls	r0, r5
 800068c:	1e43      	subs	r3, r0, #1
 800068e:	4198      	sbcs	r0, r3
 8000690:	2500      	movs	r5, #0
 8000692:	4310      	orrs	r0, r2
 8000694:	e73e      	b.n	8000514 <__aeabi_fadd+0x68>
 8000696:	2320      	movs	r3, #32
 8000698:	0030      	movs	r0, r6
 800069a:	1a9b      	subs	r3, r3, r2
 800069c:	0031      	movs	r1, r6
 800069e:	4098      	lsls	r0, r3
 80006a0:	40d1      	lsrs	r1, r2
 80006a2:	1e43      	subs	r3, r0, #1
 80006a4:	4198      	sbcs	r0, r3
 80006a6:	4308      	orrs	r0, r1
 80006a8:	e722      	b.n	80004f0 <__aeabi_fadd+0x44>
 80006aa:	000c      	movs	r4, r1
 80006ac:	0003      	movs	r3, r0
 80006ae:	0015      	movs	r5, r2
 80006b0:	e7b4      	b.n	800061c <__aeabi_fadd+0x170>
 80006b2:	2fff      	cmp	r7, #255	; 0xff
 80006b4:	d0c1      	beq.n	800063a <__aeabi_fadd+0x18e>
 80006b6:	2380      	movs	r3, #128	; 0x80
 80006b8:	4640      	mov	r0, r8
 80006ba:	04db      	lsls	r3, r3, #19
 80006bc:	4318      	orrs	r0, r3
 80006be:	4680      	mov	r8, r0
 80006c0:	2a1b      	cmp	r2, #27
 80006c2:	dd51      	ble.n	8000768 <__aeabi_fadd+0x2bc>
 80006c4:	2001      	movs	r0, #1
 80006c6:	000c      	movs	r4, r1
 80006c8:	003d      	movs	r5, r7
 80006ca:	1a30      	subs	r0, r6, r0
 80006cc:	e712      	b.n	80004f4 <__aeabi_fadd+0x48>
 80006ce:	4643      	mov	r3, r8
 80006d0:	1b9f      	subs	r7, r3, r6
 80006d2:	017b      	lsls	r3, r7, #5
 80006d4:	d42b      	bmi.n	800072e <__aeabi_fadd+0x282>
 80006d6:	2f00      	cmp	r7, #0
 80006d8:	d000      	beq.n	80006dc <__aeabi_fadd+0x230>
 80006da:	e710      	b.n	80004fe <__aeabi_fadd+0x52>
 80006dc:	2300      	movs	r3, #0
 80006de:	2400      	movs	r4, #0
 80006e0:	2200      	movs	r2, #0
 80006e2:	469c      	mov	ip, r3
 80006e4:	e727      	b.n	8000536 <__aeabi_fadd+0x8a>
 80006e6:	2320      	movs	r3, #32
 80006e8:	0032      	movs	r2, r6
 80006ea:	0030      	movs	r0, r6
 80006ec:	40ca      	lsrs	r2, r1
 80006ee:	1a59      	subs	r1, r3, r1
 80006f0:	4088      	lsls	r0, r1
 80006f2:	1e43      	subs	r3, r0, #1
 80006f4:	4198      	sbcs	r0, r3
 80006f6:	4310      	orrs	r0, r2
 80006f8:	e745      	b.n	8000586 <__aeabi_fadd+0xda>
 80006fa:	2d00      	cmp	r5, #0
 80006fc:	d14a      	bne.n	8000794 <__aeabi_fadd+0x2e8>
 80006fe:	4643      	mov	r3, r8
 8000700:	2b00      	cmp	r3, #0
 8000702:	d063      	beq.n	80007cc <__aeabi_fadd+0x320>
 8000704:	2200      	movs	r2, #0
 8000706:	2e00      	cmp	r6, #0
 8000708:	d100      	bne.n	800070c <__aeabi_fadd+0x260>
 800070a:	e714      	b.n	8000536 <__aeabi_fadd+0x8a>
 800070c:	0030      	movs	r0, r6
 800070e:	4440      	add	r0, r8
 8000710:	0143      	lsls	r3, r0, #5
 8000712:	d400      	bmi.n	8000716 <__aeabi_fadd+0x26a>
 8000714:	e77e      	b.n	8000614 <__aeabi_fadd+0x168>
 8000716:	4b32      	ldr	r3, [pc, #200]	; (80007e0 <__aeabi_fadd+0x334>)
 8000718:	3501      	adds	r5, #1
 800071a:	4018      	ands	r0, r3
 800071c:	e77a      	b.n	8000614 <__aeabi_fadd+0x168>
 800071e:	2fff      	cmp	r7, #255	; 0xff
 8000720:	d08c      	beq.n	800063c <__aeabi_fadd+0x190>
 8000722:	2380      	movs	r3, #128	; 0x80
 8000724:	4641      	mov	r1, r8
 8000726:	04db      	lsls	r3, r3, #19
 8000728:	4319      	orrs	r1, r3
 800072a:	4688      	mov	r8, r1
 800072c:	e79f      	b.n	800066e <__aeabi_fadd+0x1c2>
 800072e:	4643      	mov	r3, r8
 8000730:	000c      	movs	r4, r1
 8000732:	1af7      	subs	r7, r6, r3
 8000734:	e6e3      	b.n	80004fe <__aeabi_fadd+0x52>
 8000736:	4642      	mov	r2, r8
 8000738:	2a00      	cmp	r2, #0
 800073a:	d000      	beq.n	800073e <__aeabi_fadd+0x292>
 800073c:	e775      	b.n	800062a <__aeabi_fadd+0x17e>
 800073e:	2e00      	cmp	r6, #0
 8000740:	d000      	beq.n	8000744 <__aeabi_fadd+0x298>
 8000742:	e77a      	b.n	800063a <__aeabi_fadd+0x18e>
 8000744:	2380      	movs	r3, #128	; 0x80
 8000746:	03db      	lsls	r3, r3, #15
 8000748:	2400      	movs	r4, #0
 800074a:	469c      	mov	ip, r3
 800074c:	22ff      	movs	r2, #255	; 0xff
 800074e:	e6f2      	b.n	8000536 <__aeabi_fadd+0x8a>
 8000750:	0030      	movs	r0, r6
 8000752:	4440      	add	r0, r8
 8000754:	2501      	movs	r5, #1
 8000756:	0143      	lsls	r3, r0, #5
 8000758:	d400      	bmi.n	800075c <__aeabi_fadd+0x2b0>
 800075a:	e75b      	b.n	8000614 <__aeabi_fadd+0x168>
 800075c:	2502      	movs	r5, #2
 800075e:	e718      	b.n	8000592 <__aeabi_fadd+0xe6>
 8000760:	4643      	mov	r3, r8
 8000762:	2501      	movs	r5, #1
 8000764:	1b98      	subs	r0, r3, r6
 8000766:	e6c5      	b.n	80004f4 <__aeabi_fadd+0x48>
 8000768:	2320      	movs	r3, #32
 800076a:	4644      	mov	r4, r8
 800076c:	4640      	mov	r0, r8
 800076e:	40d4      	lsrs	r4, r2
 8000770:	1a9a      	subs	r2, r3, r2
 8000772:	4090      	lsls	r0, r2
 8000774:	1e43      	subs	r3, r0, #1
 8000776:	4198      	sbcs	r0, r3
 8000778:	4320      	orrs	r0, r4
 800077a:	e7a4      	b.n	80006c6 <__aeabi_fadd+0x21a>
 800077c:	000d      	movs	r5, r1
 800077e:	e74d      	b.n	800061c <__aeabi_fadd+0x170>
 8000780:	2320      	movs	r3, #32
 8000782:	4641      	mov	r1, r8
 8000784:	4640      	mov	r0, r8
 8000786:	40d1      	lsrs	r1, r2
 8000788:	1a9a      	subs	r2, r3, r2
 800078a:	4090      	lsls	r0, r2
 800078c:	1e43      	subs	r3, r0, #1
 800078e:	4198      	sbcs	r0, r3
 8000790:	4308      	orrs	r0, r1
 8000792:	e770      	b.n	8000676 <__aeabi_fadd+0x1ca>
 8000794:	4642      	mov	r2, r8
 8000796:	2a00      	cmp	r2, #0
 8000798:	d100      	bne.n	800079c <__aeabi_fadd+0x2f0>
 800079a:	e74f      	b.n	800063c <__aeabi_fadd+0x190>
 800079c:	2e00      	cmp	r6, #0
 800079e:	d100      	bne.n	80007a2 <__aeabi_fadd+0x2f6>
 80007a0:	e74d      	b.n	800063e <__aeabi_fadd+0x192>
 80007a2:	2280      	movs	r2, #128	; 0x80
 80007a4:	03d2      	lsls	r2, r2, #15
 80007a6:	4213      	tst	r3, r2
 80007a8:	d100      	bne.n	80007ac <__aeabi_fadd+0x300>
 80007aa:	e748      	b.n	800063e <__aeabi_fadd+0x192>
 80007ac:	4210      	tst	r0, r2
 80007ae:	d000      	beq.n	80007b2 <__aeabi_fadd+0x306>
 80007b0:	e745      	b.n	800063e <__aeabi_fadd+0x192>
 80007b2:	0003      	movs	r3, r0
 80007b4:	e743      	b.n	800063e <__aeabi_fadd+0x192>
 80007b6:	2e00      	cmp	r6, #0
 80007b8:	d090      	beq.n	80006dc <__aeabi_fadd+0x230>
 80007ba:	000c      	movs	r4, r1
 80007bc:	4684      	mov	ip, r0
 80007be:	2200      	movs	r2, #0
 80007c0:	e6b9      	b.n	8000536 <__aeabi_fadd+0x8a>
 80007c2:	4643      	mov	r3, r8
 80007c4:	000c      	movs	r4, r1
 80007c6:	1af0      	subs	r0, r6, r3
 80007c8:	3501      	adds	r5, #1
 80007ca:	e693      	b.n	80004f4 <__aeabi_fadd+0x48>
 80007cc:	4684      	mov	ip, r0
 80007ce:	2200      	movs	r2, #0
 80007d0:	e6b1      	b.n	8000536 <__aeabi_fadd+0x8a>
 80007d2:	2800      	cmp	r0, #0
 80007d4:	d000      	beq.n	80007d8 <__aeabi_fadd+0x32c>
 80007d6:	e71d      	b.n	8000614 <__aeabi_fadd+0x168>
 80007d8:	2300      	movs	r3, #0
 80007da:	2400      	movs	r4, #0
 80007dc:	469c      	mov	ip, r3
 80007de:	e6aa      	b.n	8000536 <__aeabi_fadd+0x8a>
 80007e0:	fbffffff 	.word	0xfbffffff
 80007e4:	7dffffff 	.word	0x7dffffff

080007e8 <__eqsf2>:
 80007e8:	b570      	push	{r4, r5, r6, lr}
 80007ea:	0042      	lsls	r2, r0, #1
 80007ec:	0245      	lsls	r5, r0, #9
 80007ee:	024e      	lsls	r6, r1, #9
 80007f0:	004c      	lsls	r4, r1, #1
 80007f2:	0fc3      	lsrs	r3, r0, #31
 80007f4:	0a6d      	lsrs	r5, r5, #9
 80007f6:	2001      	movs	r0, #1
 80007f8:	0e12      	lsrs	r2, r2, #24
 80007fa:	0a76      	lsrs	r6, r6, #9
 80007fc:	0e24      	lsrs	r4, r4, #24
 80007fe:	0fc9      	lsrs	r1, r1, #31
 8000800:	2aff      	cmp	r2, #255	; 0xff
 8000802:	d006      	beq.n	8000812 <__eqsf2+0x2a>
 8000804:	2cff      	cmp	r4, #255	; 0xff
 8000806:	d003      	beq.n	8000810 <__eqsf2+0x28>
 8000808:	42a2      	cmp	r2, r4
 800080a:	d101      	bne.n	8000810 <__eqsf2+0x28>
 800080c:	42b5      	cmp	r5, r6
 800080e:	d006      	beq.n	800081e <__eqsf2+0x36>
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	2d00      	cmp	r5, #0
 8000814:	d1fc      	bne.n	8000810 <__eqsf2+0x28>
 8000816:	2cff      	cmp	r4, #255	; 0xff
 8000818:	d1fa      	bne.n	8000810 <__eqsf2+0x28>
 800081a:	2e00      	cmp	r6, #0
 800081c:	d1f8      	bne.n	8000810 <__eqsf2+0x28>
 800081e:	428b      	cmp	r3, r1
 8000820:	d006      	beq.n	8000830 <__eqsf2+0x48>
 8000822:	2001      	movs	r0, #1
 8000824:	2a00      	cmp	r2, #0
 8000826:	d1f3      	bne.n	8000810 <__eqsf2+0x28>
 8000828:	0028      	movs	r0, r5
 800082a:	1e43      	subs	r3, r0, #1
 800082c:	4198      	sbcs	r0, r3
 800082e:	e7ef      	b.n	8000810 <__eqsf2+0x28>
 8000830:	2000      	movs	r0, #0
 8000832:	e7ed      	b.n	8000810 <__eqsf2+0x28>

08000834 <__gesf2>:
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	0042      	lsls	r2, r0, #1
 8000838:	0245      	lsls	r5, r0, #9
 800083a:	024e      	lsls	r6, r1, #9
 800083c:	004c      	lsls	r4, r1, #1
 800083e:	0fc3      	lsrs	r3, r0, #31
 8000840:	0a6d      	lsrs	r5, r5, #9
 8000842:	0e12      	lsrs	r2, r2, #24
 8000844:	0a76      	lsrs	r6, r6, #9
 8000846:	0e24      	lsrs	r4, r4, #24
 8000848:	0fc8      	lsrs	r0, r1, #31
 800084a:	2aff      	cmp	r2, #255	; 0xff
 800084c:	d01b      	beq.n	8000886 <__gesf2+0x52>
 800084e:	2cff      	cmp	r4, #255	; 0xff
 8000850:	d00e      	beq.n	8000870 <__gesf2+0x3c>
 8000852:	2a00      	cmp	r2, #0
 8000854:	d11b      	bne.n	800088e <__gesf2+0x5a>
 8000856:	2c00      	cmp	r4, #0
 8000858:	d101      	bne.n	800085e <__gesf2+0x2a>
 800085a:	2e00      	cmp	r6, #0
 800085c:	d01c      	beq.n	8000898 <__gesf2+0x64>
 800085e:	2d00      	cmp	r5, #0
 8000860:	d00c      	beq.n	800087c <__gesf2+0x48>
 8000862:	4283      	cmp	r3, r0
 8000864:	d01c      	beq.n	80008a0 <__gesf2+0x6c>
 8000866:	2102      	movs	r1, #2
 8000868:	1e58      	subs	r0, r3, #1
 800086a:	4008      	ands	r0, r1
 800086c:	3801      	subs	r0, #1
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	2e00      	cmp	r6, #0
 8000872:	d122      	bne.n	80008ba <__gesf2+0x86>
 8000874:	2a00      	cmp	r2, #0
 8000876:	d1f4      	bne.n	8000862 <__gesf2+0x2e>
 8000878:	2d00      	cmp	r5, #0
 800087a:	d1f2      	bne.n	8000862 <__gesf2+0x2e>
 800087c:	2800      	cmp	r0, #0
 800087e:	d1f6      	bne.n	800086e <__gesf2+0x3a>
 8000880:	2001      	movs	r0, #1
 8000882:	4240      	negs	r0, r0
 8000884:	e7f3      	b.n	800086e <__gesf2+0x3a>
 8000886:	2d00      	cmp	r5, #0
 8000888:	d117      	bne.n	80008ba <__gesf2+0x86>
 800088a:	2cff      	cmp	r4, #255	; 0xff
 800088c:	d0f0      	beq.n	8000870 <__gesf2+0x3c>
 800088e:	2c00      	cmp	r4, #0
 8000890:	d1e7      	bne.n	8000862 <__gesf2+0x2e>
 8000892:	2e00      	cmp	r6, #0
 8000894:	d1e5      	bne.n	8000862 <__gesf2+0x2e>
 8000896:	e7e6      	b.n	8000866 <__gesf2+0x32>
 8000898:	2000      	movs	r0, #0
 800089a:	2d00      	cmp	r5, #0
 800089c:	d0e7      	beq.n	800086e <__gesf2+0x3a>
 800089e:	e7e2      	b.n	8000866 <__gesf2+0x32>
 80008a0:	42a2      	cmp	r2, r4
 80008a2:	dc05      	bgt.n	80008b0 <__gesf2+0x7c>
 80008a4:	dbea      	blt.n	800087c <__gesf2+0x48>
 80008a6:	42b5      	cmp	r5, r6
 80008a8:	d802      	bhi.n	80008b0 <__gesf2+0x7c>
 80008aa:	d3e7      	bcc.n	800087c <__gesf2+0x48>
 80008ac:	2000      	movs	r0, #0
 80008ae:	e7de      	b.n	800086e <__gesf2+0x3a>
 80008b0:	4243      	negs	r3, r0
 80008b2:	4158      	adcs	r0, r3
 80008b4:	0040      	lsls	r0, r0, #1
 80008b6:	3801      	subs	r0, #1
 80008b8:	e7d9      	b.n	800086e <__gesf2+0x3a>
 80008ba:	2002      	movs	r0, #2
 80008bc:	4240      	negs	r0, r0
 80008be:	e7d6      	b.n	800086e <__gesf2+0x3a>

080008c0 <__lesf2>:
 80008c0:	b570      	push	{r4, r5, r6, lr}
 80008c2:	0042      	lsls	r2, r0, #1
 80008c4:	0245      	lsls	r5, r0, #9
 80008c6:	024e      	lsls	r6, r1, #9
 80008c8:	004c      	lsls	r4, r1, #1
 80008ca:	0fc3      	lsrs	r3, r0, #31
 80008cc:	0a6d      	lsrs	r5, r5, #9
 80008ce:	0e12      	lsrs	r2, r2, #24
 80008d0:	0a76      	lsrs	r6, r6, #9
 80008d2:	0e24      	lsrs	r4, r4, #24
 80008d4:	0fc8      	lsrs	r0, r1, #31
 80008d6:	2aff      	cmp	r2, #255	; 0xff
 80008d8:	d00b      	beq.n	80008f2 <__lesf2+0x32>
 80008da:	2cff      	cmp	r4, #255	; 0xff
 80008dc:	d00d      	beq.n	80008fa <__lesf2+0x3a>
 80008de:	2a00      	cmp	r2, #0
 80008e0:	d11f      	bne.n	8000922 <__lesf2+0x62>
 80008e2:	2c00      	cmp	r4, #0
 80008e4:	d116      	bne.n	8000914 <__lesf2+0x54>
 80008e6:	2e00      	cmp	r6, #0
 80008e8:	d114      	bne.n	8000914 <__lesf2+0x54>
 80008ea:	2000      	movs	r0, #0
 80008ec:	2d00      	cmp	r5, #0
 80008ee:	d010      	beq.n	8000912 <__lesf2+0x52>
 80008f0:	e009      	b.n	8000906 <__lesf2+0x46>
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d10c      	bne.n	8000910 <__lesf2+0x50>
 80008f6:	2cff      	cmp	r4, #255	; 0xff
 80008f8:	d113      	bne.n	8000922 <__lesf2+0x62>
 80008fa:	2e00      	cmp	r6, #0
 80008fc:	d108      	bne.n	8000910 <__lesf2+0x50>
 80008fe:	2a00      	cmp	r2, #0
 8000900:	d008      	beq.n	8000914 <__lesf2+0x54>
 8000902:	4283      	cmp	r3, r0
 8000904:	d012      	beq.n	800092c <__lesf2+0x6c>
 8000906:	2102      	movs	r1, #2
 8000908:	1e58      	subs	r0, r3, #1
 800090a:	4008      	ands	r0, r1
 800090c:	3801      	subs	r0, #1
 800090e:	e000      	b.n	8000912 <__lesf2+0x52>
 8000910:	2002      	movs	r0, #2
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	2d00      	cmp	r5, #0
 8000916:	d1f4      	bne.n	8000902 <__lesf2+0x42>
 8000918:	2800      	cmp	r0, #0
 800091a:	d1fa      	bne.n	8000912 <__lesf2+0x52>
 800091c:	2001      	movs	r0, #1
 800091e:	4240      	negs	r0, r0
 8000920:	e7f7      	b.n	8000912 <__lesf2+0x52>
 8000922:	2c00      	cmp	r4, #0
 8000924:	d1ed      	bne.n	8000902 <__lesf2+0x42>
 8000926:	2e00      	cmp	r6, #0
 8000928:	d1eb      	bne.n	8000902 <__lesf2+0x42>
 800092a:	e7ec      	b.n	8000906 <__lesf2+0x46>
 800092c:	42a2      	cmp	r2, r4
 800092e:	dc05      	bgt.n	800093c <__lesf2+0x7c>
 8000930:	dbf2      	blt.n	8000918 <__lesf2+0x58>
 8000932:	42b5      	cmp	r5, r6
 8000934:	d802      	bhi.n	800093c <__lesf2+0x7c>
 8000936:	d3ef      	bcc.n	8000918 <__lesf2+0x58>
 8000938:	2000      	movs	r0, #0
 800093a:	e7ea      	b.n	8000912 <__lesf2+0x52>
 800093c:	4243      	negs	r3, r0
 800093e:	4158      	adcs	r0, r3
 8000940:	0040      	lsls	r0, r0, #1
 8000942:	3801      	subs	r0, #1
 8000944:	e7e5      	b.n	8000912 <__lesf2+0x52>
 8000946:	46c0      	nop			; (mov r8, r8)

08000948 <__aeabi_fmul>:
 8000948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800094a:	464f      	mov	r7, r9
 800094c:	4646      	mov	r6, r8
 800094e:	46d6      	mov	lr, sl
 8000950:	0244      	lsls	r4, r0, #9
 8000952:	0045      	lsls	r5, r0, #1
 8000954:	b5c0      	push	{r6, r7, lr}
 8000956:	0a64      	lsrs	r4, r4, #9
 8000958:	1c0f      	adds	r7, r1, #0
 800095a:	0e2d      	lsrs	r5, r5, #24
 800095c:	0fc6      	lsrs	r6, r0, #31
 800095e:	2d00      	cmp	r5, #0
 8000960:	d100      	bne.n	8000964 <__aeabi_fmul+0x1c>
 8000962:	e08d      	b.n	8000a80 <__aeabi_fmul+0x138>
 8000964:	2dff      	cmp	r5, #255	; 0xff
 8000966:	d100      	bne.n	800096a <__aeabi_fmul+0x22>
 8000968:	e092      	b.n	8000a90 <__aeabi_fmul+0x148>
 800096a:	2300      	movs	r3, #0
 800096c:	2080      	movs	r0, #128	; 0x80
 800096e:	4699      	mov	r9, r3
 8000970:	469a      	mov	sl, r3
 8000972:	00e4      	lsls	r4, r4, #3
 8000974:	04c0      	lsls	r0, r0, #19
 8000976:	4304      	orrs	r4, r0
 8000978:	3d7f      	subs	r5, #127	; 0x7f
 800097a:	0278      	lsls	r0, r7, #9
 800097c:	0a43      	lsrs	r3, r0, #9
 800097e:	4698      	mov	r8, r3
 8000980:	007b      	lsls	r3, r7, #1
 8000982:	0e1b      	lsrs	r3, r3, #24
 8000984:	0fff      	lsrs	r7, r7, #31
 8000986:	2b00      	cmp	r3, #0
 8000988:	d100      	bne.n	800098c <__aeabi_fmul+0x44>
 800098a:	e070      	b.n	8000a6e <__aeabi_fmul+0x126>
 800098c:	2bff      	cmp	r3, #255	; 0xff
 800098e:	d100      	bne.n	8000992 <__aeabi_fmul+0x4a>
 8000990:	e086      	b.n	8000aa0 <__aeabi_fmul+0x158>
 8000992:	4642      	mov	r2, r8
 8000994:	00d0      	lsls	r0, r2, #3
 8000996:	2280      	movs	r2, #128	; 0x80
 8000998:	3b7f      	subs	r3, #127	; 0x7f
 800099a:	18ed      	adds	r5, r5, r3
 800099c:	2300      	movs	r3, #0
 800099e:	04d2      	lsls	r2, r2, #19
 80009a0:	4302      	orrs	r2, r0
 80009a2:	4690      	mov	r8, r2
 80009a4:	469c      	mov	ip, r3
 80009a6:	0031      	movs	r1, r6
 80009a8:	464b      	mov	r3, r9
 80009aa:	4079      	eors	r1, r7
 80009ac:	1c68      	adds	r0, r5, #1
 80009ae:	2b0f      	cmp	r3, #15
 80009b0:	d81c      	bhi.n	80009ec <__aeabi_fmul+0xa4>
 80009b2:	4a76      	ldr	r2, [pc, #472]	; (8000b8c <__aeabi_fmul+0x244>)
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	58d3      	ldr	r3, [r2, r3]
 80009b8:	469f      	mov	pc, r3
 80009ba:	0039      	movs	r1, r7
 80009bc:	4644      	mov	r4, r8
 80009be:	46e2      	mov	sl, ip
 80009c0:	4653      	mov	r3, sl
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d00f      	beq.n	80009e6 <__aeabi_fmul+0x9e>
 80009c6:	2b03      	cmp	r3, #3
 80009c8:	d100      	bne.n	80009cc <__aeabi_fmul+0x84>
 80009ca:	e0d7      	b.n	8000b7c <__aeabi_fmul+0x234>
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d137      	bne.n	8000a40 <__aeabi_fmul+0xf8>
 80009d0:	2000      	movs	r0, #0
 80009d2:	2400      	movs	r4, #0
 80009d4:	05c0      	lsls	r0, r0, #23
 80009d6:	4320      	orrs	r0, r4
 80009d8:	07c9      	lsls	r1, r1, #31
 80009da:	4308      	orrs	r0, r1
 80009dc:	bce0      	pop	{r5, r6, r7}
 80009de:	46ba      	mov	sl, r7
 80009e0:	46b1      	mov	r9, r6
 80009e2:	46a8      	mov	r8, r5
 80009e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009e6:	20ff      	movs	r0, #255	; 0xff
 80009e8:	2400      	movs	r4, #0
 80009ea:	e7f3      	b.n	80009d4 <__aeabi_fmul+0x8c>
 80009ec:	0c26      	lsrs	r6, r4, #16
 80009ee:	0424      	lsls	r4, r4, #16
 80009f0:	0c22      	lsrs	r2, r4, #16
 80009f2:	4644      	mov	r4, r8
 80009f4:	0424      	lsls	r4, r4, #16
 80009f6:	0c24      	lsrs	r4, r4, #16
 80009f8:	4643      	mov	r3, r8
 80009fa:	0027      	movs	r7, r4
 80009fc:	0c1b      	lsrs	r3, r3, #16
 80009fe:	4357      	muls	r7, r2
 8000a00:	4374      	muls	r4, r6
 8000a02:	435a      	muls	r2, r3
 8000a04:	435e      	muls	r6, r3
 8000a06:	1912      	adds	r2, r2, r4
 8000a08:	0c3b      	lsrs	r3, r7, #16
 8000a0a:	189b      	adds	r3, r3, r2
 8000a0c:	429c      	cmp	r4, r3
 8000a0e:	d903      	bls.n	8000a18 <__aeabi_fmul+0xd0>
 8000a10:	2280      	movs	r2, #128	; 0x80
 8000a12:	0252      	lsls	r2, r2, #9
 8000a14:	4694      	mov	ip, r2
 8000a16:	4466      	add	r6, ip
 8000a18:	043f      	lsls	r7, r7, #16
 8000a1a:	041a      	lsls	r2, r3, #16
 8000a1c:	0c3f      	lsrs	r7, r7, #16
 8000a1e:	19d2      	adds	r2, r2, r7
 8000a20:	0194      	lsls	r4, r2, #6
 8000a22:	1e67      	subs	r7, r4, #1
 8000a24:	41bc      	sbcs	r4, r7
 8000a26:	0c1b      	lsrs	r3, r3, #16
 8000a28:	0e92      	lsrs	r2, r2, #26
 8000a2a:	199b      	adds	r3, r3, r6
 8000a2c:	4314      	orrs	r4, r2
 8000a2e:	019b      	lsls	r3, r3, #6
 8000a30:	431c      	orrs	r4, r3
 8000a32:	011b      	lsls	r3, r3, #4
 8000a34:	d400      	bmi.n	8000a38 <__aeabi_fmul+0xf0>
 8000a36:	e09b      	b.n	8000b70 <__aeabi_fmul+0x228>
 8000a38:	2301      	movs	r3, #1
 8000a3a:	0862      	lsrs	r2, r4, #1
 8000a3c:	401c      	ands	r4, r3
 8000a3e:	4314      	orrs	r4, r2
 8000a40:	0002      	movs	r2, r0
 8000a42:	327f      	adds	r2, #127	; 0x7f
 8000a44:	2a00      	cmp	r2, #0
 8000a46:	dd64      	ble.n	8000b12 <__aeabi_fmul+0x1ca>
 8000a48:	0763      	lsls	r3, r4, #29
 8000a4a:	d004      	beq.n	8000a56 <__aeabi_fmul+0x10e>
 8000a4c:	230f      	movs	r3, #15
 8000a4e:	4023      	ands	r3, r4
 8000a50:	2b04      	cmp	r3, #4
 8000a52:	d000      	beq.n	8000a56 <__aeabi_fmul+0x10e>
 8000a54:	3404      	adds	r4, #4
 8000a56:	0123      	lsls	r3, r4, #4
 8000a58:	d503      	bpl.n	8000a62 <__aeabi_fmul+0x11a>
 8000a5a:	0002      	movs	r2, r0
 8000a5c:	4b4c      	ldr	r3, [pc, #304]	; (8000b90 <__aeabi_fmul+0x248>)
 8000a5e:	3280      	adds	r2, #128	; 0x80
 8000a60:	401c      	ands	r4, r3
 8000a62:	2afe      	cmp	r2, #254	; 0xfe
 8000a64:	dcbf      	bgt.n	80009e6 <__aeabi_fmul+0x9e>
 8000a66:	01a4      	lsls	r4, r4, #6
 8000a68:	0a64      	lsrs	r4, r4, #9
 8000a6a:	b2d0      	uxtb	r0, r2
 8000a6c:	e7b2      	b.n	80009d4 <__aeabi_fmul+0x8c>
 8000a6e:	4643      	mov	r3, r8
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d13d      	bne.n	8000af0 <__aeabi_fmul+0x1a8>
 8000a74:	464a      	mov	r2, r9
 8000a76:	3301      	adds	r3, #1
 8000a78:	431a      	orrs	r2, r3
 8000a7a:	4691      	mov	r9, r2
 8000a7c:	469c      	mov	ip, r3
 8000a7e:	e792      	b.n	80009a6 <__aeabi_fmul+0x5e>
 8000a80:	2c00      	cmp	r4, #0
 8000a82:	d129      	bne.n	8000ad8 <__aeabi_fmul+0x190>
 8000a84:	2304      	movs	r3, #4
 8000a86:	4699      	mov	r9, r3
 8000a88:	3b03      	subs	r3, #3
 8000a8a:	2500      	movs	r5, #0
 8000a8c:	469a      	mov	sl, r3
 8000a8e:	e774      	b.n	800097a <__aeabi_fmul+0x32>
 8000a90:	2c00      	cmp	r4, #0
 8000a92:	d11b      	bne.n	8000acc <__aeabi_fmul+0x184>
 8000a94:	2308      	movs	r3, #8
 8000a96:	4699      	mov	r9, r3
 8000a98:	3b06      	subs	r3, #6
 8000a9a:	25ff      	movs	r5, #255	; 0xff
 8000a9c:	469a      	mov	sl, r3
 8000a9e:	e76c      	b.n	800097a <__aeabi_fmul+0x32>
 8000aa0:	4643      	mov	r3, r8
 8000aa2:	35ff      	adds	r5, #255	; 0xff
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d10b      	bne.n	8000ac0 <__aeabi_fmul+0x178>
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	464a      	mov	r2, r9
 8000aac:	431a      	orrs	r2, r3
 8000aae:	4691      	mov	r9, r2
 8000ab0:	469c      	mov	ip, r3
 8000ab2:	e778      	b.n	80009a6 <__aeabi_fmul+0x5e>
 8000ab4:	4653      	mov	r3, sl
 8000ab6:	0031      	movs	r1, r6
 8000ab8:	2b02      	cmp	r3, #2
 8000aba:	d000      	beq.n	8000abe <__aeabi_fmul+0x176>
 8000abc:	e783      	b.n	80009c6 <__aeabi_fmul+0x7e>
 8000abe:	e792      	b.n	80009e6 <__aeabi_fmul+0x9e>
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	464a      	mov	r2, r9
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	4691      	mov	r9, r2
 8000ac8:	469c      	mov	ip, r3
 8000aca:	e76c      	b.n	80009a6 <__aeabi_fmul+0x5e>
 8000acc:	230c      	movs	r3, #12
 8000ace:	4699      	mov	r9, r3
 8000ad0:	3b09      	subs	r3, #9
 8000ad2:	25ff      	movs	r5, #255	; 0xff
 8000ad4:	469a      	mov	sl, r3
 8000ad6:	e750      	b.n	800097a <__aeabi_fmul+0x32>
 8000ad8:	0020      	movs	r0, r4
 8000ada:	f000 fd9b 	bl	8001614 <__clzsi2>
 8000ade:	2576      	movs	r5, #118	; 0x76
 8000ae0:	1f43      	subs	r3, r0, #5
 8000ae2:	409c      	lsls	r4, r3
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	426d      	negs	r5, r5
 8000ae8:	4699      	mov	r9, r3
 8000aea:	469a      	mov	sl, r3
 8000aec:	1a2d      	subs	r5, r5, r0
 8000aee:	e744      	b.n	800097a <__aeabi_fmul+0x32>
 8000af0:	4640      	mov	r0, r8
 8000af2:	f000 fd8f 	bl	8001614 <__clzsi2>
 8000af6:	4642      	mov	r2, r8
 8000af8:	1f43      	subs	r3, r0, #5
 8000afa:	409a      	lsls	r2, r3
 8000afc:	2300      	movs	r3, #0
 8000afe:	1a2d      	subs	r5, r5, r0
 8000b00:	4690      	mov	r8, r2
 8000b02:	469c      	mov	ip, r3
 8000b04:	3d76      	subs	r5, #118	; 0x76
 8000b06:	e74e      	b.n	80009a6 <__aeabi_fmul+0x5e>
 8000b08:	2480      	movs	r4, #128	; 0x80
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	20ff      	movs	r0, #255	; 0xff
 8000b0e:	03e4      	lsls	r4, r4, #15
 8000b10:	e760      	b.n	80009d4 <__aeabi_fmul+0x8c>
 8000b12:	2301      	movs	r3, #1
 8000b14:	1a9b      	subs	r3, r3, r2
 8000b16:	2b1b      	cmp	r3, #27
 8000b18:	dd00      	ble.n	8000b1c <__aeabi_fmul+0x1d4>
 8000b1a:	e759      	b.n	80009d0 <__aeabi_fmul+0x88>
 8000b1c:	0022      	movs	r2, r4
 8000b1e:	309e      	adds	r0, #158	; 0x9e
 8000b20:	40da      	lsrs	r2, r3
 8000b22:	4084      	lsls	r4, r0
 8000b24:	0013      	movs	r3, r2
 8000b26:	1e62      	subs	r2, r4, #1
 8000b28:	4194      	sbcs	r4, r2
 8000b2a:	431c      	orrs	r4, r3
 8000b2c:	0763      	lsls	r3, r4, #29
 8000b2e:	d004      	beq.n	8000b3a <__aeabi_fmul+0x1f2>
 8000b30:	230f      	movs	r3, #15
 8000b32:	4023      	ands	r3, r4
 8000b34:	2b04      	cmp	r3, #4
 8000b36:	d000      	beq.n	8000b3a <__aeabi_fmul+0x1f2>
 8000b38:	3404      	adds	r4, #4
 8000b3a:	0163      	lsls	r3, r4, #5
 8000b3c:	d51a      	bpl.n	8000b74 <__aeabi_fmul+0x22c>
 8000b3e:	2001      	movs	r0, #1
 8000b40:	2400      	movs	r4, #0
 8000b42:	e747      	b.n	80009d4 <__aeabi_fmul+0x8c>
 8000b44:	2080      	movs	r0, #128	; 0x80
 8000b46:	03c0      	lsls	r0, r0, #15
 8000b48:	4204      	tst	r4, r0
 8000b4a:	d009      	beq.n	8000b60 <__aeabi_fmul+0x218>
 8000b4c:	4643      	mov	r3, r8
 8000b4e:	4203      	tst	r3, r0
 8000b50:	d106      	bne.n	8000b60 <__aeabi_fmul+0x218>
 8000b52:	4644      	mov	r4, r8
 8000b54:	4304      	orrs	r4, r0
 8000b56:	0264      	lsls	r4, r4, #9
 8000b58:	0039      	movs	r1, r7
 8000b5a:	20ff      	movs	r0, #255	; 0xff
 8000b5c:	0a64      	lsrs	r4, r4, #9
 8000b5e:	e739      	b.n	80009d4 <__aeabi_fmul+0x8c>
 8000b60:	2080      	movs	r0, #128	; 0x80
 8000b62:	03c0      	lsls	r0, r0, #15
 8000b64:	4304      	orrs	r4, r0
 8000b66:	0264      	lsls	r4, r4, #9
 8000b68:	0031      	movs	r1, r6
 8000b6a:	20ff      	movs	r0, #255	; 0xff
 8000b6c:	0a64      	lsrs	r4, r4, #9
 8000b6e:	e731      	b.n	80009d4 <__aeabi_fmul+0x8c>
 8000b70:	0028      	movs	r0, r5
 8000b72:	e765      	b.n	8000a40 <__aeabi_fmul+0xf8>
 8000b74:	01a4      	lsls	r4, r4, #6
 8000b76:	2000      	movs	r0, #0
 8000b78:	0a64      	lsrs	r4, r4, #9
 8000b7a:	e72b      	b.n	80009d4 <__aeabi_fmul+0x8c>
 8000b7c:	2080      	movs	r0, #128	; 0x80
 8000b7e:	03c0      	lsls	r0, r0, #15
 8000b80:	4304      	orrs	r4, r0
 8000b82:	0264      	lsls	r4, r4, #9
 8000b84:	20ff      	movs	r0, #255	; 0xff
 8000b86:	0a64      	lsrs	r4, r4, #9
 8000b88:	e724      	b.n	80009d4 <__aeabi_fmul+0x8c>
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	08006d00 	.word	0x08006d00
 8000b90:	f7ffffff 	.word	0xf7ffffff

08000b94 <__aeabi_fsub>:
 8000b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b96:	46ce      	mov	lr, r9
 8000b98:	4647      	mov	r7, r8
 8000b9a:	0243      	lsls	r3, r0, #9
 8000b9c:	0a5b      	lsrs	r3, r3, #9
 8000b9e:	024e      	lsls	r6, r1, #9
 8000ba0:	00da      	lsls	r2, r3, #3
 8000ba2:	4694      	mov	ip, r2
 8000ba4:	0a72      	lsrs	r2, r6, #9
 8000ba6:	4691      	mov	r9, r2
 8000ba8:	0045      	lsls	r5, r0, #1
 8000baa:	004a      	lsls	r2, r1, #1
 8000bac:	b580      	push	{r7, lr}
 8000bae:	0e2d      	lsrs	r5, r5, #24
 8000bb0:	001f      	movs	r7, r3
 8000bb2:	0fc4      	lsrs	r4, r0, #31
 8000bb4:	0e12      	lsrs	r2, r2, #24
 8000bb6:	0fc9      	lsrs	r1, r1, #31
 8000bb8:	09b6      	lsrs	r6, r6, #6
 8000bba:	2aff      	cmp	r2, #255	; 0xff
 8000bbc:	d05b      	beq.n	8000c76 <__aeabi_fsub+0xe2>
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	4041      	eors	r1, r0
 8000bc2:	428c      	cmp	r4, r1
 8000bc4:	d039      	beq.n	8000c3a <__aeabi_fsub+0xa6>
 8000bc6:	1aa8      	subs	r0, r5, r2
 8000bc8:	2800      	cmp	r0, #0
 8000bca:	dd5a      	ble.n	8000c82 <__aeabi_fsub+0xee>
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	d06a      	beq.n	8000ca6 <__aeabi_fsub+0x112>
 8000bd0:	2dff      	cmp	r5, #255	; 0xff
 8000bd2:	d100      	bne.n	8000bd6 <__aeabi_fsub+0x42>
 8000bd4:	e0d9      	b.n	8000d8a <__aeabi_fsub+0x1f6>
 8000bd6:	2280      	movs	r2, #128	; 0x80
 8000bd8:	04d2      	lsls	r2, r2, #19
 8000bda:	4316      	orrs	r6, r2
 8000bdc:	281b      	cmp	r0, #27
 8000bde:	dc00      	bgt.n	8000be2 <__aeabi_fsub+0x4e>
 8000be0:	e0e9      	b.n	8000db6 <__aeabi_fsub+0x222>
 8000be2:	2001      	movs	r0, #1
 8000be4:	4663      	mov	r3, ip
 8000be6:	1a18      	subs	r0, r3, r0
 8000be8:	0143      	lsls	r3, r0, #5
 8000bea:	d400      	bmi.n	8000bee <__aeabi_fsub+0x5a>
 8000bec:	e0b4      	b.n	8000d58 <__aeabi_fsub+0x1c4>
 8000bee:	0180      	lsls	r0, r0, #6
 8000bf0:	0987      	lsrs	r7, r0, #6
 8000bf2:	0038      	movs	r0, r7
 8000bf4:	f000 fd0e 	bl	8001614 <__clzsi2>
 8000bf8:	3805      	subs	r0, #5
 8000bfa:	4087      	lsls	r7, r0
 8000bfc:	4285      	cmp	r5, r0
 8000bfe:	dc00      	bgt.n	8000c02 <__aeabi_fsub+0x6e>
 8000c00:	e0cc      	b.n	8000d9c <__aeabi_fsub+0x208>
 8000c02:	1a2d      	subs	r5, r5, r0
 8000c04:	48b5      	ldr	r0, [pc, #724]	; (8000edc <__aeabi_fsub+0x348>)
 8000c06:	4038      	ands	r0, r7
 8000c08:	0743      	lsls	r3, r0, #29
 8000c0a:	d004      	beq.n	8000c16 <__aeabi_fsub+0x82>
 8000c0c:	230f      	movs	r3, #15
 8000c0e:	4003      	ands	r3, r0
 8000c10:	2b04      	cmp	r3, #4
 8000c12:	d000      	beq.n	8000c16 <__aeabi_fsub+0x82>
 8000c14:	3004      	adds	r0, #4
 8000c16:	0143      	lsls	r3, r0, #5
 8000c18:	d400      	bmi.n	8000c1c <__aeabi_fsub+0x88>
 8000c1a:	e0a0      	b.n	8000d5e <__aeabi_fsub+0x1ca>
 8000c1c:	1c6a      	adds	r2, r5, #1
 8000c1e:	2dfe      	cmp	r5, #254	; 0xfe
 8000c20:	d100      	bne.n	8000c24 <__aeabi_fsub+0x90>
 8000c22:	e08d      	b.n	8000d40 <__aeabi_fsub+0x1ac>
 8000c24:	0180      	lsls	r0, r0, #6
 8000c26:	0a47      	lsrs	r7, r0, #9
 8000c28:	b2d2      	uxtb	r2, r2
 8000c2a:	05d0      	lsls	r0, r2, #23
 8000c2c:	4338      	orrs	r0, r7
 8000c2e:	07e4      	lsls	r4, r4, #31
 8000c30:	4320      	orrs	r0, r4
 8000c32:	bcc0      	pop	{r6, r7}
 8000c34:	46b9      	mov	r9, r7
 8000c36:	46b0      	mov	r8, r6
 8000c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c3a:	1aa8      	subs	r0, r5, r2
 8000c3c:	4680      	mov	r8, r0
 8000c3e:	2800      	cmp	r0, #0
 8000c40:	dd45      	ble.n	8000cce <__aeabi_fsub+0x13a>
 8000c42:	2a00      	cmp	r2, #0
 8000c44:	d070      	beq.n	8000d28 <__aeabi_fsub+0x194>
 8000c46:	2dff      	cmp	r5, #255	; 0xff
 8000c48:	d100      	bne.n	8000c4c <__aeabi_fsub+0xb8>
 8000c4a:	e09e      	b.n	8000d8a <__aeabi_fsub+0x1f6>
 8000c4c:	2380      	movs	r3, #128	; 0x80
 8000c4e:	04db      	lsls	r3, r3, #19
 8000c50:	431e      	orrs	r6, r3
 8000c52:	4643      	mov	r3, r8
 8000c54:	2b1b      	cmp	r3, #27
 8000c56:	dc00      	bgt.n	8000c5a <__aeabi_fsub+0xc6>
 8000c58:	e0d2      	b.n	8000e00 <__aeabi_fsub+0x26c>
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	4460      	add	r0, ip
 8000c5e:	0143      	lsls	r3, r0, #5
 8000c60:	d57a      	bpl.n	8000d58 <__aeabi_fsub+0x1c4>
 8000c62:	3501      	adds	r5, #1
 8000c64:	2dff      	cmp	r5, #255	; 0xff
 8000c66:	d06b      	beq.n	8000d40 <__aeabi_fsub+0x1ac>
 8000c68:	2301      	movs	r3, #1
 8000c6a:	4a9d      	ldr	r2, [pc, #628]	; (8000ee0 <__aeabi_fsub+0x34c>)
 8000c6c:	4003      	ands	r3, r0
 8000c6e:	0840      	lsrs	r0, r0, #1
 8000c70:	4010      	ands	r0, r2
 8000c72:	4318      	orrs	r0, r3
 8000c74:	e7c8      	b.n	8000c08 <__aeabi_fsub+0x74>
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	d020      	beq.n	8000cbc <__aeabi_fsub+0x128>
 8000c7a:	428c      	cmp	r4, r1
 8000c7c:	d023      	beq.n	8000cc6 <__aeabi_fsub+0x132>
 8000c7e:	0028      	movs	r0, r5
 8000c80:	38ff      	subs	r0, #255	; 0xff
 8000c82:	2800      	cmp	r0, #0
 8000c84:	d039      	beq.n	8000cfa <__aeabi_fsub+0x166>
 8000c86:	1b57      	subs	r7, r2, r5
 8000c88:	2d00      	cmp	r5, #0
 8000c8a:	d000      	beq.n	8000c8e <__aeabi_fsub+0xfa>
 8000c8c:	e09d      	b.n	8000dca <__aeabi_fsub+0x236>
 8000c8e:	4663      	mov	r3, ip
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d100      	bne.n	8000c96 <__aeabi_fsub+0x102>
 8000c94:	e0db      	b.n	8000e4e <__aeabi_fsub+0x2ba>
 8000c96:	1e7b      	subs	r3, r7, #1
 8000c98:	2f01      	cmp	r7, #1
 8000c9a:	d100      	bne.n	8000c9e <__aeabi_fsub+0x10a>
 8000c9c:	e10d      	b.n	8000eba <__aeabi_fsub+0x326>
 8000c9e:	2fff      	cmp	r7, #255	; 0xff
 8000ca0:	d071      	beq.n	8000d86 <__aeabi_fsub+0x1f2>
 8000ca2:	001f      	movs	r7, r3
 8000ca4:	e098      	b.n	8000dd8 <__aeabi_fsub+0x244>
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d100      	bne.n	8000cac <__aeabi_fsub+0x118>
 8000caa:	e0a7      	b.n	8000dfc <__aeabi_fsub+0x268>
 8000cac:	1e42      	subs	r2, r0, #1
 8000cae:	2801      	cmp	r0, #1
 8000cb0:	d100      	bne.n	8000cb4 <__aeabi_fsub+0x120>
 8000cb2:	e0e6      	b.n	8000e82 <__aeabi_fsub+0x2ee>
 8000cb4:	28ff      	cmp	r0, #255	; 0xff
 8000cb6:	d068      	beq.n	8000d8a <__aeabi_fsub+0x1f6>
 8000cb8:	0010      	movs	r0, r2
 8000cba:	e78f      	b.n	8000bdc <__aeabi_fsub+0x48>
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4041      	eors	r1, r0
 8000cc0:	42a1      	cmp	r1, r4
 8000cc2:	d000      	beq.n	8000cc6 <__aeabi_fsub+0x132>
 8000cc4:	e77f      	b.n	8000bc6 <__aeabi_fsub+0x32>
 8000cc6:	20ff      	movs	r0, #255	; 0xff
 8000cc8:	4240      	negs	r0, r0
 8000cca:	4680      	mov	r8, r0
 8000ccc:	44a8      	add	r8, r5
 8000cce:	4640      	mov	r0, r8
 8000cd0:	2800      	cmp	r0, #0
 8000cd2:	d038      	beq.n	8000d46 <__aeabi_fsub+0x1b2>
 8000cd4:	1b51      	subs	r1, r2, r5
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d100      	bne.n	8000cdc <__aeabi_fsub+0x148>
 8000cda:	e0ae      	b.n	8000e3a <__aeabi_fsub+0x2a6>
 8000cdc:	2aff      	cmp	r2, #255	; 0xff
 8000cde:	d100      	bne.n	8000ce2 <__aeabi_fsub+0x14e>
 8000ce0:	e0df      	b.n	8000ea2 <__aeabi_fsub+0x30e>
 8000ce2:	2380      	movs	r3, #128	; 0x80
 8000ce4:	4660      	mov	r0, ip
 8000ce6:	04db      	lsls	r3, r3, #19
 8000ce8:	4318      	orrs	r0, r3
 8000cea:	4684      	mov	ip, r0
 8000cec:	291b      	cmp	r1, #27
 8000cee:	dc00      	bgt.n	8000cf2 <__aeabi_fsub+0x15e>
 8000cf0:	e0d9      	b.n	8000ea6 <__aeabi_fsub+0x312>
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	0015      	movs	r5, r2
 8000cf6:	1980      	adds	r0, r0, r6
 8000cf8:	e7b1      	b.n	8000c5e <__aeabi_fsub+0xca>
 8000cfa:	20fe      	movs	r0, #254	; 0xfe
 8000cfc:	1c6a      	adds	r2, r5, #1
 8000cfe:	4210      	tst	r0, r2
 8000d00:	d171      	bne.n	8000de6 <__aeabi_fsub+0x252>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	d000      	beq.n	8000d08 <__aeabi_fsub+0x174>
 8000d06:	e0a6      	b.n	8000e56 <__aeabi_fsub+0x2c2>
 8000d08:	4663      	mov	r3, ip
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d100      	bne.n	8000d10 <__aeabi_fsub+0x17c>
 8000d0e:	e0d9      	b.n	8000ec4 <__aeabi_fsub+0x330>
 8000d10:	2200      	movs	r2, #0
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d100      	bne.n	8000d18 <__aeabi_fsub+0x184>
 8000d16:	e788      	b.n	8000c2a <__aeabi_fsub+0x96>
 8000d18:	1b98      	subs	r0, r3, r6
 8000d1a:	0143      	lsls	r3, r0, #5
 8000d1c:	d400      	bmi.n	8000d20 <__aeabi_fsub+0x18c>
 8000d1e:	e0e1      	b.n	8000ee4 <__aeabi_fsub+0x350>
 8000d20:	4663      	mov	r3, ip
 8000d22:	000c      	movs	r4, r1
 8000d24:	1af0      	subs	r0, r6, r3
 8000d26:	e76f      	b.n	8000c08 <__aeabi_fsub+0x74>
 8000d28:	2e00      	cmp	r6, #0
 8000d2a:	d100      	bne.n	8000d2e <__aeabi_fsub+0x19a>
 8000d2c:	e0b7      	b.n	8000e9e <__aeabi_fsub+0x30a>
 8000d2e:	0002      	movs	r2, r0
 8000d30:	3a01      	subs	r2, #1
 8000d32:	2801      	cmp	r0, #1
 8000d34:	d100      	bne.n	8000d38 <__aeabi_fsub+0x1a4>
 8000d36:	e09c      	b.n	8000e72 <__aeabi_fsub+0x2de>
 8000d38:	28ff      	cmp	r0, #255	; 0xff
 8000d3a:	d026      	beq.n	8000d8a <__aeabi_fsub+0x1f6>
 8000d3c:	4690      	mov	r8, r2
 8000d3e:	e788      	b.n	8000c52 <__aeabi_fsub+0xbe>
 8000d40:	22ff      	movs	r2, #255	; 0xff
 8000d42:	2700      	movs	r7, #0
 8000d44:	e771      	b.n	8000c2a <__aeabi_fsub+0x96>
 8000d46:	20fe      	movs	r0, #254	; 0xfe
 8000d48:	1c6a      	adds	r2, r5, #1
 8000d4a:	4210      	tst	r0, r2
 8000d4c:	d064      	beq.n	8000e18 <__aeabi_fsub+0x284>
 8000d4e:	2aff      	cmp	r2, #255	; 0xff
 8000d50:	d0f6      	beq.n	8000d40 <__aeabi_fsub+0x1ac>
 8000d52:	0015      	movs	r5, r2
 8000d54:	4466      	add	r6, ip
 8000d56:	0870      	lsrs	r0, r6, #1
 8000d58:	0743      	lsls	r3, r0, #29
 8000d5a:	d000      	beq.n	8000d5e <__aeabi_fsub+0x1ca>
 8000d5c:	e756      	b.n	8000c0c <__aeabi_fsub+0x78>
 8000d5e:	08c3      	lsrs	r3, r0, #3
 8000d60:	2dff      	cmp	r5, #255	; 0xff
 8000d62:	d012      	beq.n	8000d8a <__aeabi_fsub+0x1f6>
 8000d64:	025b      	lsls	r3, r3, #9
 8000d66:	0a5f      	lsrs	r7, r3, #9
 8000d68:	b2ea      	uxtb	r2, r5
 8000d6a:	e75e      	b.n	8000c2a <__aeabi_fsub+0x96>
 8000d6c:	4662      	mov	r2, ip
 8000d6e:	2a00      	cmp	r2, #0
 8000d70:	d100      	bne.n	8000d74 <__aeabi_fsub+0x1e0>
 8000d72:	e096      	b.n	8000ea2 <__aeabi_fsub+0x30e>
 8000d74:	2e00      	cmp	r6, #0
 8000d76:	d008      	beq.n	8000d8a <__aeabi_fsub+0x1f6>
 8000d78:	2280      	movs	r2, #128	; 0x80
 8000d7a:	03d2      	lsls	r2, r2, #15
 8000d7c:	4213      	tst	r3, r2
 8000d7e:	d004      	beq.n	8000d8a <__aeabi_fsub+0x1f6>
 8000d80:	4648      	mov	r0, r9
 8000d82:	4210      	tst	r0, r2
 8000d84:	d101      	bne.n	8000d8a <__aeabi_fsub+0x1f6>
 8000d86:	000c      	movs	r4, r1
 8000d88:	464b      	mov	r3, r9
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d0d8      	beq.n	8000d40 <__aeabi_fsub+0x1ac>
 8000d8e:	2780      	movs	r7, #128	; 0x80
 8000d90:	03ff      	lsls	r7, r7, #15
 8000d92:	431f      	orrs	r7, r3
 8000d94:	027f      	lsls	r7, r7, #9
 8000d96:	22ff      	movs	r2, #255	; 0xff
 8000d98:	0a7f      	lsrs	r7, r7, #9
 8000d9a:	e746      	b.n	8000c2a <__aeabi_fsub+0x96>
 8000d9c:	2320      	movs	r3, #32
 8000d9e:	003a      	movs	r2, r7
 8000da0:	1b45      	subs	r5, r0, r5
 8000da2:	0038      	movs	r0, r7
 8000da4:	3501      	adds	r5, #1
 8000da6:	40ea      	lsrs	r2, r5
 8000da8:	1b5d      	subs	r5, r3, r5
 8000daa:	40a8      	lsls	r0, r5
 8000dac:	1e43      	subs	r3, r0, #1
 8000dae:	4198      	sbcs	r0, r3
 8000db0:	2500      	movs	r5, #0
 8000db2:	4310      	orrs	r0, r2
 8000db4:	e728      	b.n	8000c08 <__aeabi_fsub+0x74>
 8000db6:	2320      	movs	r3, #32
 8000db8:	1a1b      	subs	r3, r3, r0
 8000dba:	0032      	movs	r2, r6
 8000dbc:	409e      	lsls	r6, r3
 8000dbe:	40c2      	lsrs	r2, r0
 8000dc0:	0030      	movs	r0, r6
 8000dc2:	1e43      	subs	r3, r0, #1
 8000dc4:	4198      	sbcs	r0, r3
 8000dc6:	4310      	orrs	r0, r2
 8000dc8:	e70c      	b.n	8000be4 <__aeabi_fsub+0x50>
 8000dca:	2aff      	cmp	r2, #255	; 0xff
 8000dcc:	d0db      	beq.n	8000d86 <__aeabi_fsub+0x1f2>
 8000dce:	2380      	movs	r3, #128	; 0x80
 8000dd0:	4660      	mov	r0, ip
 8000dd2:	04db      	lsls	r3, r3, #19
 8000dd4:	4318      	orrs	r0, r3
 8000dd6:	4684      	mov	ip, r0
 8000dd8:	2f1b      	cmp	r7, #27
 8000dda:	dd56      	ble.n	8000e8a <__aeabi_fsub+0x2f6>
 8000ddc:	2001      	movs	r0, #1
 8000dde:	000c      	movs	r4, r1
 8000de0:	0015      	movs	r5, r2
 8000de2:	1a30      	subs	r0, r6, r0
 8000de4:	e700      	b.n	8000be8 <__aeabi_fsub+0x54>
 8000de6:	4663      	mov	r3, ip
 8000de8:	1b9f      	subs	r7, r3, r6
 8000dea:	017b      	lsls	r3, r7, #5
 8000dec:	d43d      	bmi.n	8000e6a <__aeabi_fsub+0x2d6>
 8000dee:	2f00      	cmp	r7, #0
 8000df0:	d000      	beq.n	8000df4 <__aeabi_fsub+0x260>
 8000df2:	e6fe      	b.n	8000bf2 <__aeabi_fsub+0x5e>
 8000df4:	2400      	movs	r4, #0
 8000df6:	2200      	movs	r2, #0
 8000df8:	2700      	movs	r7, #0
 8000dfa:	e716      	b.n	8000c2a <__aeabi_fsub+0x96>
 8000dfc:	0005      	movs	r5, r0
 8000dfe:	e7af      	b.n	8000d60 <__aeabi_fsub+0x1cc>
 8000e00:	0032      	movs	r2, r6
 8000e02:	4643      	mov	r3, r8
 8000e04:	4641      	mov	r1, r8
 8000e06:	40da      	lsrs	r2, r3
 8000e08:	2320      	movs	r3, #32
 8000e0a:	1a5b      	subs	r3, r3, r1
 8000e0c:	409e      	lsls	r6, r3
 8000e0e:	0030      	movs	r0, r6
 8000e10:	1e43      	subs	r3, r0, #1
 8000e12:	4198      	sbcs	r0, r3
 8000e14:	4310      	orrs	r0, r2
 8000e16:	e721      	b.n	8000c5c <__aeabi_fsub+0xc8>
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d1a7      	bne.n	8000d6c <__aeabi_fsub+0x1d8>
 8000e1c:	4663      	mov	r3, ip
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d059      	beq.n	8000ed6 <__aeabi_fsub+0x342>
 8000e22:	2200      	movs	r2, #0
 8000e24:	2e00      	cmp	r6, #0
 8000e26:	d100      	bne.n	8000e2a <__aeabi_fsub+0x296>
 8000e28:	e6ff      	b.n	8000c2a <__aeabi_fsub+0x96>
 8000e2a:	0030      	movs	r0, r6
 8000e2c:	4460      	add	r0, ip
 8000e2e:	0143      	lsls	r3, r0, #5
 8000e30:	d592      	bpl.n	8000d58 <__aeabi_fsub+0x1c4>
 8000e32:	4b2a      	ldr	r3, [pc, #168]	; (8000edc <__aeabi_fsub+0x348>)
 8000e34:	3501      	adds	r5, #1
 8000e36:	4018      	ands	r0, r3
 8000e38:	e78e      	b.n	8000d58 <__aeabi_fsub+0x1c4>
 8000e3a:	4663      	mov	r3, ip
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d047      	beq.n	8000ed0 <__aeabi_fsub+0x33c>
 8000e40:	1e4b      	subs	r3, r1, #1
 8000e42:	2901      	cmp	r1, #1
 8000e44:	d015      	beq.n	8000e72 <__aeabi_fsub+0x2de>
 8000e46:	29ff      	cmp	r1, #255	; 0xff
 8000e48:	d02b      	beq.n	8000ea2 <__aeabi_fsub+0x30e>
 8000e4a:	0019      	movs	r1, r3
 8000e4c:	e74e      	b.n	8000cec <__aeabi_fsub+0x158>
 8000e4e:	000c      	movs	r4, r1
 8000e50:	464b      	mov	r3, r9
 8000e52:	003d      	movs	r5, r7
 8000e54:	e784      	b.n	8000d60 <__aeabi_fsub+0x1cc>
 8000e56:	4662      	mov	r2, ip
 8000e58:	2a00      	cmp	r2, #0
 8000e5a:	d18b      	bne.n	8000d74 <__aeabi_fsub+0x1e0>
 8000e5c:	2e00      	cmp	r6, #0
 8000e5e:	d192      	bne.n	8000d86 <__aeabi_fsub+0x1f2>
 8000e60:	2780      	movs	r7, #128	; 0x80
 8000e62:	2400      	movs	r4, #0
 8000e64:	22ff      	movs	r2, #255	; 0xff
 8000e66:	03ff      	lsls	r7, r7, #15
 8000e68:	e6df      	b.n	8000c2a <__aeabi_fsub+0x96>
 8000e6a:	4663      	mov	r3, ip
 8000e6c:	000c      	movs	r4, r1
 8000e6e:	1af7      	subs	r7, r6, r3
 8000e70:	e6bf      	b.n	8000bf2 <__aeabi_fsub+0x5e>
 8000e72:	0030      	movs	r0, r6
 8000e74:	4460      	add	r0, ip
 8000e76:	2501      	movs	r5, #1
 8000e78:	0143      	lsls	r3, r0, #5
 8000e7a:	d400      	bmi.n	8000e7e <__aeabi_fsub+0x2ea>
 8000e7c:	e76c      	b.n	8000d58 <__aeabi_fsub+0x1c4>
 8000e7e:	2502      	movs	r5, #2
 8000e80:	e6f2      	b.n	8000c68 <__aeabi_fsub+0xd4>
 8000e82:	4663      	mov	r3, ip
 8000e84:	2501      	movs	r5, #1
 8000e86:	1b98      	subs	r0, r3, r6
 8000e88:	e6ae      	b.n	8000be8 <__aeabi_fsub+0x54>
 8000e8a:	2320      	movs	r3, #32
 8000e8c:	4664      	mov	r4, ip
 8000e8e:	4660      	mov	r0, ip
 8000e90:	40fc      	lsrs	r4, r7
 8000e92:	1bdf      	subs	r7, r3, r7
 8000e94:	40b8      	lsls	r0, r7
 8000e96:	1e43      	subs	r3, r0, #1
 8000e98:	4198      	sbcs	r0, r3
 8000e9a:	4320      	orrs	r0, r4
 8000e9c:	e79f      	b.n	8000dde <__aeabi_fsub+0x24a>
 8000e9e:	0005      	movs	r5, r0
 8000ea0:	e75e      	b.n	8000d60 <__aeabi_fsub+0x1cc>
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	e771      	b.n	8000d8a <__aeabi_fsub+0x1f6>
 8000ea6:	2320      	movs	r3, #32
 8000ea8:	4665      	mov	r5, ip
 8000eaa:	4660      	mov	r0, ip
 8000eac:	40cd      	lsrs	r5, r1
 8000eae:	1a59      	subs	r1, r3, r1
 8000eb0:	4088      	lsls	r0, r1
 8000eb2:	1e43      	subs	r3, r0, #1
 8000eb4:	4198      	sbcs	r0, r3
 8000eb6:	4328      	orrs	r0, r5
 8000eb8:	e71c      	b.n	8000cf4 <__aeabi_fsub+0x160>
 8000eba:	4663      	mov	r3, ip
 8000ebc:	000c      	movs	r4, r1
 8000ebe:	2501      	movs	r5, #1
 8000ec0:	1af0      	subs	r0, r6, r3
 8000ec2:	e691      	b.n	8000be8 <__aeabi_fsub+0x54>
 8000ec4:	2e00      	cmp	r6, #0
 8000ec6:	d095      	beq.n	8000df4 <__aeabi_fsub+0x260>
 8000ec8:	000c      	movs	r4, r1
 8000eca:	464f      	mov	r7, r9
 8000ecc:	2200      	movs	r2, #0
 8000ece:	e6ac      	b.n	8000c2a <__aeabi_fsub+0x96>
 8000ed0:	464b      	mov	r3, r9
 8000ed2:	000d      	movs	r5, r1
 8000ed4:	e744      	b.n	8000d60 <__aeabi_fsub+0x1cc>
 8000ed6:	464f      	mov	r7, r9
 8000ed8:	2200      	movs	r2, #0
 8000eda:	e6a6      	b.n	8000c2a <__aeabi_fsub+0x96>
 8000edc:	fbffffff 	.word	0xfbffffff
 8000ee0:	7dffffff 	.word	0x7dffffff
 8000ee4:	2800      	cmp	r0, #0
 8000ee6:	d000      	beq.n	8000eea <__aeabi_fsub+0x356>
 8000ee8:	e736      	b.n	8000d58 <__aeabi_fsub+0x1c4>
 8000eea:	2400      	movs	r4, #0
 8000eec:	2700      	movs	r7, #0
 8000eee:	e69c      	b.n	8000c2a <__aeabi_fsub+0x96>

08000ef0 <__aeabi_f2iz>:
 8000ef0:	0241      	lsls	r1, r0, #9
 8000ef2:	0042      	lsls	r2, r0, #1
 8000ef4:	0fc3      	lsrs	r3, r0, #31
 8000ef6:	0a49      	lsrs	r1, r1, #9
 8000ef8:	2000      	movs	r0, #0
 8000efa:	0e12      	lsrs	r2, r2, #24
 8000efc:	2a7e      	cmp	r2, #126	; 0x7e
 8000efe:	dd03      	ble.n	8000f08 <__aeabi_f2iz+0x18>
 8000f00:	2a9d      	cmp	r2, #157	; 0x9d
 8000f02:	dd02      	ble.n	8000f0a <__aeabi_f2iz+0x1a>
 8000f04:	4a09      	ldr	r2, [pc, #36]	; (8000f2c <__aeabi_f2iz+0x3c>)
 8000f06:	1898      	adds	r0, r3, r2
 8000f08:	4770      	bx	lr
 8000f0a:	2080      	movs	r0, #128	; 0x80
 8000f0c:	0400      	lsls	r0, r0, #16
 8000f0e:	4301      	orrs	r1, r0
 8000f10:	2a95      	cmp	r2, #149	; 0x95
 8000f12:	dc07      	bgt.n	8000f24 <__aeabi_f2iz+0x34>
 8000f14:	2096      	movs	r0, #150	; 0x96
 8000f16:	1a82      	subs	r2, r0, r2
 8000f18:	40d1      	lsrs	r1, r2
 8000f1a:	4248      	negs	r0, r1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d1f3      	bne.n	8000f08 <__aeabi_f2iz+0x18>
 8000f20:	0008      	movs	r0, r1
 8000f22:	e7f1      	b.n	8000f08 <__aeabi_f2iz+0x18>
 8000f24:	3a96      	subs	r2, #150	; 0x96
 8000f26:	4091      	lsls	r1, r2
 8000f28:	e7f7      	b.n	8000f1a <__aeabi_f2iz+0x2a>
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	7fffffff 	.word	0x7fffffff

08000f30 <__aeabi_i2f>:
 8000f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f32:	2800      	cmp	r0, #0
 8000f34:	d013      	beq.n	8000f5e <__aeabi_i2f+0x2e>
 8000f36:	17c3      	asrs	r3, r0, #31
 8000f38:	18c6      	adds	r6, r0, r3
 8000f3a:	405e      	eors	r6, r3
 8000f3c:	0fc4      	lsrs	r4, r0, #31
 8000f3e:	0030      	movs	r0, r6
 8000f40:	f000 fb68 	bl	8001614 <__clzsi2>
 8000f44:	239e      	movs	r3, #158	; 0x9e
 8000f46:	0005      	movs	r5, r0
 8000f48:	1a1b      	subs	r3, r3, r0
 8000f4a:	2b96      	cmp	r3, #150	; 0x96
 8000f4c:	dc0f      	bgt.n	8000f6e <__aeabi_i2f+0x3e>
 8000f4e:	2808      	cmp	r0, #8
 8000f50:	dd01      	ble.n	8000f56 <__aeabi_i2f+0x26>
 8000f52:	3d08      	subs	r5, #8
 8000f54:	40ae      	lsls	r6, r5
 8000f56:	0276      	lsls	r6, r6, #9
 8000f58:	0a76      	lsrs	r6, r6, #9
 8000f5a:	b2d8      	uxtb	r0, r3
 8000f5c:	e002      	b.n	8000f64 <__aeabi_i2f+0x34>
 8000f5e:	2400      	movs	r4, #0
 8000f60:	2000      	movs	r0, #0
 8000f62:	2600      	movs	r6, #0
 8000f64:	05c0      	lsls	r0, r0, #23
 8000f66:	4330      	orrs	r0, r6
 8000f68:	07e4      	lsls	r4, r4, #31
 8000f6a:	4320      	orrs	r0, r4
 8000f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f6e:	2b99      	cmp	r3, #153	; 0x99
 8000f70:	dd0c      	ble.n	8000f8c <__aeabi_i2f+0x5c>
 8000f72:	2205      	movs	r2, #5
 8000f74:	0031      	movs	r1, r6
 8000f76:	1a12      	subs	r2, r2, r0
 8000f78:	40d1      	lsrs	r1, r2
 8000f7a:	000a      	movs	r2, r1
 8000f7c:	0001      	movs	r1, r0
 8000f7e:	0030      	movs	r0, r6
 8000f80:	311b      	adds	r1, #27
 8000f82:	4088      	lsls	r0, r1
 8000f84:	1e41      	subs	r1, r0, #1
 8000f86:	4188      	sbcs	r0, r1
 8000f88:	4302      	orrs	r2, r0
 8000f8a:	0016      	movs	r6, r2
 8000f8c:	2d05      	cmp	r5, #5
 8000f8e:	dc12      	bgt.n	8000fb6 <__aeabi_i2f+0x86>
 8000f90:	0031      	movs	r1, r6
 8000f92:	4f0d      	ldr	r7, [pc, #52]	; (8000fc8 <__aeabi_i2f+0x98>)
 8000f94:	4039      	ands	r1, r7
 8000f96:	0772      	lsls	r2, r6, #29
 8000f98:	d009      	beq.n	8000fae <__aeabi_i2f+0x7e>
 8000f9a:	200f      	movs	r0, #15
 8000f9c:	4030      	ands	r0, r6
 8000f9e:	2804      	cmp	r0, #4
 8000fa0:	d005      	beq.n	8000fae <__aeabi_i2f+0x7e>
 8000fa2:	3104      	adds	r1, #4
 8000fa4:	014a      	lsls	r2, r1, #5
 8000fa6:	d502      	bpl.n	8000fae <__aeabi_i2f+0x7e>
 8000fa8:	239f      	movs	r3, #159	; 0x9f
 8000faa:	4039      	ands	r1, r7
 8000fac:	1b5b      	subs	r3, r3, r5
 8000fae:	0189      	lsls	r1, r1, #6
 8000fb0:	0a4e      	lsrs	r6, r1, #9
 8000fb2:	b2d8      	uxtb	r0, r3
 8000fb4:	e7d6      	b.n	8000f64 <__aeabi_i2f+0x34>
 8000fb6:	1f6a      	subs	r2, r5, #5
 8000fb8:	4096      	lsls	r6, r2
 8000fba:	0031      	movs	r1, r6
 8000fbc:	4f02      	ldr	r7, [pc, #8]	; (8000fc8 <__aeabi_i2f+0x98>)
 8000fbe:	4039      	ands	r1, r7
 8000fc0:	0772      	lsls	r2, r6, #29
 8000fc2:	d0f4      	beq.n	8000fae <__aeabi_i2f+0x7e>
 8000fc4:	e7e9      	b.n	8000f9a <__aeabi_i2f+0x6a>
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	fbffffff 	.word	0xfbffffff

08000fcc <__aeabi_dmul>:
 8000fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fce:	4657      	mov	r7, sl
 8000fd0:	464e      	mov	r6, r9
 8000fd2:	4645      	mov	r5, r8
 8000fd4:	46de      	mov	lr, fp
 8000fd6:	b5e0      	push	{r5, r6, r7, lr}
 8000fd8:	4698      	mov	r8, r3
 8000fda:	030c      	lsls	r4, r1, #12
 8000fdc:	004b      	lsls	r3, r1, #1
 8000fde:	0006      	movs	r6, r0
 8000fe0:	4692      	mov	sl, r2
 8000fe2:	b087      	sub	sp, #28
 8000fe4:	0b24      	lsrs	r4, r4, #12
 8000fe6:	0d5b      	lsrs	r3, r3, #21
 8000fe8:	0fcf      	lsrs	r7, r1, #31
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d100      	bne.n	8000ff0 <__aeabi_dmul+0x24>
 8000fee:	e15c      	b.n	80012aa <__aeabi_dmul+0x2de>
 8000ff0:	4ad9      	ldr	r2, [pc, #868]	; (8001358 <__aeabi_dmul+0x38c>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_dmul+0x2c>
 8000ff6:	e175      	b.n	80012e4 <__aeabi_dmul+0x318>
 8000ff8:	0f42      	lsrs	r2, r0, #29
 8000ffa:	00e4      	lsls	r4, r4, #3
 8000ffc:	4314      	orrs	r4, r2
 8000ffe:	2280      	movs	r2, #128	; 0x80
 8001000:	0412      	lsls	r2, r2, #16
 8001002:	4314      	orrs	r4, r2
 8001004:	4ad5      	ldr	r2, [pc, #852]	; (800135c <__aeabi_dmul+0x390>)
 8001006:	00c5      	lsls	r5, r0, #3
 8001008:	4694      	mov	ip, r2
 800100a:	4463      	add	r3, ip
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2300      	movs	r3, #0
 8001010:	4699      	mov	r9, r3
 8001012:	469b      	mov	fp, r3
 8001014:	4643      	mov	r3, r8
 8001016:	4642      	mov	r2, r8
 8001018:	031e      	lsls	r6, r3, #12
 800101a:	0fd2      	lsrs	r2, r2, #31
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	4650      	mov	r0, sl
 8001020:	4690      	mov	r8, r2
 8001022:	0b36      	lsrs	r6, r6, #12
 8001024:	0d5b      	lsrs	r3, r3, #21
 8001026:	d100      	bne.n	800102a <__aeabi_dmul+0x5e>
 8001028:	e120      	b.n	800126c <__aeabi_dmul+0x2a0>
 800102a:	4acb      	ldr	r2, [pc, #812]	; (8001358 <__aeabi_dmul+0x38c>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d100      	bne.n	8001032 <__aeabi_dmul+0x66>
 8001030:	e162      	b.n	80012f8 <__aeabi_dmul+0x32c>
 8001032:	49ca      	ldr	r1, [pc, #808]	; (800135c <__aeabi_dmul+0x390>)
 8001034:	0f42      	lsrs	r2, r0, #29
 8001036:	468c      	mov	ip, r1
 8001038:	9900      	ldr	r1, [sp, #0]
 800103a:	4463      	add	r3, ip
 800103c:	00f6      	lsls	r6, r6, #3
 800103e:	468c      	mov	ip, r1
 8001040:	4316      	orrs	r6, r2
 8001042:	2280      	movs	r2, #128	; 0x80
 8001044:	449c      	add	ip, r3
 8001046:	0412      	lsls	r2, r2, #16
 8001048:	4663      	mov	r3, ip
 800104a:	4316      	orrs	r6, r2
 800104c:	00c2      	lsls	r2, r0, #3
 800104e:	2000      	movs	r0, #0
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	9900      	ldr	r1, [sp, #0]
 8001054:	4643      	mov	r3, r8
 8001056:	3101      	adds	r1, #1
 8001058:	468c      	mov	ip, r1
 800105a:	4649      	mov	r1, r9
 800105c:	407b      	eors	r3, r7
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	290f      	cmp	r1, #15
 8001062:	d826      	bhi.n	80010b2 <__aeabi_dmul+0xe6>
 8001064:	4bbe      	ldr	r3, [pc, #760]	; (8001360 <__aeabi_dmul+0x394>)
 8001066:	0089      	lsls	r1, r1, #2
 8001068:	5859      	ldr	r1, [r3, r1]
 800106a:	468f      	mov	pc, r1
 800106c:	4643      	mov	r3, r8
 800106e:	9301      	str	r3, [sp, #4]
 8001070:	0034      	movs	r4, r6
 8001072:	0015      	movs	r5, r2
 8001074:	4683      	mov	fp, r0
 8001076:	465b      	mov	r3, fp
 8001078:	2b02      	cmp	r3, #2
 800107a:	d016      	beq.n	80010aa <__aeabi_dmul+0xde>
 800107c:	2b03      	cmp	r3, #3
 800107e:	d100      	bne.n	8001082 <__aeabi_dmul+0xb6>
 8001080:	e203      	b.n	800148a <__aeabi_dmul+0x4be>
 8001082:	2b01      	cmp	r3, #1
 8001084:	d000      	beq.n	8001088 <__aeabi_dmul+0xbc>
 8001086:	e0cd      	b.n	8001224 <__aeabi_dmul+0x258>
 8001088:	2200      	movs	r2, #0
 800108a:	2400      	movs	r4, #0
 800108c:	2500      	movs	r5, #0
 800108e:	9b01      	ldr	r3, [sp, #4]
 8001090:	0512      	lsls	r2, r2, #20
 8001092:	4322      	orrs	r2, r4
 8001094:	07db      	lsls	r3, r3, #31
 8001096:	431a      	orrs	r2, r3
 8001098:	0028      	movs	r0, r5
 800109a:	0011      	movs	r1, r2
 800109c:	b007      	add	sp, #28
 800109e:	bcf0      	pop	{r4, r5, r6, r7}
 80010a0:	46bb      	mov	fp, r7
 80010a2:	46b2      	mov	sl, r6
 80010a4:	46a9      	mov	r9, r5
 80010a6:	46a0      	mov	r8, r4
 80010a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010aa:	2400      	movs	r4, #0
 80010ac:	2500      	movs	r5, #0
 80010ae:	4aaa      	ldr	r2, [pc, #680]	; (8001358 <__aeabi_dmul+0x38c>)
 80010b0:	e7ed      	b.n	800108e <__aeabi_dmul+0xc2>
 80010b2:	0c28      	lsrs	r0, r5, #16
 80010b4:	042d      	lsls	r5, r5, #16
 80010b6:	0c2d      	lsrs	r5, r5, #16
 80010b8:	002b      	movs	r3, r5
 80010ba:	0c11      	lsrs	r1, r2, #16
 80010bc:	0412      	lsls	r2, r2, #16
 80010be:	0c12      	lsrs	r2, r2, #16
 80010c0:	4353      	muls	r3, r2
 80010c2:	4698      	mov	r8, r3
 80010c4:	0013      	movs	r3, r2
 80010c6:	002f      	movs	r7, r5
 80010c8:	4343      	muls	r3, r0
 80010ca:	4699      	mov	r9, r3
 80010cc:	434f      	muls	r7, r1
 80010ce:	444f      	add	r7, r9
 80010d0:	46bb      	mov	fp, r7
 80010d2:	4647      	mov	r7, r8
 80010d4:	000b      	movs	r3, r1
 80010d6:	0c3f      	lsrs	r7, r7, #16
 80010d8:	46ba      	mov	sl, r7
 80010da:	4343      	muls	r3, r0
 80010dc:	44da      	add	sl, fp
 80010de:	9302      	str	r3, [sp, #8]
 80010e0:	45d1      	cmp	r9, sl
 80010e2:	d904      	bls.n	80010ee <__aeabi_dmul+0x122>
 80010e4:	2780      	movs	r7, #128	; 0x80
 80010e6:	027f      	lsls	r7, r7, #9
 80010e8:	46b9      	mov	r9, r7
 80010ea:	444b      	add	r3, r9
 80010ec:	9302      	str	r3, [sp, #8]
 80010ee:	4653      	mov	r3, sl
 80010f0:	0c1b      	lsrs	r3, r3, #16
 80010f2:	469b      	mov	fp, r3
 80010f4:	4653      	mov	r3, sl
 80010f6:	041f      	lsls	r7, r3, #16
 80010f8:	4643      	mov	r3, r8
 80010fa:	041b      	lsls	r3, r3, #16
 80010fc:	0c1b      	lsrs	r3, r3, #16
 80010fe:	4698      	mov	r8, r3
 8001100:	003b      	movs	r3, r7
 8001102:	4443      	add	r3, r8
 8001104:	9304      	str	r3, [sp, #16]
 8001106:	0c33      	lsrs	r3, r6, #16
 8001108:	0436      	lsls	r6, r6, #16
 800110a:	0c36      	lsrs	r6, r6, #16
 800110c:	4698      	mov	r8, r3
 800110e:	0033      	movs	r3, r6
 8001110:	4343      	muls	r3, r0
 8001112:	4699      	mov	r9, r3
 8001114:	4643      	mov	r3, r8
 8001116:	4343      	muls	r3, r0
 8001118:	002f      	movs	r7, r5
 800111a:	469a      	mov	sl, r3
 800111c:	4643      	mov	r3, r8
 800111e:	4377      	muls	r7, r6
 8001120:	435d      	muls	r5, r3
 8001122:	0c38      	lsrs	r0, r7, #16
 8001124:	444d      	add	r5, r9
 8001126:	1945      	adds	r5, r0, r5
 8001128:	45a9      	cmp	r9, r5
 800112a:	d903      	bls.n	8001134 <__aeabi_dmul+0x168>
 800112c:	2380      	movs	r3, #128	; 0x80
 800112e:	025b      	lsls	r3, r3, #9
 8001130:	4699      	mov	r9, r3
 8001132:	44ca      	add	sl, r9
 8001134:	043f      	lsls	r7, r7, #16
 8001136:	0c28      	lsrs	r0, r5, #16
 8001138:	0c3f      	lsrs	r7, r7, #16
 800113a:	042d      	lsls	r5, r5, #16
 800113c:	19ed      	adds	r5, r5, r7
 800113e:	0c27      	lsrs	r7, r4, #16
 8001140:	0424      	lsls	r4, r4, #16
 8001142:	0c24      	lsrs	r4, r4, #16
 8001144:	0003      	movs	r3, r0
 8001146:	0020      	movs	r0, r4
 8001148:	4350      	muls	r0, r2
 800114a:	437a      	muls	r2, r7
 800114c:	4691      	mov	r9, r2
 800114e:	003a      	movs	r2, r7
 8001150:	4453      	add	r3, sl
 8001152:	9305      	str	r3, [sp, #20]
 8001154:	0c03      	lsrs	r3, r0, #16
 8001156:	469a      	mov	sl, r3
 8001158:	434a      	muls	r2, r1
 800115a:	4361      	muls	r1, r4
 800115c:	4449      	add	r1, r9
 800115e:	4451      	add	r1, sl
 8001160:	44ab      	add	fp, r5
 8001162:	4589      	cmp	r9, r1
 8001164:	d903      	bls.n	800116e <__aeabi_dmul+0x1a2>
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	025b      	lsls	r3, r3, #9
 800116a:	4699      	mov	r9, r3
 800116c:	444a      	add	r2, r9
 800116e:	0400      	lsls	r0, r0, #16
 8001170:	0c0b      	lsrs	r3, r1, #16
 8001172:	0c00      	lsrs	r0, r0, #16
 8001174:	0409      	lsls	r1, r1, #16
 8001176:	1809      	adds	r1, r1, r0
 8001178:	0020      	movs	r0, r4
 800117a:	4699      	mov	r9, r3
 800117c:	4643      	mov	r3, r8
 800117e:	4370      	muls	r0, r6
 8001180:	435c      	muls	r4, r3
 8001182:	437e      	muls	r6, r7
 8001184:	435f      	muls	r7, r3
 8001186:	0c03      	lsrs	r3, r0, #16
 8001188:	4698      	mov	r8, r3
 800118a:	19a4      	adds	r4, r4, r6
 800118c:	4444      	add	r4, r8
 800118e:	444a      	add	r2, r9
 8001190:	9703      	str	r7, [sp, #12]
 8001192:	42a6      	cmp	r6, r4
 8001194:	d904      	bls.n	80011a0 <__aeabi_dmul+0x1d4>
 8001196:	2380      	movs	r3, #128	; 0x80
 8001198:	025b      	lsls	r3, r3, #9
 800119a:	4698      	mov	r8, r3
 800119c:	4447      	add	r7, r8
 800119e:	9703      	str	r7, [sp, #12]
 80011a0:	0423      	lsls	r3, r4, #16
 80011a2:	9e02      	ldr	r6, [sp, #8]
 80011a4:	469a      	mov	sl, r3
 80011a6:	9b05      	ldr	r3, [sp, #20]
 80011a8:	445e      	add	r6, fp
 80011aa:	4698      	mov	r8, r3
 80011ac:	42ae      	cmp	r6, r5
 80011ae:	41ad      	sbcs	r5, r5
 80011b0:	1876      	adds	r6, r6, r1
 80011b2:	428e      	cmp	r6, r1
 80011b4:	4189      	sbcs	r1, r1
 80011b6:	0400      	lsls	r0, r0, #16
 80011b8:	0c00      	lsrs	r0, r0, #16
 80011ba:	4450      	add	r0, sl
 80011bc:	4440      	add	r0, r8
 80011be:	426d      	negs	r5, r5
 80011c0:	1947      	adds	r7, r0, r5
 80011c2:	46b8      	mov	r8, r7
 80011c4:	4693      	mov	fp, r2
 80011c6:	4249      	negs	r1, r1
 80011c8:	4689      	mov	r9, r1
 80011ca:	44c3      	add	fp, r8
 80011cc:	44d9      	add	r9, fp
 80011ce:	4298      	cmp	r0, r3
 80011d0:	4180      	sbcs	r0, r0
 80011d2:	45a8      	cmp	r8, r5
 80011d4:	41ad      	sbcs	r5, r5
 80011d6:	4593      	cmp	fp, r2
 80011d8:	4192      	sbcs	r2, r2
 80011da:	4589      	cmp	r9, r1
 80011dc:	4189      	sbcs	r1, r1
 80011de:	426d      	negs	r5, r5
 80011e0:	4240      	negs	r0, r0
 80011e2:	4328      	orrs	r0, r5
 80011e4:	0c24      	lsrs	r4, r4, #16
 80011e6:	4252      	negs	r2, r2
 80011e8:	4249      	negs	r1, r1
 80011ea:	430a      	orrs	r2, r1
 80011ec:	9b03      	ldr	r3, [sp, #12]
 80011ee:	1900      	adds	r0, r0, r4
 80011f0:	1880      	adds	r0, r0, r2
 80011f2:	18c7      	adds	r7, r0, r3
 80011f4:	464b      	mov	r3, r9
 80011f6:	0ddc      	lsrs	r4, r3, #23
 80011f8:	9b04      	ldr	r3, [sp, #16]
 80011fa:	0275      	lsls	r5, r6, #9
 80011fc:	431d      	orrs	r5, r3
 80011fe:	1e6a      	subs	r2, r5, #1
 8001200:	4195      	sbcs	r5, r2
 8001202:	464b      	mov	r3, r9
 8001204:	0df6      	lsrs	r6, r6, #23
 8001206:	027f      	lsls	r7, r7, #9
 8001208:	4335      	orrs	r5, r6
 800120a:	025a      	lsls	r2, r3, #9
 800120c:	433c      	orrs	r4, r7
 800120e:	4315      	orrs	r5, r2
 8001210:	01fb      	lsls	r3, r7, #7
 8001212:	d400      	bmi.n	8001216 <__aeabi_dmul+0x24a>
 8001214:	e11c      	b.n	8001450 <__aeabi_dmul+0x484>
 8001216:	2101      	movs	r1, #1
 8001218:	086a      	lsrs	r2, r5, #1
 800121a:	400d      	ands	r5, r1
 800121c:	4315      	orrs	r5, r2
 800121e:	07e2      	lsls	r2, r4, #31
 8001220:	4315      	orrs	r5, r2
 8001222:	0864      	lsrs	r4, r4, #1
 8001224:	494f      	ldr	r1, [pc, #316]	; (8001364 <__aeabi_dmul+0x398>)
 8001226:	4461      	add	r1, ip
 8001228:	2900      	cmp	r1, #0
 800122a:	dc00      	bgt.n	800122e <__aeabi_dmul+0x262>
 800122c:	e0b0      	b.n	8001390 <__aeabi_dmul+0x3c4>
 800122e:	076b      	lsls	r3, r5, #29
 8001230:	d009      	beq.n	8001246 <__aeabi_dmul+0x27a>
 8001232:	220f      	movs	r2, #15
 8001234:	402a      	ands	r2, r5
 8001236:	2a04      	cmp	r2, #4
 8001238:	d005      	beq.n	8001246 <__aeabi_dmul+0x27a>
 800123a:	1d2a      	adds	r2, r5, #4
 800123c:	42aa      	cmp	r2, r5
 800123e:	41ad      	sbcs	r5, r5
 8001240:	426d      	negs	r5, r5
 8001242:	1964      	adds	r4, r4, r5
 8001244:	0015      	movs	r5, r2
 8001246:	01e3      	lsls	r3, r4, #7
 8001248:	d504      	bpl.n	8001254 <__aeabi_dmul+0x288>
 800124a:	2180      	movs	r1, #128	; 0x80
 800124c:	4a46      	ldr	r2, [pc, #280]	; (8001368 <__aeabi_dmul+0x39c>)
 800124e:	00c9      	lsls	r1, r1, #3
 8001250:	4014      	ands	r4, r2
 8001252:	4461      	add	r1, ip
 8001254:	4a45      	ldr	r2, [pc, #276]	; (800136c <__aeabi_dmul+0x3a0>)
 8001256:	4291      	cmp	r1, r2
 8001258:	dd00      	ble.n	800125c <__aeabi_dmul+0x290>
 800125a:	e726      	b.n	80010aa <__aeabi_dmul+0xde>
 800125c:	0762      	lsls	r2, r4, #29
 800125e:	08ed      	lsrs	r5, r5, #3
 8001260:	0264      	lsls	r4, r4, #9
 8001262:	0549      	lsls	r1, r1, #21
 8001264:	4315      	orrs	r5, r2
 8001266:	0b24      	lsrs	r4, r4, #12
 8001268:	0d4a      	lsrs	r2, r1, #21
 800126a:	e710      	b.n	800108e <__aeabi_dmul+0xc2>
 800126c:	4652      	mov	r2, sl
 800126e:	4332      	orrs	r2, r6
 8001270:	d100      	bne.n	8001274 <__aeabi_dmul+0x2a8>
 8001272:	e07f      	b.n	8001374 <__aeabi_dmul+0x3a8>
 8001274:	2e00      	cmp	r6, #0
 8001276:	d100      	bne.n	800127a <__aeabi_dmul+0x2ae>
 8001278:	e0dc      	b.n	8001434 <__aeabi_dmul+0x468>
 800127a:	0030      	movs	r0, r6
 800127c:	f000 f9ca 	bl	8001614 <__clzsi2>
 8001280:	0002      	movs	r2, r0
 8001282:	3a0b      	subs	r2, #11
 8001284:	231d      	movs	r3, #29
 8001286:	0001      	movs	r1, r0
 8001288:	1a9b      	subs	r3, r3, r2
 800128a:	4652      	mov	r2, sl
 800128c:	3908      	subs	r1, #8
 800128e:	40da      	lsrs	r2, r3
 8001290:	408e      	lsls	r6, r1
 8001292:	4316      	orrs	r6, r2
 8001294:	4652      	mov	r2, sl
 8001296:	408a      	lsls	r2, r1
 8001298:	9b00      	ldr	r3, [sp, #0]
 800129a:	4935      	ldr	r1, [pc, #212]	; (8001370 <__aeabi_dmul+0x3a4>)
 800129c:	1a18      	subs	r0, r3, r0
 800129e:	0003      	movs	r3, r0
 80012a0:	468c      	mov	ip, r1
 80012a2:	4463      	add	r3, ip
 80012a4:	2000      	movs	r0, #0
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	e6d3      	b.n	8001052 <__aeabi_dmul+0x86>
 80012aa:	0025      	movs	r5, r4
 80012ac:	4305      	orrs	r5, r0
 80012ae:	d04a      	beq.n	8001346 <__aeabi_dmul+0x37a>
 80012b0:	2c00      	cmp	r4, #0
 80012b2:	d100      	bne.n	80012b6 <__aeabi_dmul+0x2ea>
 80012b4:	e0b0      	b.n	8001418 <__aeabi_dmul+0x44c>
 80012b6:	0020      	movs	r0, r4
 80012b8:	f000 f9ac 	bl	8001614 <__clzsi2>
 80012bc:	0001      	movs	r1, r0
 80012be:	0002      	movs	r2, r0
 80012c0:	390b      	subs	r1, #11
 80012c2:	231d      	movs	r3, #29
 80012c4:	0010      	movs	r0, r2
 80012c6:	1a5b      	subs	r3, r3, r1
 80012c8:	0031      	movs	r1, r6
 80012ca:	0035      	movs	r5, r6
 80012cc:	3808      	subs	r0, #8
 80012ce:	4084      	lsls	r4, r0
 80012d0:	40d9      	lsrs	r1, r3
 80012d2:	4085      	lsls	r5, r0
 80012d4:	430c      	orrs	r4, r1
 80012d6:	4826      	ldr	r0, [pc, #152]	; (8001370 <__aeabi_dmul+0x3a4>)
 80012d8:	1a83      	subs	r3, r0, r2
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2300      	movs	r3, #0
 80012de:	4699      	mov	r9, r3
 80012e0:	469b      	mov	fp, r3
 80012e2:	e697      	b.n	8001014 <__aeabi_dmul+0x48>
 80012e4:	0005      	movs	r5, r0
 80012e6:	4325      	orrs	r5, r4
 80012e8:	d126      	bne.n	8001338 <__aeabi_dmul+0x36c>
 80012ea:	2208      	movs	r2, #8
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2302      	movs	r3, #2
 80012f0:	2400      	movs	r4, #0
 80012f2:	4691      	mov	r9, r2
 80012f4:	469b      	mov	fp, r3
 80012f6:	e68d      	b.n	8001014 <__aeabi_dmul+0x48>
 80012f8:	4652      	mov	r2, sl
 80012fa:	9b00      	ldr	r3, [sp, #0]
 80012fc:	4332      	orrs	r2, r6
 80012fe:	d110      	bne.n	8001322 <__aeabi_dmul+0x356>
 8001300:	4915      	ldr	r1, [pc, #84]	; (8001358 <__aeabi_dmul+0x38c>)
 8001302:	2600      	movs	r6, #0
 8001304:	468c      	mov	ip, r1
 8001306:	4463      	add	r3, ip
 8001308:	4649      	mov	r1, r9
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2302      	movs	r3, #2
 800130e:	4319      	orrs	r1, r3
 8001310:	4689      	mov	r9, r1
 8001312:	2002      	movs	r0, #2
 8001314:	e69d      	b.n	8001052 <__aeabi_dmul+0x86>
 8001316:	465b      	mov	r3, fp
 8001318:	9701      	str	r7, [sp, #4]
 800131a:	2b02      	cmp	r3, #2
 800131c:	d000      	beq.n	8001320 <__aeabi_dmul+0x354>
 800131e:	e6ad      	b.n	800107c <__aeabi_dmul+0xb0>
 8001320:	e6c3      	b.n	80010aa <__aeabi_dmul+0xde>
 8001322:	4a0d      	ldr	r2, [pc, #52]	; (8001358 <__aeabi_dmul+0x38c>)
 8001324:	2003      	movs	r0, #3
 8001326:	4694      	mov	ip, r2
 8001328:	4463      	add	r3, ip
 800132a:	464a      	mov	r2, r9
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	2303      	movs	r3, #3
 8001330:	431a      	orrs	r2, r3
 8001332:	4691      	mov	r9, r2
 8001334:	4652      	mov	r2, sl
 8001336:	e68c      	b.n	8001052 <__aeabi_dmul+0x86>
 8001338:	220c      	movs	r2, #12
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2303      	movs	r3, #3
 800133e:	0005      	movs	r5, r0
 8001340:	4691      	mov	r9, r2
 8001342:	469b      	mov	fp, r3
 8001344:	e666      	b.n	8001014 <__aeabi_dmul+0x48>
 8001346:	2304      	movs	r3, #4
 8001348:	4699      	mov	r9, r3
 800134a:	2300      	movs	r3, #0
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	3301      	adds	r3, #1
 8001350:	2400      	movs	r4, #0
 8001352:	469b      	mov	fp, r3
 8001354:	e65e      	b.n	8001014 <__aeabi_dmul+0x48>
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	000007ff 	.word	0x000007ff
 800135c:	fffffc01 	.word	0xfffffc01
 8001360:	08006d40 	.word	0x08006d40
 8001364:	000003ff 	.word	0x000003ff
 8001368:	feffffff 	.word	0xfeffffff
 800136c:	000007fe 	.word	0x000007fe
 8001370:	fffffc0d 	.word	0xfffffc0d
 8001374:	4649      	mov	r1, r9
 8001376:	2301      	movs	r3, #1
 8001378:	4319      	orrs	r1, r3
 800137a:	4689      	mov	r9, r1
 800137c:	2600      	movs	r6, #0
 800137e:	2001      	movs	r0, #1
 8001380:	e667      	b.n	8001052 <__aeabi_dmul+0x86>
 8001382:	2300      	movs	r3, #0
 8001384:	2480      	movs	r4, #128	; 0x80
 8001386:	2500      	movs	r5, #0
 8001388:	4a43      	ldr	r2, [pc, #268]	; (8001498 <__aeabi_dmul+0x4cc>)
 800138a:	9301      	str	r3, [sp, #4]
 800138c:	0324      	lsls	r4, r4, #12
 800138e:	e67e      	b.n	800108e <__aeabi_dmul+0xc2>
 8001390:	2001      	movs	r0, #1
 8001392:	1a40      	subs	r0, r0, r1
 8001394:	2838      	cmp	r0, #56	; 0x38
 8001396:	dd00      	ble.n	800139a <__aeabi_dmul+0x3ce>
 8001398:	e676      	b.n	8001088 <__aeabi_dmul+0xbc>
 800139a:	281f      	cmp	r0, #31
 800139c:	dd5b      	ble.n	8001456 <__aeabi_dmul+0x48a>
 800139e:	221f      	movs	r2, #31
 80013a0:	0023      	movs	r3, r4
 80013a2:	4252      	negs	r2, r2
 80013a4:	1a51      	subs	r1, r2, r1
 80013a6:	40cb      	lsrs	r3, r1
 80013a8:	0019      	movs	r1, r3
 80013aa:	2820      	cmp	r0, #32
 80013ac:	d003      	beq.n	80013b6 <__aeabi_dmul+0x3ea>
 80013ae:	4a3b      	ldr	r2, [pc, #236]	; (800149c <__aeabi_dmul+0x4d0>)
 80013b0:	4462      	add	r2, ip
 80013b2:	4094      	lsls	r4, r2
 80013b4:	4325      	orrs	r5, r4
 80013b6:	1e6a      	subs	r2, r5, #1
 80013b8:	4195      	sbcs	r5, r2
 80013ba:	002a      	movs	r2, r5
 80013bc:	430a      	orrs	r2, r1
 80013be:	2107      	movs	r1, #7
 80013c0:	000d      	movs	r5, r1
 80013c2:	2400      	movs	r4, #0
 80013c4:	4015      	ands	r5, r2
 80013c6:	4211      	tst	r1, r2
 80013c8:	d05b      	beq.n	8001482 <__aeabi_dmul+0x4b6>
 80013ca:	210f      	movs	r1, #15
 80013cc:	2400      	movs	r4, #0
 80013ce:	4011      	ands	r1, r2
 80013d0:	2904      	cmp	r1, #4
 80013d2:	d053      	beq.n	800147c <__aeabi_dmul+0x4b0>
 80013d4:	1d11      	adds	r1, r2, #4
 80013d6:	4291      	cmp	r1, r2
 80013d8:	4192      	sbcs	r2, r2
 80013da:	4252      	negs	r2, r2
 80013dc:	18a4      	adds	r4, r4, r2
 80013de:	000a      	movs	r2, r1
 80013e0:	0223      	lsls	r3, r4, #8
 80013e2:	d54b      	bpl.n	800147c <__aeabi_dmul+0x4b0>
 80013e4:	2201      	movs	r2, #1
 80013e6:	2400      	movs	r4, #0
 80013e8:	2500      	movs	r5, #0
 80013ea:	e650      	b.n	800108e <__aeabi_dmul+0xc2>
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	031b      	lsls	r3, r3, #12
 80013f0:	421c      	tst	r4, r3
 80013f2:	d009      	beq.n	8001408 <__aeabi_dmul+0x43c>
 80013f4:	421e      	tst	r6, r3
 80013f6:	d107      	bne.n	8001408 <__aeabi_dmul+0x43c>
 80013f8:	4333      	orrs	r3, r6
 80013fa:	031c      	lsls	r4, r3, #12
 80013fc:	4643      	mov	r3, r8
 80013fe:	0015      	movs	r5, r2
 8001400:	0b24      	lsrs	r4, r4, #12
 8001402:	4a25      	ldr	r2, [pc, #148]	; (8001498 <__aeabi_dmul+0x4cc>)
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	e642      	b.n	800108e <__aeabi_dmul+0xc2>
 8001408:	2280      	movs	r2, #128	; 0x80
 800140a:	0312      	lsls	r2, r2, #12
 800140c:	4314      	orrs	r4, r2
 800140e:	0324      	lsls	r4, r4, #12
 8001410:	4a21      	ldr	r2, [pc, #132]	; (8001498 <__aeabi_dmul+0x4cc>)
 8001412:	0b24      	lsrs	r4, r4, #12
 8001414:	9701      	str	r7, [sp, #4]
 8001416:	e63a      	b.n	800108e <__aeabi_dmul+0xc2>
 8001418:	f000 f8fc 	bl	8001614 <__clzsi2>
 800141c:	0001      	movs	r1, r0
 800141e:	0002      	movs	r2, r0
 8001420:	3115      	adds	r1, #21
 8001422:	3220      	adds	r2, #32
 8001424:	291c      	cmp	r1, #28
 8001426:	dc00      	bgt.n	800142a <__aeabi_dmul+0x45e>
 8001428:	e74b      	b.n	80012c2 <__aeabi_dmul+0x2f6>
 800142a:	0034      	movs	r4, r6
 800142c:	3808      	subs	r0, #8
 800142e:	2500      	movs	r5, #0
 8001430:	4084      	lsls	r4, r0
 8001432:	e750      	b.n	80012d6 <__aeabi_dmul+0x30a>
 8001434:	f000 f8ee 	bl	8001614 <__clzsi2>
 8001438:	0003      	movs	r3, r0
 800143a:	001a      	movs	r2, r3
 800143c:	3215      	adds	r2, #21
 800143e:	3020      	adds	r0, #32
 8001440:	2a1c      	cmp	r2, #28
 8001442:	dc00      	bgt.n	8001446 <__aeabi_dmul+0x47a>
 8001444:	e71e      	b.n	8001284 <__aeabi_dmul+0x2b8>
 8001446:	4656      	mov	r6, sl
 8001448:	3b08      	subs	r3, #8
 800144a:	2200      	movs	r2, #0
 800144c:	409e      	lsls	r6, r3
 800144e:	e723      	b.n	8001298 <__aeabi_dmul+0x2cc>
 8001450:	9b00      	ldr	r3, [sp, #0]
 8001452:	469c      	mov	ip, r3
 8001454:	e6e6      	b.n	8001224 <__aeabi_dmul+0x258>
 8001456:	4912      	ldr	r1, [pc, #72]	; (80014a0 <__aeabi_dmul+0x4d4>)
 8001458:	0022      	movs	r2, r4
 800145a:	4461      	add	r1, ip
 800145c:	002e      	movs	r6, r5
 800145e:	408d      	lsls	r5, r1
 8001460:	408a      	lsls	r2, r1
 8001462:	40c6      	lsrs	r6, r0
 8001464:	1e69      	subs	r1, r5, #1
 8001466:	418d      	sbcs	r5, r1
 8001468:	4332      	orrs	r2, r6
 800146a:	432a      	orrs	r2, r5
 800146c:	40c4      	lsrs	r4, r0
 800146e:	0753      	lsls	r3, r2, #29
 8001470:	d0b6      	beq.n	80013e0 <__aeabi_dmul+0x414>
 8001472:	210f      	movs	r1, #15
 8001474:	4011      	ands	r1, r2
 8001476:	2904      	cmp	r1, #4
 8001478:	d1ac      	bne.n	80013d4 <__aeabi_dmul+0x408>
 800147a:	e7b1      	b.n	80013e0 <__aeabi_dmul+0x414>
 800147c:	0765      	lsls	r5, r4, #29
 800147e:	0264      	lsls	r4, r4, #9
 8001480:	0b24      	lsrs	r4, r4, #12
 8001482:	08d2      	lsrs	r2, r2, #3
 8001484:	4315      	orrs	r5, r2
 8001486:	2200      	movs	r2, #0
 8001488:	e601      	b.n	800108e <__aeabi_dmul+0xc2>
 800148a:	2280      	movs	r2, #128	; 0x80
 800148c:	0312      	lsls	r2, r2, #12
 800148e:	4314      	orrs	r4, r2
 8001490:	0324      	lsls	r4, r4, #12
 8001492:	4a01      	ldr	r2, [pc, #4]	; (8001498 <__aeabi_dmul+0x4cc>)
 8001494:	0b24      	lsrs	r4, r4, #12
 8001496:	e5fa      	b.n	800108e <__aeabi_dmul+0xc2>
 8001498:	000007ff 	.word	0x000007ff
 800149c:	0000043e 	.word	0x0000043e
 80014a0:	0000041e 	.word	0x0000041e

080014a4 <__aeabi_i2d>:
 80014a4:	b570      	push	{r4, r5, r6, lr}
 80014a6:	2800      	cmp	r0, #0
 80014a8:	d016      	beq.n	80014d8 <__aeabi_i2d+0x34>
 80014aa:	17c3      	asrs	r3, r0, #31
 80014ac:	18c5      	adds	r5, r0, r3
 80014ae:	405d      	eors	r5, r3
 80014b0:	0fc4      	lsrs	r4, r0, #31
 80014b2:	0028      	movs	r0, r5
 80014b4:	f000 f8ae 	bl	8001614 <__clzsi2>
 80014b8:	4a11      	ldr	r2, [pc, #68]	; (8001500 <__aeabi_i2d+0x5c>)
 80014ba:	1a12      	subs	r2, r2, r0
 80014bc:	280a      	cmp	r0, #10
 80014be:	dc16      	bgt.n	80014ee <__aeabi_i2d+0x4a>
 80014c0:	0003      	movs	r3, r0
 80014c2:	002e      	movs	r6, r5
 80014c4:	3315      	adds	r3, #21
 80014c6:	409e      	lsls	r6, r3
 80014c8:	230b      	movs	r3, #11
 80014ca:	1a18      	subs	r0, r3, r0
 80014cc:	40c5      	lsrs	r5, r0
 80014ce:	0552      	lsls	r2, r2, #21
 80014d0:	032d      	lsls	r5, r5, #12
 80014d2:	0b2d      	lsrs	r5, r5, #12
 80014d4:	0d53      	lsrs	r3, r2, #21
 80014d6:	e003      	b.n	80014e0 <__aeabi_i2d+0x3c>
 80014d8:	2400      	movs	r4, #0
 80014da:	2300      	movs	r3, #0
 80014dc:	2500      	movs	r5, #0
 80014de:	2600      	movs	r6, #0
 80014e0:	051b      	lsls	r3, r3, #20
 80014e2:	432b      	orrs	r3, r5
 80014e4:	07e4      	lsls	r4, r4, #31
 80014e6:	4323      	orrs	r3, r4
 80014e8:	0030      	movs	r0, r6
 80014ea:	0019      	movs	r1, r3
 80014ec:	bd70      	pop	{r4, r5, r6, pc}
 80014ee:	380b      	subs	r0, #11
 80014f0:	4085      	lsls	r5, r0
 80014f2:	0552      	lsls	r2, r2, #21
 80014f4:	032d      	lsls	r5, r5, #12
 80014f6:	2600      	movs	r6, #0
 80014f8:	0b2d      	lsrs	r5, r5, #12
 80014fa:	0d53      	lsrs	r3, r2, #21
 80014fc:	e7f0      	b.n	80014e0 <__aeabi_i2d+0x3c>
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	0000041e 	.word	0x0000041e

08001504 <__aeabi_d2f>:
 8001504:	0002      	movs	r2, r0
 8001506:	004b      	lsls	r3, r1, #1
 8001508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150a:	0d5b      	lsrs	r3, r3, #21
 800150c:	030c      	lsls	r4, r1, #12
 800150e:	4e3d      	ldr	r6, [pc, #244]	; (8001604 <__aeabi_d2f+0x100>)
 8001510:	0a64      	lsrs	r4, r4, #9
 8001512:	0f40      	lsrs	r0, r0, #29
 8001514:	1c5f      	adds	r7, r3, #1
 8001516:	0fc9      	lsrs	r1, r1, #31
 8001518:	4304      	orrs	r4, r0
 800151a:	00d5      	lsls	r5, r2, #3
 800151c:	4237      	tst	r7, r6
 800151e:	d00a      	beq.n	8001536 <__aeabi_d2f+0x32>
 8001520:	4839      	ldr	r0, [pc, #228]	; (8001608 <__aeabi_d2f+0x104>)
 8001522:	181e      	adds	r6, r3, r0
 8001524:	2efe      	cmp	r6, #254	; 0xfe
 8001526:	dd16      	ble.n	8001556 <__aeabi_d2f+0x52>
 8001528:	20ff      	movs	r0, #255	; 0xff
 800152a:	2400      	movs	r4, #0
 800152c:	05c0      	lsls	r0, r0, #23
 800152e:	4320      	orrs	r0, r4
 8001530:	07c9      	lsls	r1, r1, #31
 8001532:	4308      	orrs	r0, r1
 8001534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001536:	2b00      	cmp	r3, #0
 8001538:	d106      	bne.n	8001548 <__aeabi_d2f+0x44>
 800153a:	432c      	orrs	r4, r5
 800153c:	d026      	beq.n	800158c <__aeabi_d2f+0x88>
 800153e:	2205      	movs	r2, #5
 8001540:	0192      	lsls	r2, r2, #6
 8001542:	0a54      	lsrs	r4, r2, #9
 8001544:	b2d8      	uxtb	r0, r3
 8001546:	e7f1      	b.n	800152c <__aeabi_d2f+0x28>
 8001548:	4325      	orrs	r5, r4
 800154a:	d0ed      	beq.n	8001528 <__aeabi_d2f+0x24>
 800154c:	2080      	movs	r0, #128	; 0x80
 800154e:	03c0      	lsls	r0, r0, #15
 8001550:	4304      	orrs	r4, r0
 8001552:	20ff      	movs	r0, #255	; 0xff
 8001554:	e7ea      	b.n	800152c <__aeabi_d2f+0x28>
 8001556:	2e00      	cmp	r6, #0
 8001558:	dd1b      	ble.n	8001592 <__aeabi_d2f+0x8e>
 800155a:	0192      	lsls	r2, r2, #6
 800155c:	1e53      	subs	r3, r2, #1
 800155e:	419a      	sbcs	r2, r3
 8001560:	00e4      	lsls	r4, r4, #3
 8001562:	0f6d      	lsrs	r5, r5, #29
 8001564:	4322      	orrs	r2, r4
 8001566:	432a      	orrs	r2, r5
 8001568:	0753      	lsls	r3, r2, #29
 800156a:	d048      	beq.n	80015fe <__aeabi_d2f+0xfa>
 800156c:	230f      	movs	r3, #15
 800156e:	4013      	ands	r3, r2
 8001570:	2b04      	cmp	r3, #4
 8001572:	d000      	beq.n	8001576 <__aeabi_d2f+0x72>
 8001574:	3204      	adds	r2, #4
 8001576:	2380      	movs	r3, #128	; 0x80
 8001578:	04db      	lsls	r3, r3, #19
 800157a:	4013      	ands	r3, r2
 800157c:	d03f      	beq.n	80015fe <__aeabi_d2f+0xfa>
 800157e:	1c70      	adds	r0, r6, #1
 8001580:	2efe      	cmp	r6, #254	; 0xfe
 8001582:	d0d1      	beq.n	8001528 <__aeabi_d2f+0x24>
 8001584:	0192      	lsls	r2, r2, #6
 8001586:	0a54      	lsrs	r4, r2, #9
 8001588:	b2c0      	uxtb	r0, r0
 800158a:	e7cf      	b.n	800152c <__aeabi_d2f+0x28>
 800158c:	2000      	movs	r0, #0
 800158e:	2400      	movs	r4, #0
 8001590:	e7cc      	b.n	800152c <__aeabi_d2f+0x28>
 8001592:	0032      	movs	r2, r6
 8001594:	3217      	adds	r2, #23
 8001596:	db22      	blt.n	80015de <__aeabi_d2f+0xda>
 8001598:	2080      	movs	r0, #128	; 0x80
 800159a:	0400      	lsls	r0, r0, #16
 800159c:	4320      	orrs	r0, r4
 800159e:	241e      	movs	r4, #30
 80015a0:	1ba4      	subs	r4, r4, r6
 80015a2:	2c1f      	cmp	r4, #31
 80015a4:	dd1d      	ble.n	80015e2 <__aeabi_d2f+0xde>
 80015a6:	2202      	movs	r2, #2
 80015a8:	4252      	negs	r2, r2
 80015aa:	1b96      	subs	r6, r2, r6
 80015ac:	0002      	movs	r2, r0
 80015ae:	40f2      	lsrs	r2, r6
 80015b0:	0016      	movs	r6, r2
 80015b2:	2c20      	cmp	r4, #32
 80015b4:	d004      	beq.n	80015c0 <__aeabi_d2f+0xbc>
 80015b6:	4a15      	ldr	r2, [pc, #84]	; (800160c <__aeabi_d2f+0x108>)
 80015b8:	4694      	mov	ip, r2
 80015ba:	4463      	add	r3, ip
 80015bc:	4098      	lsls	r0, r3
 80015be:	4305      	orrs	r5, r0
 80015c0:	002a      	movs	r2, r5
 80015c2:	1e53      	subs	r3, r2, #1
 80015c4:	419a      	sbcs	r2, r3
 80015c6:	4332      	orrs	r2, r6
 80015c8:	2600      	movs	r6, #0
 80015ca:	0753      	lsls	r3, r2, #29
 80015cc:	d1ce      	bne.n	800156c <__aeabi_d2f+0x68>
 80015ce:	2480      	movs	r4, #128	; 0x80
 80015d0:	0013      	movs	r3, r2
 80015d2:	04e4      	lsls	r4, r4, #19
 80015d4:	2001      	movs	r0, #1
 80015d6:	4023      	ands	r3, r4
 80015d8:	4222      	tst	r2, r4
 80015da:	d1d3      	bne.n	8001584 <__aeabi_d2f+0x80>
 80015dc:	e7b0      	b.n	8001540 <__aeabi_d2f+0x3c>
 80015de:	2300      	movs	r3, #0
 80015e0:	e7ad      	b.n	800153e <__aeabi_d2f+0x3a>
 80015e2:	4a0b      	ldr	r2, [pc, #44]	; (8001610 <__aeabi_d2f+0x10c>)
 80015e4:	4694      	mov	ip, r2
 80015e6:	002a      	movs	r2, r5
 80015e8:	40e2      	lsrs	r2, r4
 80015ea:	0014      	movs	r4, r2
 80015ec:	002a      	movs	r2, r5
 80015ee:	4463      	add	r3, ip
 80015f0:	409a      	lsls	r2, r3
 80015f2:	4098      	lsls	r0, r3
 80015f4:	1e55      	subs	r5, r2, #1
 80015f6:	41aa      	sbcs	r2, r5
 80015f8:	4302      	orrs	r2, r0
 80015fa:	4322      	orrs	r2, r4
 80015fc:	e7e4      	b.n	80015c8 <__aeabi_d2f+0xc4>
 80015fe:	0033      	movs	r3, r6
 8001600:	e79e      	b.n	8001540 <__aeabi_d2f+0x3c>
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	000007fe 	.word	0x000007fe
 8001608:	fffffc80 	.word	0xfffffc80
 800160c:	fffffca2 	.word	0xfffffca2
 8001610:	fffffc82 	.word	0xfffffc82

08001614 <__clzsi2>:
 8001614:	211c      	movs	r1, #28
 8001616:	2301      	movs	r3, #1
 8001618:	041b      	lsls	r3, r3, #16
 800161a:	4298      	cmp	r0, r3
 800161c:	d301      	bcc.n	8001622 <__clzsi2+0xe>
 800161e:	0c00      	lsrs	r0, r0, #16
 8001620:	3910      	subs	r1, #16
 8001622:	0a1b      	lsrs	r3, r3, #8
 8001624:	4298      	cmp	r0, r3
 8001626:	d301      	bcc.n	800162c <__clzsi2+0x18>
 8001628:	0a00      	lsrs	r0, r0, #8
 800162a:	3908      	subs	r1, #8
 800162c:	091b      	lsrs	r3, r3, #4
 800162e:	4298      	cmp	r0, r3
 8001630:	d301      	bcc.n	8001636 <__clzsi2+0x22>
 8001632:	0900      	lsrs	r0, r0, #4
 8001634:	3904      	subs	r1, #4
 8001636:	a202      	add	r2, pc, #8	; (adr r2, 8001640 <__clzsi2+0x2c>)
 8001638:	5c10      	ldrb	r0, [r2, r0]
 800163a:	1840      	adds	r0, r0, r1
 800163c:	4770      	bx	lr
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	02020304 	.word	0x02020304
 8001644:	01010101 	.word	0x01010101
	...

08001650 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4a06      	ldr	r2, [pc, #24]	; (8001678 <vApplicationGetIdleTaskMemory+0x28>)
 8001660:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	4a05      	ldr	r2, [pc, #20]	; (800167c <vApplicationGetIdleTaskMemory+0x2c>)
 8001666:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2280      	movs	r2, #128	; 0x80
 800166c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800166e:	46c0      	nop			; (mov r8, r8)
 8001670:	46bd      	mov	sp, r7
 8001672:	b004      	add	sp, #16
 8001674:	bd80      	pop	{r7, pc}
 8001676:	46c0      	nop			; (mov r8, r8)
 8001678:	200000a0 	.word	0x200000a0
 800167c:	200000f4 	.word	0x200000f4

08001680 <TransUart2>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void TransUart2(uint8_t t[])
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	for(int i =0;i<100;i++)
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	e011      	b.n	80016b2 <TransUart2+0x32>
	{
		if(t[i] == NULL) break;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	18d3      	adds	r3, r2, r3
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00f      	beq.n	80016ba <TransUart2+0x3a>
		else HAL_UART_Transmit(&huart2,&t[i],1,500);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	18d1      	adds	r1, r2, r3
 80016a0:	23fa      	movs	r3, #250	; 0xfa
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	4807      	ldr	r0, [pc, #28]	; (80016c4 <TransUart2+0x44>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	f003 f8a6 	bl	80047f8 <HAL_UART_Transmit>
	for(int i =0;i<100;i++)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	3301      	adds	r3, #1
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2b63      	cmp	r3, #99	; 0x63
 80016b6:	ddea      	ble.n	800168e <TransUart2+0xe>
	}
}
 80016b8:	e000      	b.n	80016bc <TransUart2+0x3c>
		if(t[i] == NULL) break;
 80016ba:	46c0      	nop			; (mov r8, r8)
}
 80016bc:	46c0      	nop			; (mov r8, r8)
 80016be:	46bd      	mov	sp, r7
 80016c0:	b004      	add	sp, #16
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	2000033c 	.word	0x2000033c

080016c8 <tien>:
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1, 1);
	HAL_GPIO_WritePin(GPIOF,GPIO_PIN_4, 1);
	HAL_GPIO_WritePin(GPIOF,GPIO_PIN_5, 1);
}
void tien()
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0, 0);
 80016cc:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <tien+0x70>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	2101      	movs	r1, #1
 80016d2:	0018      	movs	r0, r3
 80016d4:	f001 fb0e 	bl	8002cf4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1, 1);
 80016d8:	4b17      	ldr	r3, [pc, #92]	; (8001738 <tien+0x70>)
 80016da:	2201      	movs	r2, #1
 80016dc:	2102      	movs	r1, #2
 80016de:	0018      	movs	r0, r3
 80016e0:	f001 fb08 	bl	8002cf4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2, 1);
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <tien+0x70>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	2104      	movs	r1, #4
 80016ea:	0018      	movs	r0, r3
 80016ec:	f001 fb02 	bl	8002cf4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3, 0);
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <tien+0x70>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	2108      	movs	r1, #8
 80016f6:	0018      	movs	r0, r3
 80016f8:	f001 fafc 	bl	8002cf4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0, 0);
 80016fc:	2390      	movs	r3, #144	; 0x90
 80016fe:	05db      	lsls	r3, r3, #23
 8001700:	2200      	movs	r2, #0
 8001702:	2101      	movs	r1, #1
 8001704:	0018      	movs	r0, r3
 8001706:	f001 faf5 	bl	8002cf4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1, 1);
 800170a:	2390      	movs	r3, #144	; 0x90
 800170c:	05db      	lsls	r3, r3, #23
 800170e:	2201      	movs	r2, #1
 8001710:	2102      	movs	r1, #2
 8001712:	0018      	movs	r0, r3
 8001714:	f001 faee 	bl	8002cf4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF,GPIO_PIN_4, 0);
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <tien+0x74>)
 800171a:	2200      	movs	r2, #0
 800171c:	2110      	movs	r1, #16
 800171e:	0018      	movs	r0, r3
 8001720:	f001 fae8 	bl	8002cf4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF,GPIO_PIN_5, 1);
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <tien+0x74>)
 8001726:	2201      	movs	r2, #1
 8001728:	2120      	movs	r1, #32
 800172a:	0018      	movs	r0, r3
 800172c:	f001 fae2 	bl	8002cf4 <HAL_GPIO_WritePin>
}
 8001730:	46c0      	nop			; (mov r8, r8)
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	48000800 	.word	0x48000800
 800173c:	48001400 	.word	0x48001400

08001740 <HAL_GPIO_EXTI_Callback>:
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1, 0);
	HAL_GPIO_WritePin(GPIOF,GPIO_PIN_4, 0);
	HAL_GPIO_WritePin(GPIOF,GPIO_PIN_5, 1);
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	0002      	movs	r2, r0
 8001748:	1dbb      	adds	r3, r7, #6
 800174a:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == GPIO_PIN_4)
 800174c:	1dbb      	adds	r3, r7, #6
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	2b10      	cmp	r3, #16
 8001752:	d104      	bne.n	800175e <HAL_GPIO_EXTI_Callback+0x1e>
	{
		count_EXTI4++;
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <HAL_GPIO_EXTI_Callback+0x5c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	1c5a      	adds	r2, r3, #1
 800175a:	4b10      	ldr	r3, [pc, #64]	; (800179c <HAL_GPIO_EXTI_Callback+0x5c>)
 800175c:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_5)
 800175e:	1dbb      	adds	r3, r7, #6
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	2b20      	cmp	r3, #32
 8001764:	d104      	bne.n	8001770 <HAL_GPIO_EXTI_Callback+0x30>
	{
		count_EXTI5++;
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <HAL_GPIO_EXTI_Callback+0x60>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <HAL_GPIO_EXTI_Callback+0x60>)
 800176e:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_6)
 8001770:	1dbb      	adds	r3, r7, #6
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	2b40      	cmp	r3, #64	; 0x40
 8001776:	d104      	bne.n	8001782 <HAL_GPIO_EXTI_Callback+0x42>
	{
		count_EXTI6++;
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_GPIO_EXTI_Callback+0x64>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	1c5a      	adds	r2, r3, #1
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <HAL_GPIO_EXTI_Callback+0x64>)
 8001780:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_7)
 8001782:	1dbb      	adds	r3, r7, #6
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	2b80      	cmp	r3, #128	; 0x80
 8001788:	d104      	bne.n	8001794 <HAL_GPIO_EXTI_Callback+0x54>
	{
		count_EXTI7++;
 800178a:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <HAL_GPIO_EXTI_Callback+0x68>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <HAL_GPIO_EXTI_Callback+0x68>)
 8001792:	601a      	str	r2, [r3, #0]
	}
}
 8001794:	46c0      	nop			; (mov r8, r8)
 8001796:	46bd      	mov	sp, r7
 8001798:	b002      	add	sp, #8
 800179a:	bd80      	pop	{r7, pc}
 800179c:	200003d4 	.word	0x200003d4
 80017a0:	200003d8 	.word	0x200003d8
 80017a4:	200003dc 	.word	0x200003dc
 80017a8:	200003e0 	.word	0x200003e0

080017ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017ac:	b5b0      	push	{r4, r5, r7, lr}
 80017ae:	b0a0      	sub	sp, #128	; 0x80
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017b2:	f001 f82d 	bl	8002810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017b6:	f000 f8cb 	bl	8001950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ba:	f000 fa17 	bl	8001bec <MX_GPIO_Init>
  MX_TIM1_Init();
 80017be:	f000 f90f 	bl	80019e0 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80017c2:	f000 f9e3 	bl	8001b8c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80017c6:	4b53      	ldr	r3, [pc, #332]	; (8001914 <main+0x168>)
 80017c8:	2100      	movs	r1, #0
 80017ca:	0018      	movs	r0, r3
 80017cc:	f002 f848 	bl	8003860 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80017d0:	4b50      	ldr	r3, [pc, #320]	; (8001914 <main+0x168>)
 80017d2:	2104      	movs	r1, #4
 80017d4:	0018      	movs	r0, r3
 80017d6:	f002 f843 	bl	8003860 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80017da:	4b4e      	ldr	r3, [pc, #312]	; (8001914 <main+0x168>)
 80017dc:	2108      	movs	r1, #8
 80017de:	0018      	movs	r0, r3
 80017e0:	f002 f83e 	bl	8003860 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80017e4:	4b4b      	ldr	r3, [pc, #300]	; (8001914 <main+0x168>)
 80017e6:	210c      	movs	r1, #12
 80017e8:	0018      	movs	r0, r3
 80017ea:	f002 f839 	bl	8003860 <HAL_TIM_PWM_Start>
  //HAL_TIM_Base_Start(&htim1);
  //HAL_TIM_Base_Start(&htim3);
  TransUart2("Start \n");
 80017ee:	4b4a      	ldr	r3, [pc, #296]	; (8001918 <main+0x16c>)
 80017f0:	0018      	movs	r0, r3
 80017f2:	f7ff ff45 	bl	8001680 <TransUart2>
  TransUart2("Nhap toc do 100 - 900 RPM: ");
 80017f6:	4b49      	ldr	r3, [pc, #292]	; (800191c <main+0x170>)
 80017f8:	0018      	movs	r0, r3
 80017fa:	f7ff ff41 	bl	8001680 <TransUart2>
  int flag = 1;
 80017fe:	2301      	movs	r3, #1
 8001800:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint8_t c[4];
  while(flag)
 8001802:	e02c      	b.n	800185e <main+0xb2>
  {
	  HAL_UART_Receive(&huart2,c,3,500);
 8001804:	23fa      	movs	r3, #250	; 0xfa
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	2474      	movs	r4, #116	; 0x74
 800180a:	1939      	adds	r1, r7, r4
 800180c:	4844      	ldr	r0, [pc, #272]	; (8001920 <main+0x174>)
 800180e:	2203      	movs	r2, #3
 8001810:	f003 f892 	bl	8004938 <HAL_UART_Receive>
	  c[3]= '\0';
 8001814:	0021      	movs	r1, r4
 8001816:	187b      	adds	r3, r7, r1
 8001818:	2200      	movs	r2, #0
 800181a:	70da      	strb	r2, [r3, #3]
	  int number = atoi((char*)c); // Chuyển chuỗi thành số nguyên
 800181c:	187b      	adds	r3, r7, r1
 800181e:	0018      	movs	r0, r3
 8001820:	f004 fcac 	bl	800617c <atoi>
 8001824:	0003      	movs	r3, r0
 8001826:	67bb      	str	r3, [r7, #120]	; 0x78
	  setpoint = number;
 8001828:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800182a:	f7ff fb81 	bl	8000f30 <__aeabi_i2f>
 800182e:	1c02      	adds	r2, r0, #0
 8001830:	4b3c      	ldr	r3, [pc, #240]	; (8001924 <main+0x178>)
 8001832:	601a      	str	r2, [r3, #0]
	  if(setpoint >= 50 && setpoint <= 900)
 8001834:	4b3b      	ldr	r3, [pc, #236]	; (8001924 <main+0x178>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	493b      	ldr	r1, [pc, #236]	; (8001928 <main+0x17c>)
 800183a:	1c18      	adds	r0, r3, #0
 800183c:	f7fe fe14 	bl	8000468 <__aeabi_fcmpge>
 8001840:	1e03      	subs	r3, r0, #0
 8001842:	d100      	bne.n	8001846 <main+0x9a>
 8001844:	e00b      	b.n	800185e <main+0xb2>
 8001846:	4b37      	ldr	r3, [pc, #220]	; (8001924 <main+0x178>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4938      	ldr	r1, [pc, #224]	; (800192c <main+0x180>)
 800184c:	1c18      	adds	r0, r3, #0
 800184e:	f7fe fdf7 	bl	8000440 <__aeabi_fcmple>
 8001852:	1e03      	subs	r3, r0, #0
 8001854:	d100      	bne.n	8001858 <main+0xac>
 8001856:	e002      	b.n	800185e <main+0xb2>
	  {
		  flag = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	67fb      	str	r3, [r7, #124]	; 0x7c
		  break;
 800185c:	e002      	b.n	8001864 <main+0xb8>
  while(flag)
 800185e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1cf      	bne.n	8001804 <main+0x58>
	  }
  }
  tien();
 8001864:	f7ff ff30 	bl	80016c8 <tien>
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,20);
 8001868:	4b2a      	ldr	r3, [pc, #168]	; (8001914 <main+0x168>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2214      	movs	r2, #20
 800186e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,20);
 8001870:	4b28      	ldr	r3, [pc, #160]	; (8001914 <main+0x168>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2214      	movs	r2, #20
 8001876:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,20);
 8001878:	4b26      	ldr	r3, [pc, #152]	; (8001914 <main+0x168>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2214      	movs	r2, #20
 800187e:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,20);
 8001880:	4b24      	ldr	r3, [pc, #144]	; (8001914 <main+0x168>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2214      	movs	r2, #20
 8001886:	641a      	str	r2, [r3, #64]	; 0x40
  /* Create the thread(s) */
  /* definition and creation of defaultTask */


  /* definition and creation of task1 */
  osThreadDef(task1, task1_function, 1, 0, 128);
 8001888:	2158      	movs	r1, #88	; 0x58
 800188a:	187b      	adds	r3, r7, r1
 800188c:	4a28      	ldr	r2, [pc, #160]	; (8001930 <main+0x184>)
 800188e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001890:	c331      	stmia	r3!, {r0, r4, r5}
 8001892:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001894:	c331      	stmia	r3!, {r0, r4, r5}
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	601a      	str	r2, [r3, #0]
  task1Handle = osThreadCreate(osThread(task1), NULL);
 800189a:	187b      	adds	r3, r7, r1
 800189c:	2100      	movs	r1, #0
 800189e:	0018      	movs	r0, r3
 80018a0:	f003 fca9 	bl	80051f6 <osThreadCreate>
 80018a4:	0002      	movs	r2, r0
 80018a6:	4b23      	ldr	r3, [pc, #140]	; (8001934 <main+0x188>)
 80018a8:	601a      	str	r2, [r3, #0]

  /* definition and creation of task2 */
  osThreadDef(task2, task2_function,1, 0, 128);
 80018aa:	213c      	movs	r1, #60	; 0x3c
 80018ac:	187b      	adds	r3, r7, r1
 80018ae:	4a22      	ldr	r2, [pc, #136]	; (8001938 <main+0x18c>)
 80018b0:	ca31      	ldmia	r2!, {r0, r4, r5}
 80018b2:	c331      	stmia	r3!, {r0, r4, r5}
 80018b4:	ca31      	ldmia	r2!, {r0, r4, r5}
 80018b6:	c331      	stmia	r3!, {r0, r4, r5}
 80018b8:	6812      	ldr	r2, [r2, #0]
 80018ba:	601a      	str	r2, [r3, #0]
  task2Handle = osThreadCreate(osThread(task2), NULL);
 80018bc:	187b      	adds	r3, r7, r1
 80018be:	2100      	movs	r1, #0
 80018c0:	0018      	movs	r0, r3
 80018c2:	f003 fc98 	bl	80051f6 <osThreadCreate>
 80018c6:	0002      	movs	r2, r0
 80018c8:	4b1c      	ldr	r3, [pc, #112]	; (800193c <main+0x190>)
 80018ca:	601a      	str	r2, [r3, #0]

  /* definition and creation of task3 */
  osThreadDef(task3, task3_function, 1, 0, 128);
 80018cc:	2120      	movs	r1, #32
 80018ce:	187b      	adds	r3, r7, r1
 80018d0:	4a1b      	ldr	r2, [pc, #108]	; (8001940 <main+0x194>)
 80018d2:	ca31      	ldmia	r2!, {r0, r4, r5}
 80018d4:	c331      	stmia	r3!, {r0, r4, r5}
 80018d6:	ca31      	ldmia	r2!, {r0, r4, r5}
 80018d8:	c331      	stmia	r3!, {r0, r4, r5}
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	601a      	str	r2, [r3, #0]
  task3Handle = osThreadCreate(osThread(task3), NULL);
 80018de:	187b      	adds	r3, r7, r1
 80018e0:	2100      	movs	r1, #0
 80018e2:	0018      	movs	r0, r3
 80018e4:	f003 fc87 	bl	80051f6 <osThreadCreate>
 80018e8:	0002      	movs	r2, r0
 80018ea:	4b16      	ldr	r3, [pc, #88]	; (8001944 <main+0x198>)
 80018ec:	601a      	str	r2, [r3, #0]

  /* definition and creation of task4 */
  osThreadDef(task4, task4_function, 1, 0, 128);
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	4a15      	ldr	r2, [pc, #84]	; (8001948 <main+0x19c>)
 80018f2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018f4:	c313      	stmia	r3!, {r0, r1, r4}
 80018f6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018f8:	c313      	stmia	r3!, {r0, r1, r4}
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	601a      	str	r2, [r3, #0]
  task4Handle = osThreadCreate(osThread(task4), NULL);
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	2100      	movs	r1, #0
 8001902:	0018      	movs	r0, r3
 8001904:	f003 fc77 	bl	80051f6 <osThreadCreate>
 8001908:	0002      	movs	r2, r0
 800190a:	4b10      	ldr	r3, [pc, #64]	; (800194c <main+0x1a0>)
 800190c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800190e:	f003 fc6a 	bl	80051e6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001912:	e7fe      	b.n	8001912 <main+0x166>
 8001914:	200002f4 	.word	0x200002f4
 8001918:	08006c2c 	.word	0x08006c2c
 800191c:	08006c34 	.word	0x08006c34
 8001920:	2000033c 	.word	0x2000033c
 8001924:	2000000c 	.word	0x2000000c
 8001928:	42480000 	.word	0x42480000
 800192c:	44610000 	.word	0x44610000
 8001930:	08006c50 	.word	0x08006c50
 8001934:	200003c4 	.word	0x200003c4
 8001938:	08006c6c 	.word	0x08006c6c
 800193c:	200003c8 	.word	0x200003c8
 8001940:	08006c88 	.word	0x08006c88
 8001944:	200003cc 	.word	0x200003cc
 8001948:	08006ca4 	.word	0x08006ca4
 800194c:	200003d0 	.word	0x200003d0

08001950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b091      	sub	sp, #68	; 0x44
 8001954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001956:	2410      	movs	r4, #16
 8001958:	193b      	adds	r3, r7, r4
 800195a:	0018      	movs	r0, r3
 800195c:	2330      	movs	r3, #48	; 0x30
 800195e:	001a      	movs	r2, r3
 8001960:	2100      	movs	r1, #0
 8001962:	f004 fc44 	bl	80061ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001966:	003b      	movs	r3, r7
 8001968:	0018      	movs	r0, r3
 800196a:	2310      	movs	r3, #16
 800196c:	001a      	movs	r2, r3
 800196e:	2100      	movs	r1, #0
 8001970:	f004 fc3d 	bl	80061ee <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001974:	0021      	movs	r1, r4
 8001976:	187b      	adds	r3, r7, r1
 8001978:	2201      	movs	r2, #1
 800197a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800197c:	187b      	adds	r3, r7, r1
 800197e:	2201      	movs	r2, #1
 8001980:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001982:	187b      	adds	r3, r7, r1
 8001984:	2202      	movs	r2, #2
 8001986:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001988:	187b      	adds	r3, r7, r1
 800198a:	2280      	movs	r2, #128	; 0x80
 800198c:	0252      	lsls	r2, r2, #9
 800198e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001990:	187b      	adds	r3, r7, r1
 8001992:	2280      	movs	r2, #128	; 0x80
 8001994:	0352      	lsls	r2, r2, #13
 8001996:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001998:	187b      	adds	r3, r7, r1
 800199a:	2200      	movs	r2, #0
 800199c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800199e:	187b      	adds	r3, r7, r1
 80019a0:	0018      	movs	r0, r3
 80019a2:	f001 f9e1 	bl	8002d68 <HAL_RCC_OscConfig>
 80019a6:	1e03      	subs	r3, r0, #0
 80019a8:	d001      	beq.n	80019ae <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80019aa:	f000 fd45 	bl	8002438 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ae:	003b      	movs	r3, r7
 80019b0:	2207      	movs	r2, #7
 80019b2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019b4:	003b      	movs	r3, r7
 80019b6:	2202      	movs	r2, #2
 80019b8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ba:	003b      	movs	r3, r7
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019c0:	003b      	movs	r3, r7
 80019c2:	2200      	movs	r2, #0
 80019c4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80019c6:	003b      	movs	r3, r7
 80019c8:	2101      	movs	r1, #1
 80019ca:	0018      	movs	r0, r3
 80019cc:	f001 fce6 	bl	800339c <HAL_RCC_ClockConfig>
 80019d0:	1e03      	subs	r3, r0, #0
 80019d2:	d001      	beq.n	80019d8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80019d4:	f000 fd30 	bl	8002438 <Error_Handler>
  }
}
 80019d8:	46c0      	nop			; (mov r8, r8)
 80019da:	46bd      	mov	sp, r7
 80019dc:	b011      	add	sp, #68	; 0x44
 80019de:	bd90      	pop	{r4, r7, pc}

080019e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b096      	sub	sp, #88	; 0x58
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019e6:	2348      	movs	r3, #72	; 0x48
 80019e8:	18fb      	adds	r3, r7, r3
 80019ea:	0018      	movs	r0, r3
 80019ec:	2310      	movs	r3, #16
 80019ee:	001a      	movs	r2, r3
 80019f0:	2100      	movs	r1, #0
 80019f2:	f004 fbfc 	bl	80061ee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f6:	2340      	movs	r3, #64	; 0x40
 80019f8:	18fb      	adds	r3, r7, r3
 80019fa:	0018      	movs	r0, r3
 80019fc:	2308      	movs	r3, #8
 80019fe:	001a      	movs	r2, r3
 8001a00:	2100      	movs	r1, #0
 8001a02:	f004 fbf4 	bl	80061ee <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a06:	2324      	movs	r3, #36	; 0x24
 8001a08:	18fb      	adds	r3, r7, r3
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	231c      	movs	r3, #28
 8001a0e:	001a      	movs	r2, r3
 8001a10:	2100      	movs	r1, #0
 8001a12:	f004 fbec 	bl	80061ee <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	0018      	movs	r0, r3
 8001a1a:	2320      	movs	r3, #32
 8001a1c:	001a      	movs	r2, r3
 8001a1e:	2100      	movs	r1, #0
 8001a20:	f004 fbe5 	bl	80061ee <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a24:	4b57      	ldr	r3, [pc, #348]	; (8001b84 <MX_TIM1_Init+0x1a4>)
 8001a26:	4a58      	ldr	r2, [pc, #352]	; (8001b88 <MX_TIM1_Init+0x1a8>)
 8001a28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 480;
 8001a2a:	4b56      	ldr	r3, [pc, #344]	; (8001b84 <MX_TIM1_Init+0x1a4>)
 8001a2c:	22f0      	movs	r2, #240	; 0xf0
 8001a2e:	0052      	lsls	r2, r2, #1
 8001a30:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a32:	4b54      	ldr	r3, [pc, #336]	; (8001b84 <MX_TIM1_Init+0x1a4>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8001a38:	4b52      	ldr	r3, [pc, #328]	; (8001b84 <MX_TIM1_Init+0x1a4>)
 8001a3a:	2263      	movs	r2, #99	; 0x63
 8001a3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3e:	4b51      	ldr	r3, [pc, #324]	; (8001b84 <MX_TIM1_Init+0x1a4>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a44:	4b4f      	ldr	r3, [pc, #316]	; (8001b84 <MX_TIM1_Init+0x1a4>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4a:	4b4e      	ldr	r3, [pc, #312]	; (8001b84 <MX_TIM1_Init+0x1a4>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a50:	4b4c      	ldr	r3, [pc, #304]	; (8001b84 <MX_TIM1_Init+0x1a4>)
 8001a52:	0018      	movs	r0, r3
 8001a54:	f001 fe10 	bl	8003678 <HAL_TIM_Base_Init>
 8001a58:	1e03      	subs	r3, r0, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001a5c:	f000 fcec 	bl	8002438 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a60:	2148      	movs	r1, #72	; 0x48
 8001a62:	187b      	adds	r3, r7, r1
 8001a64:	2280      	movs	r2, #128	; 0x80
 8001a66:	0152      	lsls	r2, r2, #5
 8001a68:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a6a:	187a      	adds	r2, r7, r1
 8001a6c:	4b45      	ldr	r3, [pc, #276]	; (8001b84 <MX_TIM1_Init+0x1a4>)
 8001a6e:	0011      	movs	r1, r2
 8001a70:	0018      	movs	r0, r3
 8001a72:	f002 f983 	bl	8003d7c <HAL_TIM_ConfigClockSource>
 8001a76:	1e03      	subs	r3, r0, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001a7a:	f000 fcdd 	bl	8002438 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a7e:	4b41      	ldr	r3, [pc, #260]	; (8001b84 <MX_TIM1_Init+0x1a4>)
 8001a80:	0018      	movs	r0, r3
 8001a82:	f001 fe95 	bl	80037b0 <HAL_TIM_PWM_Init>
 8001a86:	1e03      	subs	r3, r0, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8001a8a:	f000 fcd5 	bl	8002438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a8e:	2140      	movs	r1, #64	; 0x40
 8001a90:	187b      	adds	r3, r7, r1
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a96:	187b      	adds	r3, r7, r1
 8001a98:	2200      	movs	r2, #0
 8001a9a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a9c:	187a      	adds	r2, r7, r1
 8001a9e:	4b39      	ldr	r3, [pc, #228]	; (8001b84 <MX_TIM1_Init+0x1a4>)
 8001aa0:	0011      	movs	r1, r2
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f002 fd8e 	bl	80045c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa8:	1e03      	subs	r3, r0, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8001aac:	f000 fcc4 	bl	8002438 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ab0:	2124      	movs	r1, #36	; 0x24
 8001ab2:	187b      	adds	r3, r7, r1
 8001ab4:	2260      	movs	r2, #96	; 0x60
 8001ab6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001ab8:	187b      	adds	r3, r7, r1
 8001aba:	2200      	movs	r2, #0
 8001abc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001abe:	187b      	adds	r3, r7, r1
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ac4:	187b      	adds	r3, r7, r1
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aca:	187b      	adds	r3, r7, r1
 8001acc:	2200      	movs	r2, #0
 8001ace:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ad0:	187b      	adds	r3, r7, r1
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ad6:	187b      	adds	r3, r7, r1
 8001ad8:	2200      	movs	r2, #0
 8001ada:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001adc:	1879      	adds	r1, r7, r1
 8001ade:	4b29      	ldr	r3, [pc, #164]	; (8001b84 <MX_TIM1_Init+0x1a4>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f002 f884 	bl	8003bf0 <HAL_TIM_PWM_ConfigChannel>
 8001ae8:	1e03      	subs	r3, r0, #0
 8001aea:	d001      	beq.n	8001af0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001aec:	f000 fca4 	bl	8002438 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001af0:	2324      	movs	r3, #36	; 0x24
 8001af2:	18f9      	adds	r1, r7, r3
 8001af4:	4b23      	ldr	r3, [pc, #140]	; (8001b84 <MX_TIM1_Init+0x1a4>)
 8001af6:	2204      	movs	r2, #4
 8001af8:	0018      	movs	r0, r3
 8001afa:	f002 f879 	bl	8003bf0 <HAL_TIM_PWM_ConfigChannel>
 8001afe:	1e03      	subs	r3, r0, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001b02:	f000 fc99 	bl	8002438 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b06:	2324      	movs	r3, #36	; 0x24
 8001b08:	18f9      	adds	r1, r7, r3
 8001b0a:	4b1e      	ldr	r3, [pc, #120]	; (8001b84 <MX_TIM1_Init+0x1a4>)
 8001b0c:	2208      	movs	r2, #8
 8001b0e:	0018      	movs	r0, r3
 8001b10:	f002 f86e 	bl	8003bf0 <HAL_TIM_PWM_ConfigChannel>
 8001b14:	1e03      	subs	r3, r0, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8001b18:	f000 fc8e 	bl	8002438 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b1c:	2324      	movs	r3, #36	; 0x24
 8001b1e:	18f9      	adds	r1, r7, r3
 8001b20:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <MX_TIM1_Init+0x1a4>)
 8001b22:	220c      	movs	r2, #12
 8001b24:	0018      	movs	r0, r3
 8001b26:	f002 f863 	bl	8003bf0 <HAL_TIM_PWM_ConfigChannel>
 8001b2a:	1e03      	subs	r3, r0, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8001b2e:	f000 fc83 	bl	8002438 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	2200      	movs	r2, #0
 8001b48:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	2280      	movs	r2, #128	; 0x80
 8001b54:	0192      	lsls	r2, r2, #6
 8001b56:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b5e:	1d3a      	adds	r2, r7, #4
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <MX_TIM1_Init+0x1a4>)
 8001b62:	0011      	movs	r1, r2
 8001b64:	0018      	movs	r0, r3
 8001b66:	f002 fd85 	bl	8004674 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b6a:	1e03      	subs	r3, r0, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 8001b6e:	f000 fc63 	bl	8002438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b72:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <MX_TIM1_Init+0x1a4>)
 8001b74:	0018      	movs	r0, r3
 8001b76:	f000 fcaf 	bl	80024d8 <HAL_TIM_MspPostInit>

}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	b016      	add	sp, #88	; 0x58
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	200002f4 	.word	0x200002f4
 8001b88:	40012c00 	.word	0x40012c00

08001b8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b90:	4b14      	ldr	r3, [pc, #80]	; (8001be4 <MX_USART2_UART_Init+0x58>)
 8001b92:	4a15      	ldr	r2, [pc, #84]	; (8001be8 <MX_USART2_UART_Init+0x5c>)
 8001b94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001b96:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <MX_USART2_UART_Init+0x58>)
 8001b98:	2296      	movs	r2, #150	; 0x96
 8001b9a:	0192      	lsls	r2, r2, #6
 8001b9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b9e:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <MX_USART2_UART_Init+0x58>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <MX_USART2_UART_Init+0x58>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001baa:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bb2:	220c      	movs	r2, #12
 8001bb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bc2:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bce:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <MX_USART2_UART_Init+0x58>)
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f002 fdbd 	bl	8004750 <HAL_UART_Init>
 8001bd6:	1e03      	subs	r3, r0, #0
 8001bd8:	d001      	beq.n	8001bde <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001bda:	f000 fc2d 	bl	8002438 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	2000033c 	.word	0x2000033c
 8001be8:	40004400 	.word	0x40004400

08001bec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b08b      	sub	sp, #44	; 0x2c
 8001bf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf2:	2414      	movs	r4, #20
 8001bf4:	193b      	adds	r3, r7, r4
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	2314      	movs	r3, #20
 8001bfa:	001a      	movs	r2, r3
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	f004 faf6 	bl	80061ee <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c02:	4b4f      	ldr	r3, [pc, #316]	; (8001d40 <MX_GPIO_Init+0x154>)
 8001c04:	695a      	ldr	r2, [r3, #20]
 8001c06:	4b4e      	ldr	r3, [pc, #312]	; (8001d40 <MX_GPIO_Init+0x154>)
 8001c08:	2180      	movs	r1, #128	; 0x80
 8001c0a:	03c9      	lsls	r1, r1, #15
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	615a      	str	r2, [r3, #20]
 8001c10:	4b4b      	ldr	r3, [pc, #300]	; (8001d40 <MX_GPIO_Init+0x154>)
 8001c12:	695a      	ldr	r2, [r3, #20]
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	03db      	lsls	r3, r3, #15
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1e:	4b48      	ldr	r3, [pc, #288]	; (8001d40 <MX_GPIO_Init+0x154>)
 8001c20:	695a      	ldr	r2, [r3, #20]
 8001c22:	4b47      	ldr	r3, [pc, #284]	; (8001d40 <MX_GPIO_Init+0x154>)
 8001c24:	2180      	movs	r1, #128	; 0x80
 8001c26:	0309      	lsls	r1, r1, #12
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	615a      	str	r2, [r3, #20]
 8001c2c:	4b44      	ldr	r3, [pc, #272]	; (8001d40 <MX_GPIO_Init+0x154>)
 8001c2e:	695a      	ldr	r2, [r3, #20]
 8001c30:	2380      	movs	r3, #128	; 0x80
 8001c32:	031b      	lsls	r3, r3, #12
 8001c34:	4013      	ands	r3, r2
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3a:	4b41      	ldr	r3, [pc, #260]	; (8001d40 <MX_GPIO_Init+0x154>)
 8001c3c:	695a      	ldr	r2, [r3, #20]
 8001c3e:	4b40      	ldr	r3, [pc, #256]	; (8001d40 <MX_GPIO_Init+0x154>)
 8001c40:	2180      	movs	r1, #128	; 0x80
 8001c42:	0289      	lsls	r1, r1, #10
 8001c44:	430a      	orrs	r2, r1
 8001c46:	615a      	str	r2, [r3, #20]
 8001c48:	4b3d      	ldr	r3, [pc, #244]	; (8001d40 <MX_GPIO_Init+0x154>)
 8001c4a:	695a      	ldr	r2, [r3, #20]
 8001c4c:	2380      	movs	r3, #128	; 0x80
 8001c4e:	029b      	lsls	r3, r3, #10
 8001c50:	4013      	ands	r3, r2
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c56:	4b3a      	ldr	r3, [pc, #232]	; (8001d40 <MX_GPIO_Init+0x154>)
 8001c58:	695a      	ldr	r2, [r3, #20]
 8001c5a:	4b39      	ldr	r3, [pc, #228]	; (8001d40 <MX_GPIO_Init+0x154>)
 8001c5c:	2180      	movs	r1, #128	; 0x80
 8001c5e:	02c9      	lsls	r1, r1, #11
 8001c60:	430a      	orrs	r2, r1
 8001c62:	615a      	str	r2, [r3, #20]
 8001c64:	4b36      	ldr	r3, [pc, #216]	; (8001d40 <MX_GPIO_Init+0x154>)
 8001c66:	695a      	ldr	r2, [r3, #20]
 8001c68:	2380      	movs	r3, #128	; 0x80
 8001c6a:	02db      	lsls	r3, r3, #11
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	607b      	str	r3, [r7, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001c72:	4934      	ldr	r1, [pc, #208]	; (8001d44 <MX_GPIO_Init+0x158>)
 8001c74:	4b34      	ldr	r3, [pc, #208]	; (8001d48 <MX_GPIO_Init+0x15c>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f001 f83b 	bl	8002cf4 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001c7e:	2390      	movs	r3, #144	; 0x90
 8001c80:	05db      	lsls	r3, r3, #23
 8001c82:	2200      	movs	r2, #0
 8001c84:	2103      	movs	r1, #3
 8001c86:	0018      	movs	r0, r3
 8001c88:	f001 f834 	bl	8002cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001c8c:	4b2f      	ldr	r3, [pc, #188]	; (8001d4c <MX_GPIO_Init+0x160>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2130      	movs	r1, #48	; 0x30
 8001c92:	0018      	movs	r0, r3
 8001c94:	f001 f82e 	bl	8002cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001c98:	193b      	adds	r3, r7, r4
 8001c9a:	4a2a      	ldr	r2, [pc, #168]	; (8001d44 <MX_GPIO_Init+0x158>)
 8001c9c:	601a      	str	r2, [r3, #0]
                          |LD4_Pin|LD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9e:	193b      	adds	r3, r7, r4
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	193b      	adds	r3, r7, r4
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001caa:	193b      	adds	r3, r7, r4
 8001cac:	2200      	movs	r2, #0
 8001cae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb0:	193b      	adds	r3, r7, r4
 8001cb2:	4a25      	ldr	r2, [pc, #148]	; (8001d48 <MX_GPIO_Init+0x15c>)
 8001cb4:	0019      	movs	r1, r3
 8001cb6:	0010      	movs	r0, r2
 8001cb8:	f000 feac 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cbc:	193b      	adds	r3, r7, r4
 8001cbe:	2203      	movs	r2, #3
 8001cc0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc2:	193b      	adds	r3, r7, r4
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	193b      	adds	r3, r7, r4
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cce:	193b      	adds	r3, r7, r4
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd4:	193a      	adds	r2, r7, r4
 8001cd6:	2390      	movs	r3, #144	; 0x90
 8001cd8:	05db      	lsls	r3, r3, #23
 8001cda:	0011      	movs	r1, r2
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f000 fe99 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF4 PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ce2:	193b      	adds	r3, r7, r4
 8001ce4:	2230      	movs	r2, #48	; 0x30
 8001ce6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce8:	193b      	adds	r3, r7, r4
 8001cea:	2201      	movs	r2, #1
 8001cec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	193b      	adds	r3, r7, r4
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf4:	193b      	adds	r3, r7, r4
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cfa:	193b      	adds	r3, r7, r4
 8001cfc:	4a13      	ldr	r2, [pc, #76]	; (8001d4c <MX_GPIO_Init+0x160>)
 8001cfe:	0019      	movs	r1, r3
 8001d00:	0010      	movs	r0, r2
 8001d02:	f000 fe87 	bl	8002a14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d06:	0021      	movs	r1, r4
 8001d08:	187b      	adds	r3, r7, r1
 8001d0a:	22f0      	movs	r2, #240	; 0xf0
 8001d0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d0e:	187b      	adds	r3, r7, r1
 8001d10:	2288      	movs	r2, #136	; 0x88
 8001d12:	0352      	lsls	r2, r2, #13
 8001d14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	187b      	adds	r3, r7, r1
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1c:	187b      	adds	r3, r7, r1
 8001d1e:	4a0c      	ldr	r2, [pc, #48]	; (8001d50 <MX_GPIO_Init+0x164>)
 8001d20:	0019      	movs	r1, r3
 8001d22:	0010      	movs	r0, r2
 8001d24:	f000 fe76 	bl	8002a14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2103      	movs	r1, #3
 8001d2c:	2007      	movs	r0, #7
 8001d2e:	f000 fe4b 	bl	80029c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001d32:	2007      	movs	r0, #7
 8001d34:	f000 fe5d 	bl	80029f2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d38:	46c0      	nop			; (mov r8, r8)
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	b00b      	add	sp, #44	; 0x2c
 8001d3e:	bd90      	pop	{r4, r7, pc}
 8001d40:	40021000 	.word	0x40021000
 8001d44:	0000030f 	.word	0x0000030f
 8001d48:	48000800 	.word	0x48000800
 8001d4c:	48001400 	.word	0x48001400
 8001d50:	48000400 	.word	0x48000400

08001d54 <task1_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task1_function */
void task1_function(void const * argument)
{
 8001d54:	b590      	push	{r4, r7, lr}
 8001d56:	b087      	sub	sp, #28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001d5c:	b662      	cpsie	i
}
 8001d5e:	46c0      	nop			; (mov r8, r8)
  /* Infinite loop */
	for(;;)
	{
	//HAL_UART_Receive(&huart2,&c[0],8,500);
	__enable_irq();
	HAL_Delay(1000);
 8001d60:	23fa      	movs	r3, #250	; 0xfa
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	0018      	movs	r0, r3
 8001d66:	f000 fd83 	bl	8002870 <HAL_Delay>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d6a:	b672      	cpsid	i
}
 8001d6c:	46c0      	nop			; (mov r8, r8)
	__disable_irq();
	speed_1 = (count_EXTI4/210)*60.0;
 8001d6e:	4b53      	ldr	r3, [pc, #332]	; (8001ebc <task1_function+0x168>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	21d2      	movs	r1, #210	; 0xd2
 8001d74:	0018      	movs	r0, r3
 8001d76:	f7fe fa5b 	bl	8000230 <__divsi3>
 8001d7a:	0003      	movs	r3, r0
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	f7ff fb91 	bl	80014a4 <__aeabi_i2d>
 8001d82:	2200      	movs	r2, #0
 8001d84:	4b4e      	ldr	r3, [pc, #312]	; (8001ec0 <task1_function+0x16c>)
 8001d86:	f7ff f921 	bl	8000fcc <__aeabi_dmul>
 8001d8a:	0002      	movs	r2, r0
 8001d8c:	000b      	movs	r3, r1
 8001d8e:	0010      	movs	r0, r2
 8001d90:	0019      	movs	r1, r3
 8001d92:	f7ff fbb7 	bl	8001504 <__aeabi_d2f>
 8001d96:	1c02      	adds	r2, r0, #0
 8001d98:	4b4a      	ldr	r3, [pc, #296]	; (8001ec4 <task1_function+0x170>)
 8001d9a:	601a      	str	r2, [r3, #0]
	count_EXTI4 = 0;
 8001d9c:	4b47      	ldr	r3, [pc, #284]	; (8001ebc <task1_function+0x168>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
	input1 = speed_1;
 8001da2:	4b48      	ldr	r3, [pc, #288]	; (8001ec4 <task1_function+0x170>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	4b48      	ldr	r3, [pc, #288]	; (8001ec8 <task1_function+0x174>)
 8001da8:	601a      	str	r2, [r3, #0]
	float err = setpoint - input1;
 8001daa:	4b48      	ldr	r3, [pc, #288]	; (8001ecc <task1_function+0x178>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	4b46      	ldr	r3, [pc, #280]	; (8001ec8 <task1_function+0x174>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	1c19      	adds	r1, r3, #0
 8001db4:	1c10      	adds	r0, r2, #0
 8001db6:	f7fe feed 	bl	8000b94 <__aeabi_fsub>
 8001dba:	1c03      	adds	r3, r0, #0
 8001dbc:	617b      	str	r3, [r7, #20]
	errSum1 += err;
 8001dbe:	4b44      	ldr	r3, [pc, #272]	; (8001ed0 <task1_function+0x17c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6979      	ldr	r1, [r7, #20]
 8001dc4:	1c18      	adds	r0, r3, #0
 8001dc6:	f7fe fb71 	bl	80004ac <__aeabi_fadd>
 8001dca:	1c03      	adds	r3, r0, #0
 8001dcc:	1c1a      	adds	r2, r3, #0
 8001dce:	4b40      	ldr	r3, [pc, #256]	; (8001ed0 <task1_function+0x17c>)
 8001dd0:	601a      	str	r2, [r3, #0]
	float dErr = (input1 - lastInput1);
 8001dd2:	4b3d      	ldr	r3, [pc, #244]	; (8001ec8 <task1_function+0x174>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	4b3f      	ldr	r3, [pc, #252]	; (8001ed4 <task1_function+0x180>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	1c19      	adds	r1, r3, #0
 8001ddc:	1c10      	adds	r0, r2, #0
 8001dde:	f7fe fed9 	bl	8000b94 <__aeabi_fsub>
 8001de2:	1c03      	adds	r3, r0, #0
 8001de4:	613b      	str	r3, [r7, #16]
	output1 = kp * err + ki * errSum1 - kd * dErr;
 8001de6:	4b3c      	ldr	r3, [pc, #240]	; (8001ed8 <task1_function+0x184>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6979      	ldr	r1, [r7, #20]
 8001dec:	1c18      	adds	r0, r3, #0
 8001dee:	f7fe fdab 	bl	8000948 <__aeabi_fmul>
 8001df2:	1c03      	adds	r3, r0, #0
 8001df4:	1c1c      	adds	r4, r3, #0
 8001df6:	4b39      	ldr	r3, [pc, #228]	; (8001edc <task1_function+0x188>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	4b35      	ldr	r3, [pc, #212]	; (8001ed0 <task1_function+0x17c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	1c19      	adds	r1, r3, #0
 8001e00:	1c10      	adds	r0, r2, #0
 8001e02:	f7fe fda1 	bl	8000948 <__aeabi_fmul>
 8001e06:	1c03      	adds	r3, r0, #0
 8001e08:	1c19      	adds	r1, r3, #0
 8001e0a:	1c20      	adds	r0, r4, #0
 8001e0c:	f7fe fb4e 	bl	80004ac <__aeabi_fadd>
 8001e10:	1c03      	adds	r3, r0, #0
 8001e12:	1c1c      	adds	r4, r3, #0
 8001e14:	4b32      	ldr	r3, [pc, #200]	; (8001ee0 <task1_function+0x18c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6939      	ldr	r1, [r7, #16]
 8001e1a:	1c18      	adds	r0, r3, #0
 8001e1c:	f7fe fd94 	bl	8000948 <__aeabi_fmul>
 8001e20:	1c03      	adds	r3, r0, #0
 8001e22:	1c19      	adds	r1, r3, #0
 8001e24:	1c20      	adds	r0, r4, #0
 8001e26:	f7fe feb5 	bl	8000b94 <__aeabi_fsub>
 8001e2a:	1c03      	adds	r3, r0, #0
 8001e2c:	1c1a      	adds	r2, r3, #0
 8001e2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ee4 <task1_function+0x190>)
 8001e30:	601a      	str	r2, [r3, #0]
	lastErr1 = err;
 8001e32:	4b2d      	ldr	r3, [pc, #180]	; (8001ee8 <task1_function+0x194>)
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	601a      	str	r2, [r3, #0]
	lastInput1 = input1;
 8001e38:	4b23      	ldr	r3, [pc, #140]	; (8001ec8 <task1_function+0x174>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4b25      	ldr	r3, [pc, #148]	; (8001ed4 <task1_function+0x180>)
 8001e3e:	601a      	str	r2, [r3, #0]
	if(output1 < 0) output1 = 0;
 8001e40:	4b28      	ldr	r3, [pc, #160]	; (8001ee4 <task1_function+0x190>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2100      	movs	r1, #0
 8001e46:	1c18      	adds	r0, r3, #0
 8001e48:	f7fe faf0 	bl	800042c <__aeabi_fcmplt>
 8001e4c:	1e03      	subs	r3, r0, #0
 8001e4e:	d003      	beq.n	8001e58 <task1_function+0x104>
 8001e50:	4b24      	ldr	r3, [pc, #144]	; (8001ee4 <task1_function+0x190>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	e00a      	b.n	8001e6e <task1_function+0x11a>
	else if(output1 > 100) output1 = 100;
 8001e58:	4b22      	ldr	r3, [pc, #136]	; (8001ee4 <task1_function+0x190>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4923      	ldr	r1, [pc, #140]	; (8001eec <task1_function+0x198>)
 8001e5e:	1c18      	adds	r0, r3, #0
 8001e60:	f7fe faf8 	bl	8000454 <__aeabi_fcmpgt>
 8001e64:	1e03      	subs	r3, r0, #0
 8001e66:	d002      	beq.n	8001e6e <task1_function+0x11a>
 8001e68:	4b1e      	ldr	r3, [pc, #120]	; (8001ee4 <task1_function+0x190>)
 8001e6a:	4a20      	ldr	r2, [pc, #128]	; (8001eec <task1_function+0x198>)
 8001e6c:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,output1);
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <task1_function+0x190>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	4b1f      	ldr	r3, [pc, #124]	; (8001ef0 <task1_function+0x19c>)
 8001e74:	681c      	ldr	r4, [r3, #0]
 8001e76:	1c10      	adds	r0, r2, #0
 8001e78:	f7fe fb00 	bl	800047c <__aeabi_f2uiz>
 8001e7c:	0003      	movs	r3, r0
 8001e7e:	6363      	str	r3, [r4, #52]	; 0x34
	uint32_t output_Tx = (uint32_t)output1;
 8001e80:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <task1_function+0x190>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	1c18      	adds	r0, r3, #0
 8001e86:	f7fe faf9 	bl	800047c <__aeabi_f2uiz>
 8001e8a:	0003      	movs	r3, r0
 8001e8c:	60fb      	str	r3, [r7, #12]
	char str[4];
	sprintf(str, "%d", output_Tx);
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	4918      	ldr	r1, [pc, #96]	; (8001ef4 <task1_function+0x1a0>)
 8001e92:	2408      	movs	r4, #8
 8001e94:	193b      	adds	r3, r7, r4
 8001e96:	0018      	movs	r0, r3
 8001e98:	f004 f9b2 	bl	8006200 <siprintf>
 	TransUart2("OUTPUT1: ");
 8001e9c:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <task1_function+0x1a4>)
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	f7ff fbee 	bl	8001680 <TransUart2>
	HAL_UART_Transmit(&huart2, &str, 3, 500);
 8001ea4:	23fa      	movs	r3, #250	; 0xfa
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	1939      	adds	r1, r7, r4
 8001eaa:	4814      	ldr	r0, [pc, #80]	; (8001efc <task1_function+0x1a8>)
 8001eac:	2203      	movs	r2, #3
 8001eae:	f002 fca3 	bl	80047f8 <HAL_UART_Transmit>
	TransUart2("\n");
 8001eb2:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <task1_function+0x1ac>)
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f7ff fbe3 	bl	8001680 <TransUart2>
	{
 8001eba:	e74f      	b.n	8001d5c <task1_function+0x8>
 8001ebc:	200003d4 	.word	0x200003d4
 8001ec0:	404e0000 	.word	0x404e0000
 8001ec4:	200003e4 	.word	0x200003e4
 8001ec8:	200003f4 	.word	0x200003f4
 8001ecc:	2000000c 	.word	0x2000000c
 8001ed0:	20000400 	.word	0x20000400
 8001ed4:	200003fc 	.word	0x200003fc
 8001ed8:	20000000 	.word	0x20000000
 8001edc:	20000004 	.word	0x20000004
 8001ee0:	20000008 	.word	0x20000008
 8001ee4:	200003f8 	.word	0x200003f8
 8001ee8:	20000404 	.word	0x20000404
 8001eec:	42c80000 	.word	0x42c80000
 8001ef0:	200002f4 	.word	0x200002f4
 8001ef4:	08006cc0 	.word	0x08006cc0
 8001ef8:	08006cc4 	.word	0x08006cc4
 8001efc:	2000033c 	.word	0x2000033c
 8001f00:	08006cd0 	.word	0x08006cd0

08001f04 <task2_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task2_function */
void task2_function(void const * argument)
{
 8001f04:	b590      	push	{r4, r7, lr}
 8001f06:	b087      	sub	sp, #28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f0c:	b662      	cpsie	i
}
 8001f0e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN task2_function */
  /* Infinite loop */
  for(;;)
  {
	  __enable_irq();
	  HAL_Delay(1000);
 8001f10:	23fa      	movs	r3, #250	; 0xfa
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	0018      	movs	r0, r3
 8001f16:	f000 fcab 	bl	8002870 <HAL_Delay>
  __ASM volatile ("cpsid i" : : : "memory");
 8001f1a:	b672      	cpsid	i
}
 8001f1c:	46c0      	nop			; (mov r8, r8)
	  __disable_irq();
	  speed_2 = (count_EXTI5/210)*60.0;
 8001f1e:	4b53      	ldr	r3, [pc, #332]	; (800206c <task2_function+0x168>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	21d2      	movs	r1, #210	; 0xd2
 8001f24:	0018      	movs	r0, r3
 8001f26:	f7fe f983 	bl	8000230 <__divsi3>
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f7ff fab9 	bl	80014a4 <__aeabi_i2d>
 8001f32:	2200      	movs	r2, #0
 8001f34:	4b4e      	ldr	r3, [pc, #312]	; (8002070 <task2_function+0x16c>)
 8001f36:	f7ff f849 	bl	8000fcc <__aeabi_dmul>
 8001f3a:	0002      	movs	r2, r0
 8001f3c:	000b      	movs	r3, r1
 8001f3e:	0010      	movs	r0, r2
 8001f40:	0019      	movs	r1, r3
 8001f42:	f7ff fadf 	bl	8001504 <__aeabi_d2f>
 8001f46:	1c02      	adds	r2, r0, #0
 8001f48:	4b4a      	ldr	r3, [pc, #296]	; (8002074 <task2_function+0x170>)
 8001f4a:	601a      	str	r2, [r3, #0]
	  count_EXTI5 = 0;
 8001f4c:	4b47      	ldr	r3, [pc, #284]	; (800206c <task2_function+0x168>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 	  input2 = speed_2;
 8001f52:	4b48      	ldr	r3, [pc, #288]	; (8002074 <task2_function+0x170>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	4b48      	ldr	r3, [pc, #288]	; (8002078 <task2_function+0x174>)
 8001f58:	601a      	str	r2, [r3, #0]
	  float err = setpoint - input2;
 8001f5a:	4b48      	ldr	r3, [pc, #288]	; (800207c <task2_function+0x178>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	4b46      	ldr	r3, [pc, #280]	; (8002078 <task2_function+0x174>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	1c19      	adds	r1, r3, #0
 8001f64:	1c10      	adds	r0, r2, #0
 8001f66:	f7fe fe15 	bl	8000b94 <__aeabi_fsub>
 8001f6a:	1c03      	adds	r3, r0, #0
 8001f6c:	617b      	str	r3, [r7, #20]
	  errSum2 += err;
 8001f6e:	4b44      	ldr	r3, [pc, #272]	; (8002080 <task2_function+0x17c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6979      	ldr	r1, [r7, #20]
 8001f74:	1c18      	adds	r0, r3, #0
 8001f76:	f7fe fa99 	bl	80004ac <__aeabi_fadd>
 8001f7a:	1c03      	adds	r3, r0, #0
 8001f7c:	1c1a      	adds	r2, r3, #0
 8001f7e:	4b40      	ldr	r3, [pc, #256]	; (8002080 <task2_function+0x17c>)
 8001f80:	601a      	str	r2, [r3, #0]
	  float dErr = (input2 - lastInput2);
 8001f82:	4b3d      	ldr	r3, [pc, #244]	; (8002078 <task2_function+0x174>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	4b3f      	ldr	r3, [pc, #252]	; (8002084 <task2_function+0x180>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	1c19      	adds	r1, r3, #0
 8001f8c:	1c10      	adds	r0, r2, #0
 8001f8e:	f7fe fe01 	bl	8000b94 <__aeabi_fsub>
 8001f92:	1c03      	adds	r3, r0, #0
 8001f94:	613b      	str	r3, [r7, #16]
	  output2 = kp * err + ki * errSum2 - kd * dErr;
 8001f96:	4b3c      	ldr	r3, [pc, #240]	; (8002088 <task2_function+0x184>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6979      	ldr	r1, [r7, #20]
 8001f9c:	1c18      	adds	r0, r3, #0
 8001f9e:	f7fe fcd3 	bl	8000948 <__aeabi_fmul>
 8001fa2:	1c03      	adds	r3, r0, #0
 8001fa4:	1c1c      	adds	r4, r3, #0
 8001fa6:	4b39      	ldr	r3, [pc, #228]	; (800208c <task2_function+0x188>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	4b35      	ldr	r3, [pc, #212]	; (8002080 <task2_function+0x17c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	1c19      	adds	r1, r3, #0
 8001fb0:	1c10      	adds	r0, r2, #0
 8001fb2:	f7fe fcc9 	bl	8000948 <__aeabi_fmul>
 8001fb6:	1c03      	adds	r3, r0, #0
 8001fb8:	1c19      	adds	r1, r3, #0
 8001fba:	1c20      	adds	r0, r4, #0
 8001fbc:	f7fe fa76 	bl	80004ac <__aeabi_fadd>
 8001fc0:	1c03      	adds	r3, r0, #0
 8001fc2:	1c1c      	adds	r4, r3, #0
 8001fc4:	4b32      	ldr	r3, [pc, #200]	; (8002090 <task2_function+0x18c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6939      	ldr	r1, [r7, #16]
 8001fca:	1c18      	adds	r0, r3, #0
 8001fcc:	f7fe fcbc 	bl	8000948 <__aeabi_fmul>
 8001fd0:	1c03      	adds	r3, r0, #0
 8001fd2:	1c19      	adds	r1, r3, #0
 8001fd4:	1c20      	adds	r0, r4, #0
 8001fd6:	f7fe fddd 	bl	8000b94 <__aeabi_fsub>
 8001fda:	1c03      	adds	r3, r0, #0
 8001fdc:	1c1a      	adds	r2, r3, #0
 8001fde:	4b2d      	ldr	r3, [pc, #180]	; (8002094 <task2_function+0x190>)
 8001fe0:	601a      	str	r2, [r3, #0]
	  lastErr2 = err;
 8001fe2:	4b2d      	ldr	r3, [pc, #180]	; (8002098 <task2_function+0x194>)
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	601a      	str	r2, [r3, #0]
	  lastInput2 = input2;
 8001fe8:	4b23      	ldr	r3, [pc, #140]	; (8002078 <task2_function+0x174>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b25      	ldr	r3, [pc, #148]	; (8002084 <task2_function+0x180>)
 8001fee:	601a      	str	r2, [r3, #0]
	  if(output2 < 0) output2 = 0;
 8001ff0:	4b28      	ldr	r3, [pc, #160]	; (8002094 <task2_function+0x190>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	1c18      	adds	r0, r3, #0
 8001ff8:	f7fe fa18 	bl	800042c <__aeabi_fcmplt>
 8001ffc:	1e03      	subs	r3, r0, #0
 8001ffe:	d003      	beq.n	8002008 <task2_function+0x104>
 8002000:	4b24      	ldr	r3, [pc, #144]	; (8002094 <task2_function+0x190>)
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	e00a      	b.n	800201e <task2_function+0x11a>
	  else if(output2 > 100) output2 = 100;
 8002008:	4b22      	ldr	r3, [pc, #136]	; (8002094 <task2_function+0x190>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4923      	ldr	r1, [pc, #140]	; (800209c <task2_function+0x198>)
 800200e:	1c18      	adds	r0, r3, #0
 8002010:	f7fe fa20 	bl	8000454 <__aeabi_fcmpgt>
 8002014:	1e03      	subs	r3, r0, #0
 8002016:	d002      	beq.n	800201e <task2_function+0x11a>
 8002018:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <task2_function+0x190>)
 800201a:	4a20      	ldr	r2, [pc, #128]	; (800209c <task2_function+0x198>)
 800201c:	601a      	str	r2, [r3, #0]
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,output2);
 800201e:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <task2_function+0x190>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	4b1f      	ldr	r3, [pc, #124]	; (80020a0 <task2_function+0x19c>)
 8002024:	681c      	ldr	r4, [r3, #0]
 8002026:	1c10      	adds	r0, r2, #0
 8002028:	f7fe fa28 	bl	800047c <__aeabi_f2uiz>
 800202c:	0003      	movs	r3, r0
 800202e:	63a3      	str	r3, [r4, #56]	; 0x38
	  uint32_t output_Tx = (uint32_t)output2;
 8002030:	4b18      	ldr	r3, [pc, #96]	; (8002094 <task2_function+0x190>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	1c18      	adds	r0, r3, #0
 8002036:	f7fe fa21 	bl	800047c <__aeabi_f2uiz>
 800203a:	0003      	movs	r3, r0
 800203c:	60fb      	str	r3, [r7, #12]
	  char str[4]; // Chuỗi để lưu giá trị uint8_t dưới dạng chuỗi
	  sprintf(str, "%d", output_Tx); // Chuyển giá trị uint8_t thành chuỗi
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	4918      	ldr	r1, [pc, #96]	; (80020a4 <task2_function+0x1a0>)
 8002042:	2408      	movs	r4, #8
 8002044:	193b      	adds	r3, r7, r4
 8002046:	0018      	movs	r0, r3
 8002048:	f004 f8da 	bl	8006200 <siprintf>
	  TransUart2("OUTPUT2: ");
 800204c:	4b16      	ldr	r3, [pc, #88]	; (80020a8 <task2_function+0x1a4>)
 800204e:	0018      	movs	r0, r3
 8002050:	f7ff fb16 	bl	8001680 <TransUart2>
	  HAL_UART_Transmit(&huart2, &str, 3, 500);
 8002054:	23fa      	movs	r3, #250	; 0xfa
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	1939      	adds	r1, r7, r4
 800205a:	4814      	ldr	r0, [pc, #80]	; (80020ac <task2_function+0x1a8>)
 800205c:	2203      	movs	r2, #3
 800205e:	f002 fbcb 	bl	80047f8 <HAL_UART_Transmit>
	  TransUart2("\n");
 8002062:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <task2_function+0x1ac>)
 8002064:	0018      	movs	r0, r3
 8002066:	f7ff fb0b 	bl	8001680 <TransUart2>
  {
 800206a:	e74f      	b.n	8001f0c <task2_function+0x8>
 800206c:	200003d8 	.word	0x200003d8
 8002070:	404e0000 	.word	0x404e0000
 8002074:	200003e8 	.word	0x200003e8
 8002078:	20000408 	.word	0x20000408
 800207c:	2000000c 	.word	0x2000000c
 8002080:	20000414 	.word	0x20000414
 8002084:	20000410 	.word	0x20000410
 8002088:	20000000 	.word	0x20000000
 800208c:	20000004 	.word	0x20000004
 8002090:	20000008 	.word	0x20000008
 8002094:	2000040c 	.word	0x2000040c
 8002098:	20000418 	.word	0x20000418
 800209c:	42c80000 	.word	0x42c80000
 80020a0:	200002f4 	.word	0x200002f4
 80020a4:	08006cc0 	.word	0x08006cc0
 80020a8:	08006cd4 	.word	0x08006cd4
 80020ac:	2000033c 	.word	0x2000033c
 80020b0:	08006cd0 	.word	0x08006cd0

080020b4 <task3_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task3_function */
void task3_function(void const * argument)
{
 80020b4:	b590      	push	{r4, r7, lr}
 80020b6:	b087      	sub	sp, #28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 80020bc:	b662      	cpsie	i
}
 80020be:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN task3_function */
  /* Infinite loop */
  for(;;)
  {
	  __enable_irq();
	  HAL_Delay(1000);
 80020c0:	23fa      	movs	r3, #250	; 0xfa
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	0018      	movs	r0, r3
 80020c6:	f000 fbd3 	bl	8002870 <HAL_Delay>
  __ASM volatile ("cpsid i" : : : "memory");
 80020ca:	b672      	cpsid	i
}
 80020cc:	46c0      	nop			; (mov r8, r8)
	  __disable_irq();
	  speed_3 = (count_EXTI6/210)*60.0;
 80020ce:	4b53      	ldr	r3, [pc, #332]	; (800221c <task3_function+0x168>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	21d2      	movs	r1, #210	; 0xd2
 80020d4:	0018      	movs	r0, r3
 80020d6:	f7fe f8ab 	bl	8000230 <__divsi3>
 80020da:	0003      	movs	r3, r0
 80020dc:	0018      	movs	r0, r3
 80020de:	f7ff f9e1 	bl	80014a4 <__aeabi_i2d>
 80020e2:	2200      	movs	r2, #0
 80020e4:	4b4e      	ldr	r3, [pc, #312]	; (8002220 <task3_function+0x16c>)
 80020e6:	f7fe ff71 	bl	8000fcc <__aeabi_dmul>
 80020ea:	0002      	movs	r2, r0
 80020ec:	000b      	movs	r3, r1
 80020ee:	0010      	movs	r0, r2
 80020f0:	0019      	movs	r1, r3
 80020f2:	f7ff fa07 	bl	8001504 <__aeabi_d2f>
 80020f6:	1c02      	adds	r2, r0, #0
 80020f8:	4b4a      	ldr	r3, [pc, #296]	; (8002224 <task3_function+0x170>)
 80020fa:	601a      	str	r2, [r3, #0]
	  count_EXTI6 = 0;
 80020fc:	4b47      	ldr	r3, [pc, #284]	; (800221c <task3_function+0x168>)
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
	  input3 = speed_3;
 8002102:	4b48      	ldr	r3, [pc, #288]	; (8002224 <task3_function+0x170>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	4b48      	ldr	r3, [pc, #288]	; (8002228 <task3_function+0x174>)
 8002108:	601a      	str	r2, [r3, #0]
	  float err = setpoint - input3;
 800210a:	4b48      	ldr	r3, [pc, #288]	; (800222c <task3_function+0x178>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	4b46      	ldr	r3, [pc, #280]	; (8002228 <task3_function+0x174>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	1c19      	adds	r1, r3, #0
 8002114:	1c10      	adds	r0, r2, #0
 8002116:	f7fe fd3d 	bl	8000b94 <__aeabi_fsub>
 800211a:	1c03      	adds	r3, r0, #0
 800211c:	617b      	str	r3, [r7, #20]
	  errSum3 += err;
 800211e:	4b44      	ldr	r3, [pc, #272]	; (8002230 <task3_function+0x17c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6979      	ldr	r1, [r7, #20]
 8002124:	1c18      	adds	r0, r3, #0
 8002126:	f7fe f9c1 	bl	80004ac <__aeabi_fadd>
 800212a:	1c03      	adds	r3, r0, #0
 800212c:	1c1a      	adds	r2, r3, #0
 800212e:	4b40      	ldr	r3, [pc, #256]	; (8002230 <task3_function+0x17c>)
 8002130:	601a      	str	r2, [r3, #0]
	  float dErr = (input3 - lastInput3);
 8002132:	4b3d      	ldr	r3, [pc, #244]	; (8002228 <task3_function+0x174>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	4b3f      	ldr	r3, [pc, #252]	; (8002234 <task3_function+0x180>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	1c19      	adds	r1, r3, #0
 800213c:	1c10      	adds	r0, r2, #0
 800213e:	f7fe fd29 	bl	8000b94 <__aeabi_fsub>
 8002142:	1c03      	adds	r3, r0, #0
 8002144:	613b      	str	r3, [r7, #16]
	  output3 = kp * err + ki * errSum3 - kd * dErr;
 8002146:	4b3c      	ldr	r3, [pc, #240]	; (8002238 <task3_function+0x184>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6979      	ldr	r1, [r7, #20]
 800214c:	1c18      	adds	r0, r3, #0
 800214e:	f7fe fbfb 	bl	8000948 <__aeabi_fmul>
 8002152:	1c03      	adds	r3, r0, #0
 8002154:	1c1c      	adds	r4, r3, #0
 8002156:	4b39      	ldr	r3, [pc, #228]	; (800223c <task3_function+0x188>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	4b35      	ldr	r3, [pc, #212]	; (8002230 <task3_function+0x17c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	1c19      	adds	r1, r3, #0
 8002160:	1c10      	adds	r0, r2, #0
 8002162:	f7fe fbf1 	bl	8000948 <__aeabi_fmul>
 8002166:	1c03      	adds	r3, r0, #0
 8002168:	1c19      	adds	r1, r3, #0
 800216a:	1c20      	adds	r0, r4, #0
 800216c:	f7fe f99e 	bl	80004ac <__aeabi_fadd>
 8002170:	1c03      	adds	r3, r0, #0
 8002172:	1c1c      	adds	r4, r3, #0
 8002174:	4b32      	ldr	r3, [pc, #200]	; (8002240 <task3_function+0x18c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6939      	ldr	r1, [r7, #16]
 800217a:	1c18      	adds	r0, r3, #0
 800217c:	f7fe fbe4 	bl	8000948 <__aeabi_fmul>
 8002180:	1c03      	adds	r3, r0, #0
 8002182:	1c19      	adds	r1, r3, #0
 8002184:	1c20      	adds	r0, r4, #0
 8002186:	f7fe fd05 	bl	8000b94 <__aeabi_fsub>
 800218a:	1c03      	adds	r3, r0, #0
 800218c:	1c1a      	adds	r2, r3, #0
 800218e:	4b2d      	ldr	r3, [pc, #180]	; (8002244 <task3_function+0x190>)
 8002190:	601a      	str	r2, [r3, #0]
	  lastErr3 = err;
 8002192:	4b2d      	ldr	r3, [pc, #180]	; (8002248 <task3_function+0x194>)
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	601a      	str	r2, [r3, #0]
	  lastInput3 = input3;
 8002198:	4b23      	ldr	r3, [pc, #140]	; (8002228 <task3_function+0x174>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4b25      	ldr	r3, [pc, #148]	; (8002234 <task3_function+0x180>)
 800219e:	601a      	str	r2, [r3, #0]
	  if(output3 < 0) output3 = 0;
 80021a0:	4b28      	ldr	r3, [pc, #160]	; (8002244 <task3_function+0x190>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2100      	movs	r1, #0
 80021a6:	1c18      	adds	r0, r3, #0
 80021a8:	f7fe f940 	bl	800042c <__aeabi_fcmplt>
 80021ac:	1e03      	subs	r3, r0, #0
 80021ae:	d003      	beq.n	80021b8 <task3_function+0x104>
 80021b0:	4b24      	ldr	r3, [pc, #144]	; (8002244 <task3_function+0x190>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	e00a      	b.n	80021ce <task3_function+0x11a>
	  else if(output3 > 100) output3 = 100;
 80021b8:	4b22      	ldr	r3, [pc, #136]	; (8002244 <task3_function+0x190>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4923      	ldr	r1, [pc, #140]	; (800224c <task3_function+0x198>)
 80021be:	1c18      	adds	r0, r3, #0
 80021c0:	f7fe f948 	bl	8000454 <__aeabi_fcmpgt>
 80021c4:	1e03      	subs	r3, r0, #0
 80021c6:	d002      	beq.n	80021ce <task3_function+0x11a>
 80021c8:	4b1e      	ldr	r3, [pc, #120]	; (8002244 <task3_function+0x190>)
 80021ca:	4a20      	ldr	r2, [pc, #128]	; (800224c <task3_function+0x198>)
 80021cc:	601a      	str	r2, [r3, #0]
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,output3);
 80021ce:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <task3_function+0x190>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	4b1f      	ldr	r3, [pc, #124]	; (8002250 <task3_function+0x19c>)
 80021d4:	681c      	ldr	r4, [r3, #0]
 80021d6:	1c10      	adds	r0, r2, #0
 80021d8:	f7fe f950 	bl	800047c <__aeabi_f2uiz>
 80021dc:	0003      	movs	r3, r0
 80021de:	63e3      	str	r3, [r4, #60]	; 0x3c
	  uint32_t output_Tx = (uint32_t)output3;
 80021e0:	4b18      	ldr	r3, [pc, #96]	; (8002244 <task3_function+0x190>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	1c18      	adds	r0, r3, #0
 80021e6:	f7fe f949 	bl	800047c <__aeabi_f2uiz>
 80021ea:	0003      	movs	r3, r0
 80021ec:	60fb      	str	r3, [r7, #12]
	  char str[4]; // Chuỗi để lưu giá trị uint8_t dưới dạng chuỗi
	  sprintf(str, "%d", output_Tx); // Chuyển giá trị uint8_t thành chuỗi
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4918      	ldr	r1, [pc, #96]	; (8002254 <task3_function+0x1a0>)
 80021f2:	2408      	movs	r4, #8
 80021f4:	193b      	adds	r3, r7, r4
 80021f6:	0018      	movs	r0, r3
 80021f8:	f004 f802 	bl	8006200 <siprintf>
	  TransUart2("OUTPUT3: ");
 80021fc:	4b16      	ldr	r3, [pc, #88]	; (8002258 <task3_function+0x1a4>)
 80021fe:	0018      	movs	r0, r3
 8002200:	f7ff fa3e 	bl	8001680 <TransUart2>
	  HAL_UART_Transmit(&huart2, &str, 3, 500);
 8002204:	23fa      	movs	r3, #250	; 0xfa
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	1939      	adds	r1, r7, r4
 800220a:	4814      	ldr	r0, [pc, #80]	; (800225c <task3_function+0x1a8>)
 800220c:	2203      	movs	r2, #3
 800220e:	f002 faf3 	bl	80047f8 <HAL_UART_Transmit>
	  TransUart2("\n");
 8002212:	4b13      	ldr	r3, [pc, #76]	; (8002260 <task3_function+0x1ac>)
 8002214:	0018      	movs	r0, r3
 8002216:	f7ff fa33 	bl	8001680 <TransUart2>
  {
 800221a:	e74f      	b.n	80020bc <task3_function+0x8>
 800221c:	200003dc 	.word	0x200003dc
 8002220:	404e0000 	.word	0x404e0000
 8002224:	200003ec 	.word	0x200003ec
 8002228:	2000041c 	.word	0x2000041c
 800222c:	2000000c 	.word	0x2000000c
 8002230:	20000428 	.word	0x20000428
 8002234:	20000424 	.word	0x20000424
 8002238:	20000000 	.word	0x20000000
 800223c:	20000004 	.word	0x20000004
 8002240:	20000008 	.word	0x20000008
 8002244:	20000420 	.word	0x20000420
 8002248:	2000042c 	.word	0x2000042c
 800224c:	42c80000 	.word	0x42c80000
 8002250:	200002f4 	.word	0x200002f4
 8002254:	08006cc0 	.word	0x08006cc0
 8002258:	08006ce0 	.word	0x08006ce0
 800225c:	2000033c 	.word	0x2000033c
 8002260:	08006cd0 	.word	0x08006cd0

08002264 <task4_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task4_function */
void task4_function(void const * argument)
{
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	b087      	sub	sp, #28
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 800226c:	b662      	cpsie	i
}
 800226e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN task4_function */
  /* Infinite loop */
  for(;;)
  {
	  __enable_irq();
	  HAL_Delay(1000);
 8002270:	23fa      	movs	r3, #250	; 0xfa
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	0018      	movs	r0, r3
 8002276:	f000 fafb 	bl	8002870 <HAL_Delay>
  __ASM volatile ("cpsid i" : : : "memory");
 800227a:	b672      	cpsid	i
}
 800227c:	46c0      	nop			; (mov r8, r8)
	  __disable_irq();
	  speed_4 = (count_EXTI7/210)*60.0;
 800227e:	4b53      	ldr	r3, [pc, #332]	; (80023cc <task4_function+0x168>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	21d2      	movs	r1, #210	; 0xd2
 8002284:	0018      	movs	r0, r3
 8002286:	f7fd ffd3 	bl	8000230 <__divsi3>
 800228a:	0003      	movs	r3, r0
 800228c:	0018      	movs	r0, r3
 800228e:	f7ff f909 	bl	80014a4 <__aeabi_i2d>
 8002292:	2200      	movs	r2, #0
 8002294:	4b4e      	ldr	r3, [pc, #312]	; (80023d0 <task4_function+0x16c>)
 8002296:	f7fe fe99 	bl	8000fcc <__aeabi_dmul>
 800229a:	0002      	movs	r2, r0
 800229c:	000b      	movs	r3, r1
 800229e:	0010      	movs	r0, r2
 80022a0:	0019      	movs	r1, r3
 80022a2:	f7ff f92f 	bl	8001504 <__aeabi_d2f>
 80022a6:	1c02      	adds	r2, r0, #0
 80022a8:	4b4a      	ldr	r3, [pc, #296]	; (80023d4 <task4_function+0x170>)
 80022aa:	601a      	str	r2, [r3, #0]
	  count_EXTI7 = 0;
 80022ac:	4b47      	ldr	r3, [pc, #284]	; (80023cc <task4_function+0x168>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
	  input4 = speed_4;
 80022b2:	4b48      	ldr	r3, [pc, #288]	; (80023d4 <task4_function+0x170>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	4b48      	ldr	r3, [pc, #288]	; (80023d8 <task4_function+0x174>)
 80022b8:	601a      	str	r2, [r3, #0]
	  float err = setpoint - input4;
 80022ba:	4b48      	ldr	r3, [pc, #288]	; (80023dc <task4_function+0x178>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	4b46      	ldr	r3, [pc, #280]	; (80023d8 <task4_function+0x174>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	1c19      	adds	r1, r3, #0
 80022c4:	1c10      	adds	r0, r2, #0
 80022c6:	f7fe fc65 	bl	8000b94 <__aeabi_fsub>
 80022ca:	1c03      	adds	r3, r0, #0
 80022cc:	617b      	str	r3, [r7, #20]
	  errSum4 += err;
 80022ce:	4b44      	ldr	r3, [pc, #272]	; (80023e0 <task4_function+0x17c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6979      	ldr	r1, [r7, #20]
 80022d4:	1c18      	adds	r0, r3, #0
 80022d6:	f7fe f8e9 	bl	80004ac <__aeabi_fadd>
 80022da:	1c03      	adds	r3, r0, #0
 80022dc:	1c1a      	adds	r2, r3, #0
 80022de:	4b40      	ldr	r3, [pc, #256]	; (80023e0 <task4_function+0x17c>)
 80022e0:	601a      	str	r2, [r3, #0]
	  float dErr = (input4 - lastInput4);
 80022e2:	4b3d      	ldr	r3, [pc, #244]	; (80023d8 <task4_function+0x174>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	4b3f      	ldr	r3, [pc, #252]	; (80023e4 <task4_function+0x180>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	1c19      	adds	r1, r3, #0
 80022ec:	1c10      	adds	r0, r2, #0
 80022ee:	f7fe fc51 	bl	8000b94 <__aeabi_fsub>
 80022f2:	1c03      	adds	r3, r0, #0
 80022f4:	613b      	str	r3, [r7, #16]
	  output4 = kp * err + ki * errSum4 - kd * dErr;
 80022f6:	4b3c      	ldr	r3, [pc, #240]	; (80023e8 <task4_function+0x184>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6979      	ldr	r1, [r7, #20]
 80022fc:	1c18      	adds	r0, r3, #0
 80022fe:	f7fe fb23 	bl	8000948 <__aeabi_fmul>
 8002302:	1c03      	adds	r3, r0, #0
 8002304:	1c1c      	adds	r4, r3, #0
 8002306:	4b39      	ldr	r3, [pc, #228]	; (80023ec <task4_function+0x188>)
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	4b35      	ldr	r3, [pc, #212]	; (80023e0 <task4_function+0x17c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	1c19      	adds	r1, r3, #0
 8002310:	1c10      	adds	r0, r2, #0
 8002312:	f7fe fb19 	bl	8000948 <__aeabi_fmul>
 8002316:	1c03      	adds	r3, r0, #0
 8002318:	1c19      	adds	r1, r3, #0
 800231a:	1c20      	adds	r0, r4, #0
 800231c:	f7fe f8c6 	bl	80004ac <__aeabi_fadd>
 8002320:	1c03      	adds	r3, r0, #0
 8002322:	1c1c      	adds	r4, r3, #0
 8002324:	4b32      	ldr	r3, [pc, #200]	; (80023f0 <task4_function+0x18c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6939      	ldr	r1, [r7, #16]
 800232a:	1c18      	adds	r0, r3, #0
 800232c:	f7fe fb0c 	bl	8000948 <__aeabi_fmul>
 8002330:	1c03      	adds	r3, r0, #0
 8002332:	1c19      	adds	r1, r3, #0
 8002334:	1c20      	adds	r0, r4, #0
 8002336:	f7fe fc2d 	bl	8000b94 <__aeabi_fsub>
 800233a:	1c03      	adds	r3, r0, #0
 800233c:	1c1a      	adds	r2, r3, #0
 800233e:	4b2d      	ldr	r3, [pc, #180]	; (80023f4 <task4_function+0x190>)
 8002340:	601a      	str	r2, [r3, #0]
	  lastErr4 = err;
 8002342:	4b2d      	ldr	r3, [pc, #180]	; (80023f8 <task4_function+0x194>)
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	601a      	str	r2, [r3, #0]
	  lastInput4 = input4;
 8002348:	4b23      	ldr	r3, [pc, #140]	; (80023d8 <task4_function+0x174>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4b25      	ldr	r3, [pc, #148]	; (80023e4 <task4_function+0x180>)
 800234e:	601a      	str	r2, [r3, #0]
	  if(output4 < 0) output4 = 0;
 8002350:	4b28      	ldr	r3, [pc, #160]	; (80023f4 <task4_function+0x190>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2100      	movs	r1, #0
 8002356:	1c18      	adds	r0, r3, #0
 8002358:	f7fe f868 	bl	800042c <__aeabi_fcmplt>
 800235c:	1e03      	subs	r3, r0, #0
 800235e:	d003      	beq.n	8002368 <task4_function+0x104>
 8002360:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <task4_function+0x190>)
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	e00a      	b.n	800237e <task4_function+0x11a>
	  else if(output4 > 100) output4 = 100;
 8002368:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <task4_function+0x190>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4923      	ldr	r1, [pc, #140]	; (80023fc <task4_function+0x198>)
 800236e:	1c18      	adds	r0, r3, #0
 8002370:	f7fe f870 	bl	8000454 <__aeabi_fcmpgt>
 8002374:	1e03      	subs	r3, r0, #0
 8002376:	d002      	beq.n	800237e <task4_function+0x11a>
 8002378:	4b1e      	ldr	r3, [pc, #120]	; (80023f4 <task4_function+0x190>)
 800237a:	4a20      	ldr	r2, [pc, #128]	; (80023fc <task4_function+0x198>)
 800237c:	601a      	str	r2, [r3, #0]
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,output4);
 800237e:	4b1d      	ldr	r3, [pc, #116]	; (80023f4 <task4_function+0x190>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	4b1f      	ldr	r3, [pc, #124]	; (8002400 <task4_function+0x19c>)
 8002384:	681c      	ldr	r4, [r3, #0]
 8002386:	1c10      	adds	r0, r2, #0
 8002388:	f7fe f878 	bl	800047c <__aeabi_f2uiz>
 800238c:	0003      	movs	r3, r0
 800238e:	6423      	str	r3, [r4, #64]	; 0x40
	  uint32_t output_Tx = (uint32_t)output4;
 8002390:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <task4_function+0x190>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	1c18      	adds	r0, r3, #0
 8002396:	f7fe f871 	bl	800047c <__aeabi_f2uiz>
 800239a:	0003      	movs	r3, r0
 800239c:	60fb      	str	r3, [r7, #12]
	  char str[4]; // Chuỗi để lưu giá trị uint8_t dưới dạng chuỗi
	  sprintf(str, "%d", output_Tx); // Chuyển giá trị uint8_t thành chuỗi
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	4918      	ldr	r1, [pc, #96]	; (8002404 <task4_function+0x1a0>)
 80023a2:	2408      	movs	r4, #8
 80023a4:	193b      	adds	r3, r7, r4
 80023a6:	0018      	movs	r0, r3
 80023a8:	f003 ff2a 	bl	8006200 <siprintf>
	  TransUart2("OUTPUT4: ");
 80023ac:	4b16      	ldr	r3, [pc, #88]	; (8002408 <task4_function+0x1a4>)
 80023ae:	0018      	movs	r0, r3
 80023b0:	f7ff f966 	bl	8001680 <TransUart2>
	  HAL_UART_Transmit(&huart2, &str, 3, 500);
 80023b4:	23fa      	movs	r3, #250	; 0xfa
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	1939      	adds	r1, r7, r4
 80023ba:	4814      	ldr	r0, [pc, #80]	; (800240c <task4_function+0x1a8>)
 80023bc:	2203      	movs	r2, #3
 80023be:	f002 fa1b 	bl	80047f8 <HAL_UART_Transmit>
	  TransUart2("\n");
 80023c2:	4b13      	ldr	r3, [pc, #76]	; (8002410 <task4_function+0x1ac>)
 80023c4:	0018      	movs	r0, r3
 80023c6:	f7ff f95b 	bl	8001680 <TransUart2>
  {
 80023ca:	e74f      	b.n	800226c <task4_function+0x8>
 80023cc:	200003e0 	.word	0x200003e0
 80023d0:	404e0000 	.word	0x404e0000
 80023d4:	200003f0 	.word	0x200003f0
 80023d8:	20000430 	.word	0x20000430
 80023dc:	2000000c 	.word	0x2000000c
 80023e0:	2000043c 	.word	0x2000043c
 80023e4:	20000438 	.word	0x20000438
 80023e8:	20000000 	.word	0x20000000
 80023ec:	20000004 	.word	0x20000004
 80023f0:	20000008 	.word	0x20000008
 80023f4:	20000434 	.word	0x20000434
 80023f8:	20000440 	.word	0x20000440
 80023fc:	42c80000 	.word	0x42c80000
 8002400:	200002f4 	.word	0x200002f4
 8002404:	08006cc0 	.word	0x08006cc0
 8002408:	08006cec 	.word	0x08006cec
 800240c:	2000033c 	.word	0x2000033c
 8002410:	08006cd0 	.word	0x08006cd0

08002414 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a04      	ldr	r2, [pc, #16]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d101      	bne.n	800242a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002426:	f000 fa07 	bl	8002838 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	46bd      	mov	sp, r7
 800242e:	b002      	add	sp, #8
 8002430:	bd80      	pop	{r7, pc}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	40002000 	.word	0x40002000

08002438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800243c:	b672      	cpsid	i
}
 800243e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002440:	e7fe      	b.n	8002440 <Error_Handler+0x8>
	...

08002444 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800244a:	4b12      	ldr	r3, [pc, #72]	; (8002494 <HAL_MspInit+0x50>)
 800244c:	699a      	ldr	r2, [r3, #24]
 800244e:	4b11      	ldr	r3, [pc, #68]	; (8002494 <HAL_MspInit+0x50>)
 8002450:	2101      	movs	r1, #1
 8002452:	430a      	orrs	r2, r1
 8002454:	619a      	str	r2, [r3, #24]
 8002456:	4b0f      	ldr	r3, [pc, #60]	; (8002494 <HAL_MspInit+0x50>)
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	2201      	movs	r2, #1
 800245c:	4013      	ands	r3, r2
 800245e:	607b      	str	r3, [r7, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002462:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <HAL_MspInit+0x50>)
 8002464:	69da      	ldr	r2, [r3, #28]
 8002466:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <HAL_MspInit+0x50>)
 8002468:	2180      	movs	r1, #128	; 0x80
 800246a:	0549      	lsls	r1, r1, #21
 800246c:	430a      	orrs	r2, r1
 800246e:	61da      	str	r2, [r3, #28]
 8002470:	4b08      	ldr	r3, [pc, #32]	; (8002494 <HAL_MspInit+0x50>)
 8002472:	69da      	ldr	r2, [r3, #28]
 8002474:	2380      	movs	r3, #128	; 0x80
 8002476:	055b      	lsls	r3, r3, #21
 8002478:	4013      	ands	r3, r2
 800247a:	603b      	str	r3, [r7, #0]
 800247c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800247e:	2302      	movs	r3, #2
 8002480:	425b      	negs	r3, r3
 8002482:	2200      	movs	r2, #0
 8002484:	2103      	movs	r1, #3
 8002486:	0018      	movs	r0, r3
 8002488:	f000 fa9e 	bl	80029c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800248c:	46c0      	nop			; (mov r8, r8)
 800248e:	46bd      	mov	sp, r7
 8002490:	b002      	add	sp, #8
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40021000 	.word	0x40021000

08002498 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a0a      	ldr	r2, [pc, #40]	; (80024d0 <HAL_TIM_Base_MspInit+0x38>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d10d      	bne.n	80024c6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024aa:	4b0a      	ldr	r3, [pc, #40]	; (80024d4 <HAL_TIM_Base_MspInit+0x3c>)
 80024ac:	699a      	ldr	r2, [r3, #24]
 80024ae:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <HAL_TIM_Base_MspInit+0x3c>)
 80024b0:	2180      	movs	r1, #128	; 0x80
 80024b2:	0109      	lsls	r1, r1, #4
 80024b4:	430a      	orrs	r2, r1
 80024b6:	619a      	str	r2, [r3, #24]
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_TIM_Base_MspInit+0x3c>)
 80024ba:	699a      	ldr	r2, [r3, #24]
 80024bc:	2380      	movs	r3, #128	; 0x80
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	4013      	ands	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	46bd      	mov	sp, r7
 80024ca:	b004      	add	sp, #16
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	40012c00 	.word	0x40012c00
 80024d4:	40021000 	.word	0x40021000

080024d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024d8:	b590      	push	{r4, r7, lr}
 80024da:	b089      	sub	sp, #36	; 0x24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e0:	240c      	movs	r4, #12
 80024e2:	193b      	adds	r3, r7, r4
 80024e4:	0018      	movs	r0, r3
 80024e6:	2314      	movs	r3, #20
 80024e8:	001a      	movs	r2, r3
 80024ea:	2100      	movs	r1, #0
 80024ec:	f003 fe7f 	bl	80061ee <memset>
  if(htim->Instance==TIM1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a16      	ldr	r2, [pc, #88]	; (8002550 <HAL_TIM_MspPostInit+0x78>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d125      	bne.n	8002546 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fa:	4b16      	ldr	r3, [pc, #88]	; (8002554 <HAL_TIM_MspPostInit+0x7c>)
 80024fc:	695a      	ldr	r2, [r3, #20]
 80024fe:	4b15      	ldr	r3, [pc, #84]	; (8002554 <HAL_TIM_MspPostInit+0x7c>)
 8002500:	2180      	movs	r1, #128	; 0x80
 8002502:	0289      	lsls	r1, r1, #10
 8002504:	430a      	orrs	r2, r1
 8002506:	615a      	str	r2, [r3, #20]
 8002508:	4b12      	ldr	r3, [pc, #72]	; (8002554 <HAL_TIM_MspPostInit+0x7c>)
 800250a:	695a      	ldr	r2, [r3, #20]
 800250c:	2380      	movs	r3, #128	; 0x80
 800250e:	029b      	lsls	r3, r3, #10
 8002510:	4013      	ands	r3, r2
 8002512:	60bb      	str	r3, [r7, #8]
 8002514:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002516:	193b      	adds	r3, r7, r4
 8002518:	22f0      	movs	r2, #240	; 0xf0
 800251a:	0112      	lsls	r2, r2, #4
 800251c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251e:	0021      	movs	r1, r4
 8002520:	187b      	adds	r3, r7, r1
 8002522:	2202      	movs	r2, #2
 8002524:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	187b      	adds	r3, r7, r1
 8002528:	2200      	movs	r2, #0
 800252a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252c:	187b      	adds	r3, r7, r1
 800252e:	2200      	movs	r2, #0
 8002530:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002532:	187b      	adds	r3, r7, r1
 8002534:	2202      	movs	r2, #2
 8002536:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002538:	187a      	adds	r2, r7, r1
 800253a:	2390      	movs	r3, #144	; 0x90
 800253c:	05db      	lsls	r3, r3, #23
 800253e:	0011      	movs	r1, r2
 8002540:	0018      	movs	r0, r3
 8002542:	f000 fa67 	bl	8002a14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	46bd      	mov	sp, r7
 800254a:	b009      	add	sp, #36	; 0x24
 800254c:	bd90      	pop	{r4, r7, pc}
 800254e:	46c0      	nop			; (mov r8, r8)
 8002550:	40012c00 	.word	0x40012c00
 8002554:	40021000 	.word	0x40021000

08002558 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002558:	b590      	push	{r4, r7, lr}
 800255a:	b08b      	sub	sp, #44	; 0x2c
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002560:	2414      	movs	r4, #20
 8002562:	193b      	adds	r3, r7, r4
 8002564:	0018      	movs	r0, r3
 8002566:	2314      	movs	r3, #20
 8002568:	001a      	movs	r2, r3
 800256a:	2100      	movs	r1, #0
 800256c:	f003 fe3f 	bl	80061ee <memset>
  if(huart->Instance==USART2)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a1c      	ldr	r2, [pc, #112]	; (80025e8 <HAL_UART_MspInit+0x90>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d132      	bne.n	80025e0 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800257a:	4b1c      	ldr	r3, [pc, #112]	; (80025ec <HAL_UART_MspInit+0x94>)
 800257c:	69da      	ldr	r2, [r3, #28]
 800257e:	4b1b      	ldr	r3, [pc, #108]	; (80025ec <HAL_UART_MspInit+0x94>)
 8002580:	2180      	movs	r1, #128	; 0x80
 8002582:	0289      	lsls	r1, r1, #10
 8002584:	430a      	orrs	r2, r1
 8002586:	61da      	str	r2, [r3, #28]
 8002588:	4b18      	ldr	r3, [pc, #96]	; (80025ec <HAL_UART_MspInit+0x94>)
 800258a:	69da      	ldr	r2, [r3, #28]
 800258c:	2380      	movs	r3, #128	; 0x80
 800258e:	029b      	lsls	r3, r3, #10
 8002590:	4013      	ands	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002596:	4b15      	ldr	r3, [pc, #84]	; (80025ec <HAL_UART_MspInit+0x94>)
 8002598:	695a      	ldr	r2, [r3, #20]
 800259a:	4b14      	ldr	r3, [pc, #80]	; (80025ec <HAL_UART_MspInit+0x94>)
 800259c:	2180      	movs	r1, #128	; 0x80
 800259e:	0289      	lsls	r1, r1, #10
 80025a0:	430a      	orrs	r2, r1
 80025a2:	615a      	str	r2, [r3, #20]
 80025a4:	4b11      	ldr	r3, [pc, #68]	; (80025ec <HAL_UART_MspInit+0x94>)
 80025a6:	695a      	ldr	r2, [r3, #20]
 80025a8:	2380      	movs	r3, #128	; 0x80
 80025aa:	029b      	lsls	r3, r3, #10
 80025ac:	4013      	ands	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025b2:	0021      	movs	r1, r4
 80025b4:	187b      	adds	r3, r7, r1
 80025b6:	220c      	movs	r2, #12
 80025b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ba:	187b      	adds	r3, r7, r1
 80025bc:	2202      	movs	r2, #2
 80025be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c0:	187b      	adds	r3, r7, r1
 80025c2:	2200      	movs	r2, #0
 80025c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025c6:	187b      	adds	r3, r7, r1
 80025c8:	2203      	movs	r2, #3
 80025ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80025cc:	187b      	adds	r3, r7, r1
 80025ce:	2201      	movs	r2, #1
 80025d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d2:	187a      	adds	r2, r7, r1
 80025d4:	2390      	movs	r3, #144	; 0x90
 80025d6:	05db      	lsls	r3, r3, #23
 80025d8:	0011      	movs	r1, r2
 80025da:	0018      	movs	r0, r3
 80025dc:	f000 fa1a 	bl	8002a14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025e0:	46c0      	nop			; (mov r8, r8)
 80025e2:	46bd      	mov	sp, r7
 80025e4:	b00b      	add	sp, #44	; 0x2c
 80025e6:	bd90      	pop	{r4, r7, pc}
 80025e8:	40004400 	.word	0x40004400
 80025ec:	40021000 	.word	0x40021000

080025f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025f0:	b5b0      	push	{r4, r5, r7, lr}
 80025f2:	b08c      	sub	sp, #48	; 0x30
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t              uwPrescalerValue = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8002600:	4b38      	ldr	r3, [pc, #224]	; (80026e4 <HAL_InitTick+0xf4>)
 8002602:	69da      	ldr	r2, [r3, #28]
 8002604:	4b37      	ldr	r3, [pc, #220]	; (80026e4 <HAL_InitTick+0xf4>)
 8002606:	2180      	movs	r1, #128	; 0x80
 8002608:	0049      	lsls	r1, r1, #1
 800260a:	430a      	orrs	r2, r1
 800260c:	61da      	str	r2, [r3, #28]
 800260e:	4b35      	ldr	r3, [pc, #212]	; (80026e4 <HAL_InitTick+0xf4>)
 8002610:	69da      	ldr	r2, [r3, #28]
 8002612:	2380      	movs	r3, #128	; 0x80
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4013      	ands	r3, r2
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800261c:	230c      	movs	r3, #12
 800261e:	18fa      	adds	r2, r7, r3
 8002620:	2410      	movs	r4, #16
 8002622:	193b      	adds	r3, r7, r4
 8002624:	0011      	movs	r1, r2
 8002626:	0018      	movs	r0, r3
 8002628:	f000 fffc 	bl	8003624 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800262c:	193b      	adds	r3, r7, r4
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	2b00      	cmp	r3, #0
 8002636:	d104      	bne.n	8002642 <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002638:	f000 ffde 	bl	80035f8 <HAL_RCC_GetPCLK1Freq>
 800263c:	0003      	movs	r3, r0
 800263e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002640:	e004      	b.n	800264c <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002642:	f000 ffd9 	bl	80035f8 <HAL_RCC_GetPCLK1Freq>
 8002646:	0003      	movs	r3, r0
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800264c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264e:	4926      	ldr	r1, [pc, #152]	; (80026e8 <HAL_InitTick+0xf8>)
 8002650:	0018      	movs	r0, r3
 8002652:	f7fd fd63 	bl	800011c <__udivsi3>
 8002656:	0003      	movs	r3, r0
 8002658:	3b01      	subs	r3, #1
 800265a:	623b      	str	r3, [r7, #32]

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800265c:	4b23      	ldr	r3, [pc, #140]	; (80026ec <HAL_InitTick+0xfc>)
 800265e:	4a24      	ldr	r2, [pc, #144]	; (80026f0 <HAL_InitTick+0x100>)
 8002660:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8002662:	4b22      	ldr	r3, [pc, #136]	; (80026ec <HAL_InitTick+0xfc>)
 8002664:	4a23      	ldr	r2, [pc, #140]	; (80026f4 <HAL_InitTick+0x104>)
 8002666:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8002668:	4b20      	ldr	r3, [pc, #128]	; (80026ec <HAL_InitTick+0xfc>)
 800266a:	6a3a      	ldr	r2, [r7, #32]
 800266c:	605a      	str	r2, [r3, #4]
  htim14.Init.ClockDivision = 0;
 800266e:	4b1f      	ldr	r3, [pc, #124]	; (80026ec <HAL_InitTick+0xfc>)
 8002670:	2200      	movs	r2, #0
 8002672:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002674:	4b1d      	ldr	r3, [pc, #116]	; (80026ec <HAL_InitTick+0xfc>)
 8002676:	2200      	movs	r2, #0
 8002678:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800267a:	4b1c      	ldr	r3, [pc, #112]	; (80026ec <HAL_InitTick+0xfc>)
 800267c:	2200      	movs	r2, #0
 800267e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8002680:	252b      	movs	r5, #43	; 0x2b
 8002682:	197c      	adds	r4, r7, r5
 8002684:	4b19      	ldr	r3, [pc, #100]	; (80026ec <HAL_InitTick+0xfc>)
 8002686:	0018      	movs	r0, r3
 8002688:	f000 fff6 	bl	8003678 <HAL_TIM_Base_Init>
 800268c:	0003      	movs	r3, r0
 800268e:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8002690:	197b      	adds	r3, r7, r5
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d11e      	bne.n	80026d6 <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8002698:	197c      	adds	r4, r7, r5
 800269a:	4b14      	ldr	r3, [pc, #80]	; (80026ec <HAL_InitTick+0xfc>)
 800269c:	0018      	movs	r0, r3
 800269e:	f001 f83b 	bl	8003718 <HAL_TIM_Base_Start_IT>
 80026a2:	0003      	movs	r3, r0
 80026a4:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80026a6:	197b      	adds	r3, r7, r5
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d113      	bne.n	80026d6 <HAL_InitTick+0xe6>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80026ae:	2013      	movs	r0, #19
 80026b0:	f000 f99f 	bl	80029f2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d809      	bhi.n	80026ce <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM14_IRQn, TickPriority, 0U);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	0019      	movs	r1, r3
 80026c0:	2013      	movs	r0, #19
 80026c2:	f000 f981 	bl	80029c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026c6:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <HAL_InitTick+0x108>)
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	e003      	b.n	80026d6 <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 80026ce:	232b      	movs	r3, #43	; 0x2b
 80026d0:	18fb      	adds	r3, r7, r3
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80026d6:	232b      	movs	r3, #43	; 0x2b
 80026d8:	18fb      	adds	r3, r7, r3
 80026da:	781b      	ldrb	r3, [r3, #0]
}
 80026dc:	0018      	movs	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	b00c      	add	sp, #48	; 0x30
 80026e2:	bdb0      	pop	{r4, r5, r7, pc}
 80026e4:	40021000 	.word	0x40021000
 80026e8:	000f4240 	.word	0x000f4240
 80026ec:	20000444 	.word	0x20000444
 80026f0:	40002000 	.word	0x40002000
 80026f4:	000003e7 	.word	0x000003e7
 80026f8:	20000014 	.word	0x20000014

080026fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002700:	e7fe      	b.n	8002700 <NMI_Handler+0x4>

08002702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002706:	e7fe      	b.n	8002706 <HardFault_Handler+0x4>

08002708 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800270c:	2010      	movs	r0, #16
 800270e:	f000 fb0f 	bl	8002d30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002712:	2020      	movs	r0, #32
 8002714:	f000 fb0c 	bl	8002d30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002718:	2040      	movs	r0, #64	; 0x40
 800271a:	f000 fb09 	bl	8002d30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800271e:	2080      	movs	r0, #128	; 0x80
 8002720:	f000 fb06 	bl	8002d30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002724:	46c0      	nop			; (mov r8, r8)
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002730:	4b03      	ldr	r3, [pc, #12]	; (8002740 <TIM14_IRQHandler+0x14>)
 8002732:	0018      	movs	r0, r3
 8002734:	f001 f946 	bl	80039c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8002738:	46c0      	nop			; (mov r8, r8)
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	46c0      	nop			; (mov r8, r8)
 8002740:	20000444 	.word	0x20000444

08002744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800274c:	4a14      	ldr	r2, [pc, #80]	; (80027a0 <_sbrk+0x5c>)
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <_sbrk+0x60>)
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002758:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <_sbrk+0x64>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d102      	bne.n	8002766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002760:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <_sbrk+0x64>)
 8002762:	4a12      	ldr	r2, [pc, #72]	; (80027ac <_sbrk+0x68>)
 8002764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002766:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <_sbrk+0x64>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	18d3      	adds	r3, r2, r3
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	429a      	cmp	r2, r3
 8002772:	d207      	bcs.n	8002784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002774:	f003 fd08 	bl	8006188 <__errno>
 8002778:	0003      	movs	r3, r0
 800277a:	220c      	movs	r2, #12
 800277c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800277e:	2301      	movs	r3, #1
 8002780:	425b      	negs	r3, r3
 8002782:	e009      	b.n	8002798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002784:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <_sbrk+0x64>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800278a:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <_sbrk+0x64>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	18d2      	adds	r2, r2, r3
 8002792:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <_sbrk+0x64>)
 8002794:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002796:	68fb      	ldr	r3, [r7, #12]
}
 8002798:	0018      	movs	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	b006      	add	sp, #24
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20002000 	.word	0x20002000
 80027a4:	00000400 	.word	0x00000400
 80027a8:	2000048c 	.word	0x2000048c
 80027ac:	200011e8 	.word	0x200011e8

080027b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80027b4:	46c0      	nop			; (mov r8, r8)
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027bc:	480d      	ldr	r0, [pc, #52]	; (80027f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027be:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80027c0:	f7ff fff6 	bl	80027b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027c4:	480c      	ldr	r0, [pc, #48]	; (80027f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80027c6:	490d      	ldr	r1, [pc, #52]	; (80027fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80027c8:	4a0d      	ldr	r2, [pc, #52]	; (8002800 <LoopForever+0xe>)
  movs r3, #0
 80027ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027cc:	e002      	b.n	80027d4 <LoopCopyDataInit>

080027ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027d2:	3304      	adds	r3, #4

080027d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027d8:	d3f9      	bcc.n	80027ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027da:	4a0a      	ldr	r2, [pc, #40]	; (8002804 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027dc:	4c0a      	ldr	r4, [pc, #40]	; (8002808 <LoopForever+0x16>)
  movs r3, #0
 80027de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027e0:	e001      	b.n	80027e6 <LoopFillZerobss>

080027e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027e4:	3204      	adds	r2, #4

080027e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027e8:	d3fb      	bcc.n	80027e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80027ea:	f003 fcd3 	bl	8006194 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027ee:	f7fe ffdd 	bl	80017ac <main>

080027f2 <LoopForever>:

LoopForever:
    b LoopForever
 80027f2:	e7fe      	b.n	80027f2 <LoopForever>
  ldr   r0, =_estack
 80027f4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80027f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027fc:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002800:	08006ef4 	.word	0x08006ef4
  ldr r2, =_sbss
 8002804:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8002808:	200011e8 	.word	0x200011e8

0800280c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800280c:	e7fe      	b.n	800280c <ADC1_IRQHandler>
	...

08002810 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002814:	4b07      	ldr	r3, [pc, #28]	; (8002834 <HAL_Init+0x24>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4b06      	ldr	r3, [pc, #24]	; (8002834 <HAL_Init+0x24>)
 800281a:	2110      	movs	r1, #16
 800281c:	430a      	orrs	r2, r1
 800281e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002820:	2003      	movs	r0, #3
 8002822:	f7ff fee5 	bl	80025f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002826:	f7ff fe0d 	bl	8002444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	0018      	movs	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	40022000 	.word	0x40022000

08002838 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_IncTick+0x1c>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	001a      	movs	r2, r3
 8002842:	4b05      	ldr	r3, [pc, #20]	; (8002858 <HAL_IncTick+0x20>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	18d2      	adds	r2, r2, r3
 8002848:	4b03      	ldr	r3, [pc, #12]	; (8002858 <HAL_IncTick+0x20>)
 800284a:	601a      	str	r2, [r3, #0]
}
 800284c:	46c0      	nop			; (mov r8, r8)
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	20000018 	.word	0x20000018
 8002858:	20000490 	.word	0x20000490

0800285c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  return uwTick;
 8002860:	4b02      	ldr	r3, [pc, #8]	; (800286c <HAL_GetTick+0x10>)
 8002862:	681b      	ldr	r3, [r3, #0]
}
 8002864:	0018      	movs	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	20000490 	.word	0x20000490

08002870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002878:	f7ff fff0 	bl	800285c <HAL_GetTick>
 800287c:	0003      	movs	r3, r0
 800287e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	3301      	adds	r3, #1
 8002888:	d005      	beq.n	8002896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800288a:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <HAL_Delay+0x44>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	001a      	movs	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	189b      	adds	r3, r3, r2
 8002894:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	f7ff ffe0 	bl	800285c <HAL_GetTick>
 800289c:	0002      	movs	r2, r0
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d8f7      	bhi.n	8002898 <HAL_Delay+0x28>
  {
  }
}
 80028a8:	46c0      	nop			; (mov r8, r8)
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	46bd      	mov	sp, r7
 80028ae:	b004      	add	sp, #16
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	46c0      	nop			; (mov r8, r8)
 80028b4:	20000018 	.word	0x20000018

080028b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	0002      	movs	r2, r0
 80028c0:	1dfb      	adds	r3, r7, #7
 80028c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80028c4:	1dfb      	adds	r3, r7, #7
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b7f      	cmp	r3, #127	; 0x7f
 80028ca:	d809      	bhi.n	80028e0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028cc:	1dfb      	adds	r3, r7, #7
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	001a      	movs	r2, r3
 80028d2:	231f      	movs	r3, #31
 80028d4:	401a      	ands	r2, r3
 80028d6:	4b04      	ldr	r3, [pc, #16]	; (80028e8 <__NVIC_EnableIRQ+0x30>)
 80028d8:	2101      	movs	r1, #1
 80028da:	4091      	lsls	r1, r2
 80028dc:	000a      	movs	r2, r1
 80028de:	601a      	str	r2, [r3, #0]
  }
}
 80028e0:	46c0      	nop			; (mov r8, r8)
 80028e2:	46bd      	mov	sp, r7
 80028e4:	b002      	add	sp, #8
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	e000e100 	.word	0xe000e100

080028ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028ec:	b590      	push	{r4, r7, lr}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	0002      	movs	r2, r0
 80028f4:	6039      	str	r1, [r7, #0]
 80028f6:	1dfb      	adds	r3, r7, #7
 80028f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80028fa:	1dfb      	adds	r3, r7, #7
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b7f      	cmp	r3, #127	; 0x7f
 8002900:	d828      	bhi.n	8002954 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002902:	4a2f      	ldr	r2, [pc, #188]	; (80029c0 <__NVIC_SetPriority+0xd4>)
 8002904:	1dfb      	adds	r3, r7, #7
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	b25b      	sxtb	r3, r3
 800290a:	089b      	lsrs	r3, r3, #2
 800290c:	33c0      	adds	r3, #192	; 0xc0
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	589b      	ldr	r3, [r3, r2]
 8002912:	1dfa      	adds	r2, r7, #7
 8002914:	7812      	ldrb	r2, [r2, #0]
 8002916:	0011      	movs	r1, r2
 8002918:	2203      	movs	r2, #3
 800291a:	400a      	ands	r2, r1
 800291c:	00d2      	lsls	r2, r2, #3
 800291e:	21ff      	movs	r1, #255	; 0xff
 8002920:	4091      	lsls	r1, r2
 8002922:	000a      	movs	r2, r1
 8002924:	43d2      	mvns	r2, r2
 8002926:	401a      	ands	r2, r3
 8002928:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	019b      	lsls	r3, r3, #6
 800292e:	22ff      	movs	r2, #255	; 0xff
 8002930:	401a      	ands	r2, r3
 8002932:	1dfb      	adds	r3, r7, #7
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	0018      	movs	r0, r3
 8002938:	2303      	movs	r3, #3
 800293a:	4003      	ands	r3, r0
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002940:	481f      	ldr	r0, [pc, #124]	; (80029c0 <__NVIC_SetPriority+0xd4>)
 8002942:	1dfb      	adds	r3, r7, #7
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	b25b      	sxtb	r3, r3
 8002948:	089b      	lsrs	r3, r3, #2
 800294a:	430a      	orrs	r2, r1
 800294c:	33c0      	adds	r3, #192	; 0xc0
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002952:	e031      	b.n	80029b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002954:	4a1b      	ldr	r2, [pc, #108]	; (80029c4 <__NVIC_SetPriority+0xd8>)
 8002956:	1dfb      	adds	r3, r7, #7
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	0019      	movs	r1, r3
 800295c:	230f      	movs	r3, #15
 800295e:	400b      	ands	r3, r1
 8002960:	3b08      	subs	r3, #8
 8002962:	089b      	lsrs	r3, r3, #2
 8002964:	3306      	adds	r3, #6
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	18d3      	adds	r3, r2, r3
 800296a:	3304      	adds	r3, #4
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	1dfa      	adds	r2, r7, #7
 8002970:	7812      	ldrb	r2, [r2, #0]
 8002972:	0011      	movs	r1, r2
 8002974:	2203      	movs	r2, #3
 8002976:	400a      	ands	r2, r1
 8002978:	00d2      	lsls	r2, r2, #3
 800297a:	21ff      	movs	r1, #255	; 0xff
 800297c:	4091      	lsls	r1, r2
 800297e:	000a      	movs	r2, r1
 8002980:	43d2      	mvns	r2, r2
 8002982:	401a      	ands	r2, r3
 8002984:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	019b      	lsls	r3, r3, #6
 800298a:	22ff      	movs	r2, #255	; 0xff
 800298c:	401a      	ands	r2, r3
 800298e:	1dfb      	adds	r3, r7, #7
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	0018      	movs	r0, r3
 8002994:	2303      	movs	r3, #3
 8002996:	4003      	ands	r3, r0
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800299c:	4809      	ldr	r0, [pc, #36]	; (80029c4 <__NVIC_SetPriority+0xd8>)
 800299e:	1dfb      	adds	r3, r7, #7
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	001c      	movs	r4, r3
 80029a4:	230f      	movs	r3, #15
 80029a6:	4023      	ands	r3, r4
 80029a8:	3b08      	subs	r3, #8
 80029aa:	089b      	lsrs	r3, r3, #2
 80029ac:	430a      	orrs	r2, r1
 80029ae:	3306      	adds	r3, #6
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	18c3      	adds	r3, r0, r3
 80029b4:	3304      	adds	r3, #4
 80029b6:	601a      	str	r2, [r3, #0]
}
 80029b8:	46c0      	nop			; (mov r8, r8)
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b003      	add	sp, #12
 80029be:	bd90      	pop	{r4, r7, pc}
 80029c0:	e000e100 	.word	0xe000e100
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	607a      	str	r2, [r7, #4]
 80029d2:	210f      	movs	r1, #15
 80029d4:	187b      	adds	r3, r7, r1
 80029d6:	1c02      	adds	r2, r0, #0
 80029d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	187b      	adds	r3, r7, r1
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	b25b      	sxtb	r3, r3
 80029e2:	0011      	movs	r1, r2
 80029e4:	0018      	movs	r0, r3
 80029e6:	f7ff ff81 	bl	80028ec <__NVIC_SetPriority>
}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b004      	add	sp, #16
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	0002      	movs	r2, r0
 80029fa:	1dfb      	adds	r3, r7, #7
 80029fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029fe:	1dfb      	adds	r3, r7, #7
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	b25b      	sxtb	r3, r3
 8002a04:	0018      	movs	r0, r3
 8002a06:	f7ff ff57 	bl	80028b8 <__NVIC_EnableIRQ>
}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	b002      	add	sp, #8
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a22:	e14f      	b.n	8002cc4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2101      	movs	r1, #1
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4091      	lsls	r1, r2
 8002a2e:	000a      	movs	r2, r1
 8002a30:	4013      	ands	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d100      	bne.n	8002a3c <HAL_GPIO_Init+0x28>
 8002a3a:	e140      	b.n	8002cbe <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2203      	movs	r2, #3
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d005      	beq.n	8002a54 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d130      	bne.n	8002ab6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	2203      	movs	r2, #3
 8002a60:	409a      	lsls	r2, r3
 8002a62:	0013      	movs	r3, r2
 8002a64:	43da      	mvns	r2, r3
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	68da      	ldr	r2, [r3, #12]
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	409a      	lsls	r2, r3
 8002a76:	0013      	movs	r3, r2
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	409a      	lsls	r2, r3
 8002a90:	0013      	movs	r3, r2
 8002a92:	43da      	mvns	r2, r3
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4013      	ands	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	091b      	lsrs	r3, r3, #4
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	401a      	ands	r2, r3
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	409a      	lsls	r2, r3
 8002aa8:	0013      	movs	r3, r2
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2203      	movs	r2, #3
 8002abc:	4013      	ands	r3, r2
 8002abe:	2b03      	cmp	r3, #3
 8002ac0:	d017      	beq.n	8002af2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	2203      	movs	r2, #3
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	0013      	movs	r3, r2
 8002ad2:	43da      	mvns	r2, r3
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	0013      	movs	r3, r2
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2203      	movs	r2, #3
 8002af8:	4013      	ands	r3, r2
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d123      	bne.n	8002b46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	08da      	lsrs	r2, r3, #3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	3208      	adds	r2, #8
 8002b06:	0092      	lsls	r2, r2, #2
 8002b08:	58d3      	ldr	r3, [r2, r3]
 8002b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	2207      	movs	r2, #7
 8002b10:	4013      	ands	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	220f      	movs	r2, #15
 8002b16:	409a      	lsls	r2, r3
 8002b18:	0013      	movs	r3, r2
 8002b1a:	43da      	mvns	r2, r3
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	691a      	ldr	r2, [r3, #16]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2107      	movs	r1, #7
 8002b2a:	400b      	ands	r3, r1
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	409a      	lsls	r2, r3
 8002b30:	0013      	movs	r3, r2
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	08da      	lsrs	r2, r3, #3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3208      	adds	r2, #8
 8002b40:	0092      	lsls	r2, r2, #2
 8002b42:	6939      	ldr	r1, [r7, #16]
 8002b44:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	2203      	movs	r2, #3
 8002b52:	409a      	lsls	r2, r3
 8002b54:	0013      	movs	r3, r2
 8002b56:	43da      	mvns	r2, r3
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2203      	movs	r2, #3
 8002b64:	401a      	ands	r2, r3
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	409a      	lsls	r2, r3
 8002b6c:	0013      	movs	r3, r2
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	23c0      	movs	r3, #192	; 0xc0
 8002b80:	029b      	lsls	r3, r3, #10
 8002b82:	4013      	ands	r3, r2
 8002b84:	d100      	bne.n	8002b88 <HAL_GPIO_Init+0x174>
 8002b86:	e09a      	b.n	8002cbe <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b88:	4b54      	ldr	r3, [pc, #336]	; (8002cdc <HAL_GPIO_Init+0x2c8>)
 8002b8a:	699a      	ldr	r2, [r3, #24]
 8002b8c:	4b53      	ldr	r3, [pc, #332]	; (8002cdc <HAL_GPIO_Init+0x2c8>)
 8002b8e:	2101      	movs	r1, #1
 8002b90:	430a      	orrs	r2, r1
 8002b92:	619a      	str	r2, [r3, #24]
 8002b94:	4b51      	ldr	r3, [pc, #324]	; (8002cdc <HAL_GPIO_Init+0x2c8>)
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ba0:	4a4f      	ldr	r2, [pc, #316]	; (8002ce0 <HAL_GPIO_Init+0x2cc>)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	089b      	lsrs	r3, r3, #2
 8002ba6:	3302      	adds	r3, #2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	589b      	ldr	r3, [r3, r2]
 8002bac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	220f      	movs	r2, #15
 8002bb8:	409a      	lsls	r2, r3
 8002bba:	0013      	movs	r3, r2
 8002bbc:	43da      	mvns	r2, r3
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	2390      	movs	r3, #144	; 0x90
 8002bc8:	05db      	lsls	r3, r3, #23
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d013      	beq.n	8002bf6 <HAL_GPIO_Init+0x1e2>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a44      	ldr	r2, [pc, #272]	; (8002ce4 <HAL_GPIO_Init+0x2d0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d00d      	beq.n	8002bf2 <HAL_GPIO_Init+0x1de>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a43      	ldr	r2, [pc, #268]	; (8002ce8 <HAL_GPIO_Init+0x2d4>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d007      	beq.n	8002bee <HAL_GPIO_Init+0x1da>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a42      	ldr	r2, [pc, #264]	; (8002cec <HAL_GPIO_Init+0x2d8>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d101      	bne.n	8002bea <HAL_GPIO_Init+0x1d6>
 8002be6:	2303      	movs	r3, #3
 8002be8:	e006      	b.n	8002bf8 <HAL_GPIO_Init+0x1e4>
 8002bea:	2305      	movs	r3, #5
 8002bec:	e004      	b.n	8002bf8 <HAL_GPIO_Init+0x1e4>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e002      	b.n	8002bf8 <HAL_GPIO_Init+0x1e4>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <HAL_GPIO_Init+0x1e4>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	2103      	movs	r1, #3
 8002bfc:	400a      	ands	r2, r1
 8002bfe:	0092      	lsls	r2, r2, #2
 8002c00:	4093      	lsls	r3, r2
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c08:	4935      	ldr	r1, [pc, #212]	; (8002ce0 <HAL_GPIO_Init+0x2cc>)
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	089b      	lsrs	r3, r3, #2
 8002c0e:	3302      	adds	r3, #2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c16:	4b36      	ldr	r3, [pc, #216]	; (8002cf0 <HAL_GPIO_Init+0x2dc>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	43da      	mvns	r2, r3
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	4013      	ands	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	2380      	movs	r3, #128	; 0x80
 8002c2c:	035b      	lsls	r3, r3, #13
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d003      	beq.n	8002c3a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c3a:	4b2d      	ldr	r3, [pc, #180]	; (8002cf0 <HAL_GPIO_Init+0x2dc>)
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002c40:	4b2b      	ldr	r3, [pc, #172]	; (8002cf0 <HAL_GPIO_Init+0x2dc>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	43da      	mvns	r2, r3
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	2380      	movs	r3, #128	; 0x80
 8002c56:	039b      	lsls	r3, r3, #14
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d003      	beq.n	8002c64 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002c64:	4b22      	ldr	r3, [pc, #136]	; (8002cf0 <HAL_GPIO_Init+0x2dc>)
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002c6a:	4b21      	ldr	r3, [pc, #132]	; (8002cf0 <HAL_GPIO_Init+0x2dc>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	43da      	mvns	r2, r3
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	4013      	ands	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	2380      	movs	r3, #128	; 0x80
 8002c80:	029b      	lsls	r3, r3, #10
 8002c82:	4013      	ands	r3, r2
 8002c84:	d003      	beq.n	8002c8e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c8e:	4b18      	ldr	r3, [pc, #96]	; (8002cf0 <HAL_GPIO_Init+0x2dc>)
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002c94:	4b16      	ldr	r3, [pc, #88]	; (8002cf0 <HAL_GPIO_Init+0x2dc>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	43da      	mvns	r2, r3
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	2380      	movs	r3, #128	; 0x80
 8002caa:	025b      	lsls	r3, r3, #9
 8002cac:	4013      	ands	r3, r2
 8002cae:	d003      	beq.n	8002cb8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002cb8:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <HAL_GPIO_Init+0x2dc>)
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	40da      	lsrs	r2, r3
 8002ccc:	1e13      	subs	r3, r2, #0
 8002cce:	d000      	beq.n	8002cd2 <HAL_GPIO_Init+0x2be>
 8002cd0:	e6a8      	b.n	8002a24 <HAL_GPIO_Init+0x10>
  } 
}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	46c0      	nop			; (mov r8, r8)
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	b006      	add	sp, #24
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40010000 	.word	0x40010000
 8002ce4:	48000400 	.word	0x48000400
 8002ce8:	48000800 	.word	0x48000800
 8002cec:	48000c00 	.word	0x48000c00
 8002cf0:	40010400 	.word	0x40010400

08002cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	0008      	movs	r0, r1
 8002cfe:	0011      	movs	r1, r2
 8002d00:	1cbb      	adds	r3, r7, #2
 8002d02:	1c02      	adds	r2, r0, #0
 8002d04:	801a      	strh	r2, [r3, #0]
 8002d06:	1c7b      	adds	r3, r7, #1
 8002d08:	1c0a      	adds	r2, r1, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d0c:	1c7b      	adds	r3, r7, #1
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d004      	beq.n	8002d1e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d14:	1cbb      	adds	r3, r7, #2
 8002d16:	881a      	ldrh	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d1c:	e003      	b.n	8002d26 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d1e:	1cbb      	adds	r3, r7, #2
 8002d20:	881a      	ldrh	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b002      	add	sp, #8
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	0002      	movs	r2, r0
 8002d38:	1dbb      	adds	r3, r7, #6
 8002d3a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d3c:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	1dba      	adds	r2, r7, #6
 8002d42:	8812      	ldrh	r2, [r2, #0]
 8002d44:	4013      	ands	r3, r2
 8002d46:	d008      	beq.n	8002d5a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d48:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002d4a:	1dba      	adds	r2, r7, #6
 8002d4c:	8812      	ldrh	r2, [r2, #0]
 8002d4e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d50:	1dbb      	adds	r3, r7, #6
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	0018      	movs	r0, r3
 8002d56:	f7fe fcf3 	bl	8001740 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	b002      	add	sp, #8
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	40010400 	.word	0x40010400

08002d68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e301      	b.n	800337e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	4013      	ands	r3, r2
 8002d82:	d100      	bne.n	8002d86 <HAL_RCC_OscConfig+0x1e>
 8002d84:	e08d      	b.n	8002ea2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d86:	4bc3      	ldr	r3, [pc, #780]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	220c      	movs	r2, #12
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d00e      	beq.n	8002db0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d92:	4bc0      	ldr	r3, [pc, #768]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	220c      	movs	r2, #12
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d116      	bne.n	8002dcc <HAL_RCC_OscConfig+0x64>
 8002d9e:	4bbd      	ldr	r3, [pc, #756]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	2380      	movs	r3, #128	; 0x80
 8002da4:	025b      	lsls	r3, r3, #9
 8002da6:	401a      	ands	r2, r3
 8002da8:	2380      	movs	r3, #128	; 0x80
 8002daa:	025b      	lsls	r3, r3, #9
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d10d      	bne.n	8002dcc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db0:	4bb8      	ldr	r3, [pc, #736]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	2380      	movs	r3, #128	; 0x80
 8002db6:	029b      	lsls	r3, r3, #10
 8002db8:	4013      	ands	r3, r2
 8002dba:	d100      	bne.n	8002dbe <HAL_RCC_OscConfig+0x56>
 8002dbc:	e070      	b.n	8002ea0 <HAL_RCC_OscConfig+0x138>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d000      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x60>
 8002dc6:	e06b      	b.n	8002ea0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e2d8      	b.n	800337e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d107      	bne.n	8002de4 <HAL_RCC_OscConfig+0x7c>
 8002dd4:	4baf      	ldr	r3, [pc, #700]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	4bae      	ldr	r3, [pc, #696]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002dda:	2180      	movs	r1, #128	; 0x80
 8002ddc:	0249      	lsls	r1, r1, #9
 8002dde:	430a      	orrs	r2, r1
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	e02f      	b.n	8002e44 <HAL_RCC_OscConfig+0xdc>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10c      	bne.n	8002e06 <HAL_RCC_OscConfig+0x9e>
 8002dec:	4ba9      	ldr	r3, [pc, #676]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	4ba8      	ldr	r3, [pc, #672]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002df2:	49a9      	ldr	r1, [pc, #676]	; (8003098 <HAL_RCC_OscConfig+0x330>)
 8002df4:	400a      	ands	r2, r1
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	4ba6      	ldr	r3, [pc, #664]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	4ba5      	ldr	r3, [pc, #660]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002dfe:	49a7      	ldr	r1, [pc, #668]	; (800309c <HAL_RCC_OscConfig+0x334>)
 8002e00:	400a      	ands	r2, r1
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	e01e      	b.n	8002e44 <HAL_RCC_OscConfig+0xdc>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b05      	cmp	r3, #5
 8002e0c:	d10e      	bne.n	8002e2c <HAL_RCC_OscConfig+0xc4>
 8002e0e:	4ba1      	ldr	r3, [pc, #644]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	4ba0      	ldr	r3, [pc, #640]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002e14:	2180      	movs	r1, #128	; 0x80
 8002e16:	02c9      	lsls	r1, r1, #11
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	4b9d      	ldr	r3, [pc, #628]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	4b9c      	ldr	r3, [pc, #624]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002e22:	2180      	movs	r1, #128	; 0x80
 8002e24:	0249      	lsls	r1, r1, #9
 8002e26:	430a      	orrs	r2, r1
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	e00b      	b.n	8002e44 <HAL_RCC_OscConfig+0xdc>
 8002e2c:	4b99      	ldr	r3, [pc, #612]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	4b98      	ldr	r3, [pc, #608]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002e32:	4999      	ldr	r1, [pc, #612]	; (8003098 <HAL_RCC_OscConfig+0x330>)
 8002e34:	400a      	ands	r2, r1
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	4b96      	ldr	r3, [pc, #600]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	4b95      	ldr	r3, [pc, #596]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002e3e:	4997      	ldr	r1, [pc, #604]	; (800309c <HAL_RCC_OscConfig+0x334>)
 8002e40:	400a      	ands	r2, r1
 8002e42:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d014      	beq.n	8002e76 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4c:	f7ff fd06 	bl	800285c <HAL_GetTick>
 8002e50:	0003      	movs	r3, r0
 8002e52:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e56:	f7ff fd01 	bl	800285c <HAL_GetTick>
 8002e5a:	0002      	movs	r2, r0
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b64      	cmp	r3, #100	; 0x64
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e28a      	b.n	800337e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e68:	4b8a      	ldr	r3, [pc, #552]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	2380      	movs	r3, #128	; 0x80
 8002e6e:	029b      	lsls	r3, r3, #10
 8002e70:	4013      	ands	r3, r2
 8002e72:	d0f0      	beq.n	8002e56 <HAL_RCC_OscConfig+0xee>
 8002e74:	e015      	b.n	8002ea2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e76:	f7ff fcf1 	bl	800285c <HAL_GetTick>
 8002e7a:	0003      	movs	r3, r0
 8002e7c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e80:	f7ff fcec 	bl	800285c <HAL_GetTick>
 8002e84:	0002      	movs	r2, r0
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b64      	cmp	r3, #100	; 0x64
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e275      	b.n	800337e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e92:	4b80      	ldr	r3, [pc, #512]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	029b      	lsls	r3, r3, #10
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d1f0      	bne.n	8002e80 <HAL_RCC_OscConfig+0x118>
 8002e9e:	e000      	b.n	8002ea2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	d100      	bne.n	8002eae <HAL_RCC_OscConfig+0x146>
 8002eac:	e069      	b.n	8002f82 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002eae:	4b79      	ldr	r3, [pc, #484]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	220c      	movs	r2, #12
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	d00b      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002eb8:	4b76      	ldr	r3, [pc, #472]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	220c      	movs	r2, #12
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d11c      	bne.n	8002efe <HAL_RCC_OscConfig+0x196>
 8002ec4:	4b73      	ldr	r3, [pc, #460]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	2380      	movs	r3, #128	; 0x80
 8002eca:	025b      	lsls	r3, r3, #9
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d116      	bne.n	8002efe <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ed0:	4b70      	ldr	r3, [pc, #448]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d005      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x17e>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d001      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e24b      	b.n	800337e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee6:	4b6b      	ldr	r3, [pc, #428]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	22f8      	movs	r2, #248	; 0xf8
 8002eec:	4393      	bics	r3, r2
 8002eee:	0019      	movs	r1, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	00da      	lsls	r2, r3, #3
 8002ef6:	4b67      	ldr	r3, [pc, #412]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002efc:	e041      	b.n	8002f82 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d024      	beq.n	8002f50 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f06:	4b63      	ldr	r3, [pc, #396]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	4b62      	ldr	r3, [pc, #392]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f12:	f7ff fca3 	bl	800285c <HAL_GetTick>
 8002f16:	0003      	movs	r3, r0
 8002f18:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f1c:	f7ff fc9e 	bl	800285c <HAL_GetTick>
 8002f20:	0002      	movs	r2, r0
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e227      	b.n	800337e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f2e:	4b59      	ldr	r3, [pc, #356]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2202      	movs	r2, #2
 8002f34:	4013      	ands	r3, r2
 8002f36:	d0f1      	beq.n	8002f1c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f38:	4b56      	ldr	r3, [pc, #344]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	22f8      	movs	r2, #248	; 0xf8
 8002f3e:	4393      	bics	r3, r2
 8002f40:	0019      	movs	r1, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	00da      	lsls	r2, r3, #3
 8002f48:	4b52      	ldr	r3, [pc, #328]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	e018      	b.n	8002f82 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f50:	4b50      	ldr	r3, [pc, #320]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	4b4f      	ldr	r3, [pc, #316]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002f56:	2101      	movs	r1, #1
 8002f58:	438a      	bics	r2, r1
 8002f5a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5c:	f7ff fc7e 	bl	800285c <HAL_GetTick>
 8002f60:	0003      	movs	r3, r0
 8002f62:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f66:	f7ff fc79 	bl	800285c <HAL_GetTick>
 8002f6a:	0002      	movs	r2, r0
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e202      	b.n	800337e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f78:	4b46      	ldr	r3, [pc, #280]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d1f1      	bne.n	8002f66 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2208      	movs	r2, #8
 8002f88:	4013      	ands	r3, r2
 8002f8a:	d036      	beq.n	8002ffa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d019      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f94:	4b3f      	ldr	r3, [pc, #252]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002f96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f98:	4b3e      	ldr	r3, [pc, #248]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa0:	f7ff fc5c 	bl	800285c <HAL_GetTick>
 8002fa4:	0003      	movs	r3, r0
 8002fa6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002faa:	f7ff fc57 	bl	800285c <HAL_GetTick>
 8002fae:	0002      	movs	r2, r0
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e1e0      	b.n	800337e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fbc:	4b35      	ldr	r3, [pc, #212]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d0f1      	beq.n	8002faa <HAL_RCC_OscConfig+0x242>
 8002fc6:	e018      	b.n	8002ffa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fc8:	4b32      	ldr	r3, [pc, #200]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fcc:	4b31      	ldr	r3, [pc, #196]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002fce:	2101      	movs	r1, #1
 8002fd0:	438a      	bics	r2, r1
 8002fd2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd4:	f7ff fc42 	bl	800285c <HAL_GetTick>
 8002fd8:	0003      	movs	r3, r0
 8002fda:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fde:	f7ff fc3d 	bl	800285c <HAL_GetTick>
 8002fe2:	0002      	movs	r2, r0
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e1c6      	b.n	800337e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff0:	4b28      	ldr	r3, [pc, #160]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d1f1      	bne.n	8002fde <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2204      	movs	r2, #4
 8003000:	4013      	ands	r3, r2
 8003002:	d100      	bne.n	8003006 <HAL_RCC_OscConfig+0x29e>
 8003004:	e0b4      	b.n	8003170 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003006:	201f      	movs	r0, #31
 8003008:	183b      	adds	r3, r7, r0
 800300a:	2200      	movs	r2, #0
 800300c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800300e:	4b21      	ldr	r3, [pc, #132]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8003010:	69da      	ldr	r2, [r3, #28]
 8003012:	2380      	movs	r3, #128	; 0x80
 8003014:	055b      	lsls	r3, r3, #21
 8003016:	4013      	ands	r3, r2
 8003018:	d110      	bne.n	800303c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800301a:	4b1e      	ldr	r3, [pc, #120]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 800301c:	69da      	ldr	r2, [r3, #28]
 800301e:	4b1d      	ldr	r3, [pc, #116]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8003020:	2180      	movs	r1, #128	; 0x80
 8003022:	0549      	lsls	r1, r1, #21
 8003024:	430a      	orrs	r2, r1
 8003026:	61da      	str	r2, [r3, #28]
 8003028:	4b1a      	ldr	r3, [pc, #104]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 800302a:	69da      	ldr	r2, [r3, #28]
 800302c:	2380      	movs	r3, #128	; 0x80
 800302e:	055b      	lsls	r3, r3, #21
 8003030:	4013      	ands	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003036:	183b      	adds	r3, r7, r0
 8003038:	2201      	movs	r2, #1
 800303a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303c:	4b18      	ldr	r3, [pc, #96]	; (80030a0 <HAL_RCC_OscConfig+0x338>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	2380      	movs	r3, #128	; 0x80
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4013      	ands	r3, r2
 8003046:	d11a      	bne.n	800307e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003048:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <HAL_RCC_OscConfig+0x338>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	4b14      	ldr	r3, [pc, #80]	; (80030a0 <HAL_RCC_OscConfig+0x338>)
 800304e:	2180      	movs	r1, #128	; 0x80
 8003050:	0049      	lsls	r1, r1, #1
 8003052:	430a      	orrs	r2, r1
 8003054:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003056:	f7ff fc01 	bl	800285c <HAL_GetTick>
 800305a:	0003      	movs	r3, r0
 800305c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003060:	f7ff fbfc 	bl	800285c <HAL_GetTick>
 8003064:	0002      	movs	r2, r0
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b64      	cmp	r3, #100	; 0x64
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e185      	b.n	800337e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003072:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <HAL_RCC_OscConfig+0x338>)
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	2380      	movs	r3, #128	; 0x80
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	4013      	ands	r3, r2
 800307c:	d0f0      	beq.n	8003060 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d10e      	bne.n	80030a4 <HAL_RCC_OscConfig+0x33c>
 8003086:	4b03      	ldr	r3, [pc, #12]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 8003088:	6a1a      	ldr	r2, [r3, #32]
 800308a:	4b02      	ldr	r3, [pc, #8]	; (8003094 <HAL_RCC_OscConfig+0x32c>)
 800308c:	2101      	movs	r1, #1
 800308e:	430a      	orrs	r2, r1
 8003090:	621a      	str	r2, [r3, #32]
 8003092:	e035      	b.n	8003100 <HAL_RCC_OscConfig+0x398>
 8003094:	40021000 	.word	0x40021000
 8003098:	fffeffff 	.word	0xfffeffff
 800309c:	fffbffff 	.word	0xfffbffff
 80030a0:	40007000 	.word	0x40007000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10c      	bne.n	80030c6 <HAL_RCC_OscConfig+0x35e>
 80030ac:	4bb6      	ldr	r3, [pc, #728]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 80030ae:	6a1a      	ldr	r2, [r3, #32]
 80030b0:	4bb5      	ldr	r3, [pc, #724]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 80030b2:	2101      	movs	r1, #1
 80030b4:	438a      	bics	r2, r1
 80030b6:	621a      	str	r2, [r3, #32]
 80030b8:	4bb3      	ldr	r3, [pc, #716]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 80030ba:	6a1a      	ldr	r2, [r3, #32]
 80030bc:	4bb2      	ldr	r3, [pc, #712]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 80030be:	2104      	movs	r1, #4
 80030c0:	438a      	bics	r2, r1
 80030c2:	621a      	str	r2, [r3, #32]
 80030c4:	e01c      	b.n	8003100 <HAL_RCC_OscConfig+0x398>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	2b05      	cmp	r3, #5
 80030cc:	d10c      	bne.n	80030e8 <HAL_RCC_OscConfig+0x380>
 80030ce:	4bae      	ldr	r3, [pc, #696]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 80030d0:	6a1a      	ldr	r2, [r3, #32]
 80030d2:	4bad      	ldr	r3, [pc, #692]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 80030d4:	2104      	movs	r1, #4
 80030d6:	430a      	orrs	r2, r1
 80030d8:	621a      	str	r2, [r3, #32]
 80030da:	4bab      	ldr	r3, [pc, #684]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 80030dc:	6a1a      	ldr	r2, [r3, #32]
 80030de:	4baa      	ldr	r3, [pc, #680]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 80030e0:	2101      	movs	r1, #1
 80030e2:	430a      	orrs	r2, r1
 80030e4:	621a      	str	r2, [r3, #32]
 80030e6:	e00b      	b.n	8003100 <HAL_RCC_OscConfig+0x398>
 80030e8:	4ba7      	ldr	r3, [pc, #668]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 80030ea:	6a1a      	ldr	r2, [r3, #32]
 80030ec:	4ba6      	ldr	r3, [pc, #664]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 80030ee:	2101      	movs	r1, #1
 80030f0:	438a      	bics	r2, r1
 80030f2:	621a      	str	r2, [r3, #32]
 80030f4:	4ba4      	ldr	r3, [pc, #656]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 80030f6:	6a1a      	ldr	r2, [r3, #32]
 80030f8:	4ba3      	ldr	r3, [pc, #652]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 80030fa:	2104      	movs	r1, #4
 80030fc:	438a      	bics	r2, r1
 80030fe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d014      	beq.n	8003132 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003108:	f7ff fba8 	bl	800285c <HAL_GetTick>
 800310c:	0003      	movs	r3, r0
 800310e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003110:	e009      	b.n	8003126 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003112:	f7ff fba3 	bl	800285c <HAL_GetTick>
 8003116:	0002      	movs	r2, r0
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	4a9b      	ldr	r2, [pc, #620]	; (800338c <HAL_RCC_OscConfig+0x624>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e12b      	b.n	800337e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003126:	4b98      	ldr	r3, [pc, #608]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	2202      	movs	r2, #2
 800312c:	4013      	ands	r3, r2
 800312e:	d0f0      	beq.n	8003112 <HAL_RCC_OscConfig+0x3aa>
 8003130:	e013      	b.n	800315a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003132:	f7ff fb93 	bl	800285c <HAL_GetTick>
 8003136:	0003      	movs	r3, r0
 8003138:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800313a:	e009      	b.n	8003150 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800313c:	f7ff fb8e 	bl	800285c <HAL_GetTick>
 8003140:	0002      	movs	r2, r0
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	4a91      	ldr	r2, [pc, #580]	; (800338c <HAL_RCC_OscConfig+0x624>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e116      	b.n	800337e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003150:	4b8d      	ldr	r3, [pc, #564]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	2202      	movs	r2, #2
 8003156:	4013      	ands	r3, r2
 8003158:	d1f0      	bne.n	800313c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800315a:	231f      	movs	r3, #31
 800315c:	18fb      	adds	r3, r7, r3
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d105      	bne.n	8003170 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003164:	4b88      	ldr	r3, [pc, #544]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 8003166:	69da      	ldr	r2, [r3, #28]
 8003168:	4b87      	ldr	r3, [pc, #540]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 800316a:	4989      	ldr	r1, [pc, #548]	; (8003390 <HAL_RCC_OscConfig+0x628>)
 800316c:	400a      	ands	r2, r1
 800316e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2210      	movs	r2, #16
 8003176:	4013      	ands	r3, r2
 8003178:	d063      	beq.n	8003242 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d12a      	bne.n	80031d8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003182:	4b81      	ldr	r3, [pc, #516]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 8003184:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003186:	4b80      	ldr	r3, [pc, #512]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 8003188:	2104      	movs	r1, #4
 800318a:	430a      	orrs	r2, r1
 800318c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800318e:	4b7e      	ldr	r3, [pc, #504]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 8003190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003192:	4b7d      	ldr	r3, [pc, #500]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 8003194:	2101      	movs	r1, #1
 8003196:	430a      	orrs	r2, r1
 8003198:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800319a:	f7ff fb5f 	bl	800285c <HAL_GetTick>
 800319e:	0003      	movs	r3, r0
 80031a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80031a4:	f7ff fb5a 	bl	800285c <HAL_GetTick>
 80031a8:	0002      	movs	r2, r0
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e0e3      	b.n	800337e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80031b6:	4b74      	ldr	r3, [pc, #464]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 80031b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ba:	2202      	movs	r2, #2
 80031bc:	4013      	ands	r3, r2
 80031be:	d0f1      	beq.n	80031a4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80031c0:	4b71      	ldr	r3, [pc, #452]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 80031c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c4:	22f8      	movs	r2, #248	; 0xf8
 80031c6:	4393      	bics	r3, r2
 80031c8:	0019      	movs	r1, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	00da      	lsls	r2, r3, #3
 80031d0:	4b6d      	ldr	r3, [pc, #436]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 80031d2:	430a      	orrs	r2, r1
 80031d4:	635a      	str	r2, [r3, #52]	; 0x34
 80031d6:	e034      	b.n	8003242 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	3305      	adds	r3, #5
 80031de:	d111      	bne.n	8003204 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80031e0:	4b69      	ldr	r3, [pc, #420]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 80031e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031e4:	4b68      	ldr	r3, [pc, #416]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 80031e6:	2104      	movs	r1, #4
 80031e8:	438a      	bics	r2, r1
 80031ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80031ec:	4b66      	ldr	r3, [pc, #408]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 80031ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f0:	22f8      	movs	r2, #248	; 0xf8
 80031f2:	4393      	bics	r3, r2
 80031f4:	0019      	movs	r1, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	00da      	lsls	r2, r3, #3
 80031fc:	4b62      	ldr	r3, [pc, #392]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 80031fe:	430a      	orrs	r2, r1
 8003200:	635a      	str	r2, [r3, #52]	; 0x34
 8003202:	e01e      	b.n	8003242 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003204:	4b60      	ldr	r3, [pc, #384]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 8003206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003208:	4b5f      	ldr	r3, [pc, #380]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 800320a:	2104      	movs	r1, #4
 800320c:	430a      	orrs	r2, r1
 800320e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003210:	4b5d      	ldr	r3, [pc, #372]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 8003212:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003214:	4b5c      	ldr	r3, [pc, #368]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 8003216:	2101      	movs	r1, #1
 8003218:	438a      	bics	r2, r1
 800321a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321c:	f7ff fb1e 	bl	800285c <HAL_GetTick>
 8003220:	0003      	movs	r3, r0
 8003222:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003226:	f7ff fb19 	bl	800285c <HAL_GetTick>
 800322a:	0002      	movs	r2, r0
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e0a2      	b.n	800337e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003238:	4b53      	ldr	r3, [pc, #332]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 800323a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800323c:	2202      	movs	r2, #2
 800323e:	4013      	ands	r3, r2
 8003240:	d1f1      	bne.n	8003226 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d100      	bne.n	800324c <HAL_RCC_OscConfig+0x4e4>
 800324a:	e097      	b.n	800337c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800324c:	4b4e      	ldr	r3, [pc, #312]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	220c      	movs	r2, #12
 8003252:	4013      	ands	r3, r2
 8003254:	2b08      	cmp	r3, #8
 8003256:	d100      	bne.n	800325a <HAL_RCC_OscConfig+0x4f2>
 8003258:	e06b      	b.n	8003332 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d14c      	bne.n	80032fc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003262:	4b49      	ldr	r3, [pc, #292]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	4b48      	ldr	r3, [pc, #288]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 8003268:	494a      	ldr	r1, [pc, #296]	; (8003394 <HAL_RCC_OscConfig+0x62c>)
 800326a:	400a      	ands	r2, r1
 800326c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326e:	f7ff faf5 	bl	800285c <HAL_GetTick>
 8003272:	0003      	movs	r3, r0
 8003274:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003278:	f7ff faf0 	bl	800285c <HAL_GetTick>
 800327c:	0002      	movs	r2, r0
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e079      	b.n	800337e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800328a:	4b3f      	ldr	r3, [pc, #252]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	2380      	movs	r3, #128	; 0x80
 8003290:	049b      	lsls	r3, r3, #18
 8003292:	4013      	ands	r3, r2
 8003294:	d1f0      	bne.n	8003278 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003296:	4b3c      	ldr	r3, [pc, #240]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 8003298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329a:	220f      	movs	r2, #15
 800329c:	4393      	bics	r3, r2
 800329e:	0019      	movs	r1, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a4:	4b38      	ldr	r3, [pc, #224]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 80032a6:	430a      	orrs	r2, r1
 80032a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80032aa:	4b37      	ldr	r3, [pc, #220]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	4a3a      	ldr	r2, [pc, #232]	; (8003398 <HAL_RCC_OscConfig+0x630>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	0019      	movs	r1, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	431a      	orrs	r2, r3
 80032be:	4b32      	ldr	r3, [pc, #200]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 80032c0:	430a      	orrs	r2, r1
 80032c2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032c4:	4b30      	ldr	r3, [pc, #192]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	4b2f      	ldr	r3, [pc, #188]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 80032ca:	2180      	movs	r1, #128	; 0x80
 80032cc:	0449      	lsls	r1, r1, #17
 80032ce:	430a      	orrs	r2, r1
 80032d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d2:	f7ff fac3 	bl	800285c <HAL_GetTick>
 80032d6:	0003      	movs	r3, r0
 80032d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032dc:	f7ff fabe 	bl	800285c <HAL_GetTick>
 80032e0:	0002      	movs	r2, r0
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e047      	b.n	800337e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032ee:	4b26      	ldr	r3, [pc, #152]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	2380      	movs	r3, #128	; 0x80
 80032f4:	049b      	lsls	r3, r3, #18
 80032f6:	4013      	ands	r3, r2
 80032f8:	d0f0      	beq.n	80032dc <HAL_RCC_OscConfig+0x574>
 80032fa:	e03f      	b.n	800337c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032fc:	4b22      	ldr	r3, [pc, #136]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4b21      	ldr	r3, [pc, #132]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 8003302:	4924      	ldr	r1, [pc, #144]	; (8003394 <HAL_RCC_OscConfig+0x62c>)
 8003304:	400a      	ands	r2, r1
 8003306:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003308:	f7ff faa8 	bl	800285c <HAL_GetTick>
 800330c:	0003      	movs	r3, r0
 800330e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003312:	f7ff faa3 	bl	800285c <HAL_GetTick>
 8003316:	0002      	movs	r2, r0
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e02c      	b.n	800337e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003324:	4b18      	ldr	r3, [pc, #96]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	2380      	movs	r3, #128	; 0x80
 800332a:	049b      	lsls	r3, r3, #18
 800332c:	4013      	ands	r3, r2
 800332e:	d1f0      	bne.n	8003312 <HAL_RCC_OscConfig+0x5aa>
 8003330:	e024      	b.n	800337c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d101      	bne.n	800333e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e01f      	b.n	800337e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800333e:	4b12      	ldr	r3, [pc, #72]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003344:	4b10      	ldr	r3, [pc, #64]	; (8003388 <HAL_RCC_OscConfig+0x620>)
 8003346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003348:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	2380      	movs	r3, #128	; 0x80
 800334e:	025b      	lsls	r3, r3, #9
 8003350:	401a      	ands	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	429a      	cmp	r2, r3
 8003358:	d10e      	bne.n	8003378 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	220f      	movs	r2, #15
 800335e:	401a      	ands	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003364:	429a      	cmp	r2, r3
 8003366:	d107      	bne.n	8003378 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	23f0      	movs	r3, #240	; 0xf0
 800336c:	039b      	lsls	r3, r3, #14
 800336e:	401a      	ands	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003374:	429a      	cmp	r2, r3
 8003376:	d001      	beq.n	800337c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e000      	b.n	800337e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	0018      	movs	r0, r3
 8003380:	46bd      	mov	sp, r7
 8003382:	b008      	add	sp, #32
 8003384:	bd80      	pop	{r7, pc}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	40021000 	.word	0x40021000
 800338c:	00001388 	.word	0x00001388
 8003390:	efffffff 	.word	0xefffffff
 8003394:	feffffff 	.word	0xfeffffff
 8003398:	ffc2ffff 	.word	0xffc2ffff

0800339c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e0b3      	b.n	8003518 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033b0:	4b5b      	ldr	r3, [pc, #364]	; (8003520 <HAL_RCC_ClockConfig+0x184>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2201      	movs	r2, #1
 80033b6:	4013      	ands	r3, r2
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d911      	bls.n	80033e2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033be:	4b58      	ldr	r3, [pc, #352]	; (8003520 <HAL_RCC_ClockConfig+0x184>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2201      	movs	r2, #1
 80033c4:	4393      	bics	r3, r2
 80033c6:	0019      	movs	r1, r3
 80033c8:	4b55      	ldr	r3, [pc, #340]	; (8003520 <HAL_RCC_ClockConfig+0x184>)
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d0:	4b53      	ldr	r3, [pc, #332]	; (8003520 <HAL_RCC_ClockConfig+0x184>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2201      	movs	r2, #1
 80033d6:	4013      	ands	r3, r2
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d001      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e09a      	b.n	8003518 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2202      	movs	r2, #2
 80033e8:	4013      	ands	r3, r2
 80033ea:	d015      	beq.n	8003418 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2204      	movs	r2, #4
 80033f2:	4013      	ands	r3, r2
 80033f4:	d006      	beq.n	8003404 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80033f6:	4b4b      	ldr	r3, [pc, #300]	; (8003524 <HAL_RCC_ClockConfig+0x188>)
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	4b4a      	ldr	r3, [pc, #296]	; (8003524 <HAL_RCC_ClockConfig+0x188>)
 80033fc:	21e0      	movs	r1, #224	; 0xe0
 80033fe:	00c9      	lsls	r1, r1, #3
 8003400:	430a      	orrs	r2, r1
 8003402:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003404:	4b47      	ldr	r3, [pc, #284]	; (8003524 <HAL_RCC_ClockConfig+0x188>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	22f0      	movs	r2, #240	; 0xf0
 800340a:	4393      	bics	r3, r2
 800340c:	0019      	movs	r1, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	4b44      	ldr	r3, [pc, #272]	; (8003524 <HAL_RCC_ClockConfig+0x188>)
 8003414:	430a      	orrs	r2, r1
 8003416:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2201      	movs	r2, #1
 800341e:	4013      	ands	r3, r2
 8003420:	d040      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d107      	bne.n	800343a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342a:	4b3e      	ldr	r3, [pc, #248]	; (8003524 <HAL_RCC_ClockConfig+0x188>)
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	2380      	movs	r3, #128	; 0x80
 8003430:	029b      	lsls	r3, r3, #10
 8003432:	4013      	ands	r3, r2
 8003434:	d114      	bne.n	8003460 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e06e      	b.n	8003518 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b02      	cmp	r3, #2
 8003440:	d107      	bne.n	8003452 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003442:	4b38      	ldr	r3, [pc, #224]	; (8003524 <HAL_RCC_ClockConfig+0x188>)
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	2380      	movs	r3, #128	; 0x80
 8003448:	049b      	lsls	r3, r3, #18
 800344a:	4013      	ands	r3, r2
 800344c:	d108      	bne.n	8003460 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e062      	b.n	8003518 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003452:	4b34      	ldr	r3, [pc, #208]	; (8003524 <HAL_RCC_ClockConfig+0x188>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2202      	movs	r2, #2
 8003458:	4013      	ands	r3, r2
 800345a:	d101      	bne.n	8003460 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e05b      	b.n	8003518 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003460:	4b30      	ldr	r3, [pc, #192]	; (8003524 <HAL_RCC_ClockConfig+0x188>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2203      	movs	r2, #3
 8003466:	4393      	bics	r3, r2
 8003468:	0019      	movs	r1, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	4b2d      	ldr	r3, [pc, #180]	; (8003524 <HAL_RCC_ClockConfig+0x188>)
 8003470:	430a      	orrs	r2, r1
 8003472:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003474:	f7ff f9f2 	bl	800285c <HAL_GetTick>
 8003478:	0003      	movs	r3, r0
 800347a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347c:	e009      	b.n	8003492 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800347e:	f7ff f9ed 	bl	800285c <HAL_GetTick>
 8003482:	0002      	movs	r2, r0
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	4a27      	ldr	r2, [pc, #156]	; (8003528 <HAL_RCC_ClockConfig+0x18c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e042      	b.n	8003518 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003492:	4b24      	ldr	r3, [pc, #144]	; (8003524 <HAL_RCC_ClockConfig+0x188>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	220c      	movs	r2, #12
 8003498:	401a      	ands	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d1ec      	bne.n	800347e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034a4:	4b1e      	ldr	r3, [pc, #120]	; (8003520 <HAL_RCC_ClockConfig+0x184>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2201      	movs	r2, #1
 80034aa:	4013      	ands	r3, r2
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d211      	bcs.n	80034d6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b2:	4b1b      	ldr	r3, [pc, #108]	; (8003520 <HAL_RCC_ClockConfig+0x184>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2201      	movs	r2, #1
 80034b8:	4393      	bics	r3, r2
 80034ba:	0019      	movs	r1, r3
 80034bc:	4b18      	ldr	r3, [pc, #96]	; (8003520 <HAL_RCC_ClockConfig+0x184>)
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c4:	4b16      	ldr	r3, [pc, #88]	; (8003520 <HAL_RCC_ClockConfig+0x184>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2201      	movs	r2, #1
 80034ca:	4013      	ands	r3, r2
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d001      	beq.n	80034d6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e020      	b.n	8003518 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2204      	movs	r2, #4
 80034dc:	4013      	ands	r3, r2
 80034de:	d009      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80034e0:	4b10      	ldr	r3, [pc, #64]	; (8003524 <HAL_RCC_ClockConfig+0x188>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	4a11      	ldr	r2, [pc, #68]	; (800352c <HAL_RCC_ClockConfig+0x190>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	0019      	movs	r1, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	4b0d      	ldr	r3, [pc, #52]	; (8003524 <HAL_RCC_ClockConfig+0x188>)
 80034f0:	430a      	orrs	r2, r1
 80034f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80034f4:	f000 f820 	bl	8003538 <HAL_RCC_GetSysClockFreq>
 80034f8:	0001      	movs	r1, r0
 80034fa:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <HAL_RCC_ClockConfig+0x188>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	091b      	lsrs	r3, r3, #4
 8003500:	220f      	movs	r2, #15
 8003502:	4013      	ands	r3, r2
 8003504:	4a0a      	ldr	r2, [pc, #40]	; (8003530 <HAL_RCC_ClockConfig+0x194>)
 8003506:	5cd3      	ldrb	r3, [r2, r3]
 8003508:	000a      	movs	r2, r1
 800350a:	40da      	lsrs	r2, r3
 800350c:	4b09      	ldr	r3, [pc, #36]	; (8003534 <HAL_RCC_ClockConfig+0x198>)
 800350e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003510:	2003      	movs	r0, #3
 8003512:	f7ff f86d 	bl	80025f0 <HAL_InitTick>
  
  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	0018      	movs	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	b004      	add	sp, #16
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40022000 	.word	0x40022000
 8003524:	40021000 	.word	0x40021000
 8003528:	00001388 	.word	0x00001388
 800352c:	fffff8ff 	.word	0xfffff8ff
 8003530:	08006d80 	.word	0x08006d80
 8003534:	20000010 	.word	0x20000010

08003538 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	2300      	movs	r3, #0
 8003544:	60bb      	str	r3, [r7, #8]
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]
 800354a:	2300      	movs	r3, #0
 800354c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800354e:	2300      	movs	r3, #0
 8003550:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003552:	4b20      	ldr	r3, [pc, #128]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	220c      	movs	r2, #12
 800355c:	4013      	ands	r3, r2
 800355e:	2b04      	cmp	r3, #4
 8003560:	d002      	beq.n	8003568 <HAL_RCC_GetSysClockFreq+0x30>
 8003562:	2b08      	cmp	r3, #8
 8003564:	d003      	beq.n	800356e <HAL_RCC_GetSysClockFreq+0x36>
 8003566:	e02c      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003568:	4b1b      	ldr	r3, [pc, #108]	; (80035d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800356a:	613b      	str	r3, [r7, #16]
      break;
 800356c:	e02c      	b.n	80035c8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	0c9b      	lsrs	r3, r3, #18
 8003572:	220f      	movs	r2, #15
 8003574:	4013      	ands	r3, r2
 8003576:	4a19      	ldr	r2, [pc, #100]	; (80035dc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003578:	5cd3      	ldrb	r3, [r2, r3]
 800357a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800357c:	4b15      	ldr	r3, [pc, #84]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003580:	220f      	movs	r2, #15
 8003582:	4013      	ands	r3, r2
 8003584:	4a16      	ldr	r2, [pc, #88]	; (80035e0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003586:	5cd3      	ldrb	r3, [r2, r3]
 8003588:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	2380      	movs	r3, #128	; 0x80
 800358e:	025b      	lsls	r3, r3, #9
 8003590:	4013      	ands	r3, r2
 8003592:	d009      	beq.n	80035a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	4810      	ldr	r0, [pc, #64]	; (80035d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003598:	f7fc fdc0 	bl	800011c <__udivsi3>
 800359c:	0003      	movs	r3, r0
 800359e:	001a      	movs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4353      	muls	r3, r2
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	e009      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	000a      	movs	r2, r1
 80035ac:	0152      	lsls	r2, r2, #5
 80035ae:	1a52      	subs	r2, r2, r1
 80035b0:	0193      	lsls	r3, r2, #6
 80035b2:	1a9b      	subs	r3, r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	185b      	adds	r3, r3, r1
 80035b8:	021b      	lsls	r3, r3, #8
 80035ba:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	613b      	str	r3, [r7, #16]
      break;
 80035c0:	e002      	b.n	80035c8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035c2:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80035c4:	613b      	str	r3, [r7, #16]
      break;
 80035c6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80035c8:	693b      	ldr	r3, [r7, #16]
}
 80035ca:	0018      	movs	r0, r3
 80035cc:	46bd      	mov	sp, r7
 80035ce:	b006      	add	sp, #24
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	40021000 	.word	0x40021000
 80035d8:	007a1200 	.word	0x007a1200
 80035dc:	08006d98 	.word	0x08006d98
 80035e0:	08006da8 	.word	0x08006da8

080035e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035e8:	4b02      	ldr	r3, [pc, #8]	; (80035f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80035ea:	681b      	ldr	r3, [r3, #0]
}
 80035ec:	0018      	movs	r0, r3
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	46c0      	nop			; (mov r8, r8)
 80035f4:	20000010 	.word	0x20000010

080035f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80035fc:	f7ff fff2 	bl	80035e4 <HAL_RCC_GetHCLKFreq>
 8003600:	0001      	movs	r1, r0
 8003602:	4b06      	ldr	r3, [pc, #24]	; (800361c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	0a1b      	lsrs	r3, r3, #8
 8003608:	2207      	movs	r2, #7
 800360a:	4013      	ands	r3, r2
 800360c:	4a04      	ldr	r2, [pc, #16]	; (8003620 <HAL_RCC_GetPCLK1Freq+0x28>)
 800360e:	5cd3      	ldrb	r3, [r2, r3]
 8003610:	40d9      	lsrs	r1, r3
 8003612:	000b      	movs	r3, r1
}    
 8003614:	0018      	movs	r0, r3
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	40021000 	.word	0x40021000
 8003620:	08006d90 	.word	0x08006d90

08003624 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2207      	movs	r2, #7
 8003632:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003634:	4b0e      	ldr	r3, [pc, #56]	; (8003670 <HAL_RCC_GetClockConfig+0x4c>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2203      	movs	r2, #3
 800363a:	401a      	ands	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003640:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <HAL_RCC_GetClockConfig+0x4c>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	22f0      	movs	r2, #240	; 0xf0
 8003646:	401a      	ands	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 800364c:	4b08      	ldr	r3, [pc, #32]	; (8003670 <HAL_RCC_GetClockConfig+0x4c>)
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	23e0      	movs	r3, #224	; 0xe0
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	401a      	ands	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800365a:	4b06      	ldr	r3, [pc, #24]	; (8003674 <HAL_RCC_GetClockConfig+0x50>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2201      	movs	r2, #1
 8003660:	401a      	ands	r2, r3
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	601a      	str	r2, [r3, #0]
}
 8003666:	46c0      	nop			; (mov r8, r8)
 8003668:	46bd      	mov	sp, r7
 800366a:	b002      	add	sp, #8
 800366c:	bd80      	pop	{r7, pc}
 800366e:	46c0      	nop			; (mov r8, r8)
 8003670:	40021000 	.word	0x40021000
 8003674:	40022000 	.word	0x40022000

08003678 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e042      	b.n	8003710 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	223d      	movs	r2, #61	; 0x3d
 800368e:	5c9b      	ldrb	r3, [r3, r2]
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d107      	bne.n	80036a6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	223c      	movs	r2, #60	; 0x3c
 800369a:	2100      	movs	r1, #0
 800369c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	0018      	movs	r0, r3
 80036a2:	f7fe fef9 	bl	8002498 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	223d      	movs	r2, #61	; 0x3d
 80036aa:	2102      	movs	r1, #2
 80036ac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3304      	adds	r3, #4
 80036b6:	0019      	movs	r1, r3
 80036b8:	0010      	movs	r0, r2
 80036ba:	f000 fc53 	bl	8003f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2246      	movs	r2, #70	; 0x46
 80036c2:	2101      	movs	r1, #1
 80036c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	223e      	movs	r2, #62	; 0x3e
 80036ca:	2101      	movs	r1, #1
 80036cc:	5499      	strb	r1, [r3, r2]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	223f      	movs	r2, #63	; 0x3f
 80036d2:	2101      	movs	r1, #1
 80036d4:	5499      	strb	r1, [r3, r2]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2240      	movs	r2, #64	; 0x40
 80036da:	2101      	movs	r1, #1
 80036dc:	5499      	strb	r1, [r3, r2]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2241      	movs	r2, #65	; 0x41
 80036e2:	2101      	movs	r1, #1
 80036e4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2242      	movs	r2, #66	; 0x42
 80036ea:	2101      	movs	r1, #1
 80036ec:	5499      	strb	r1, [r3, r2]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2243      	movs	r2, #67	; 0x43
 80036f2:	2101      	movs	r1, #1
 80036f4:	5499      	strb	r1, [r3, r2]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2244      	movs	r2, #68	; 0x44
 80036fa:	2101      	movs	r1, #1
 80036fc:	5499      	strb	r1, [r3, r2]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2245      	movs	r2, #69	; 0x45
 8003702:	2101      	movs	r1, #1
 8003704:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	223d      	movs	r2, #61	; 0x3d
 800370a:	2101      	movs	r1, #1
 800370c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	0018      	movs	r0, r3
 8003712:	46bd      	mov	sp, r7
 8003714:	b002      	add	sp, #8
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	223d      	movs	r2, #61	; 0x3d
 8003724:	5c9b      	ldrb	r3, [r3, r2]
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b01      	cmp	r3, #1
 800372a:	d001      	beq.n	8003730 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e035      	b.n	800379c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	223d      	movs	r2, #61	; 0x3d
 8003734:	2102      	movs	r1, #2
 8003736:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68da      	ldr	r2, [r3, #12]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2101      	movs	r1, #1
 8003744:	430a      	orrs	r2, r1
 8003746:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a15      	ldr	r2, [pc, #84]	; (80037a4 <HAL_TIM_Base_Start_IT+0x8c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d009      	beq.n	8003766 <HAL_TIM_Base_Start_IT+0x4e>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a14      	ldr	r2, [pc, #80]	; (80037a8 <HAL_TIM_Base_Start_IT+0x90>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d004      	beq.n	8003766 <HAL_TIM_Base_Start_IT+0x4e>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a12      	ldr	r2, [pc, #72]	; (80037ac <HAL_TIM_Base_Start_IT+0x94>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d111      	bne.n	800378a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	2207      	movs	r2, #7
 800376e:	4013      	ands	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2b06      	cmp	r3, #6
 8003776:	d010      	beq.n	800379a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2101      	movs	r1, #1
 8003784:	430a      	orrs	r2, r1
 8003786:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003788:	e007      	b.n	800379a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2101      	movs	r1, #1
 8003796:	430a      	orrs	r2, r1
 8003798:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	0018      	movs	r0, r3
 800379e:	46bd      	mov	sp, r7
 80037a0:	b004      	add	sp, #16
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40012c00 	.word	0x40012c00
 80037a8:	40000400 	.word	0x40000400
 80037ac:	40014000 	.word	0x40014000

080037b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e042      	b.n	8003848 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	223d      	movs	r2, #61	; 0x3d
 80037c6:	5c9b      	ldrb	r3, [r3, r2]
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d107      	bne.n	80037de <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	223c      	movs	r2, #60	; 0x3c
 80037d2:	2100      	movs	r1, #0
 80037d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	0018      	movs	r0, r3
 80037da:	f000 f839 	bl	8003850 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	223d      	movs	r2, #61	; 0x3d
 80037e2:	2102      	movs	r1, #2
 80037e4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3304      	adds	r3, #4
 80037ee:	0019      	movs	r1, r3
 80037f0:	0010      	movs	r0, r2
 80037f2:	f000 fbb7 	bl	8003f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2246      	movs	r2, #70	; 0x46
 80037fa:	2101      	movs	r1, #1
 80037fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	223e      	movs	r2, #62	; 0x3e
 8003802:	2101      	movs	r1, #1
 8003804:	5499      	strb	r1, [r3, r2]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	223f      	movs	r2, #63	; 0x3f
 800380a:	2101      	movs	r1, #1
 800380c:	5499      	strb	r1, [r3, r2]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2240      	movs	r2, #64	; 0x40
 8003812:	2101      	movs	r1, #1
 8003814:	5499      	strb	r1, [r3, r2]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2241      	movs	r2, #65	; 0x41
 800381a:	2101      	movs	r1, #1
 800381c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2242      	movs	r2, #66	; 0x42
 8003822:	2101      	movs	r1, #1
 8003824:	5499      	strb	r1, [r3, r2]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2243      	movs	r2, #67	; 0x43
 800382a:	2101      	movs	r1, #1
 800382c:	5499      	strb	r1, [r3, r2]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2244      	movs	r2, #68	; 0x44
 8003832:	2101      	movs	r1, #1
 8003834:	5499      	strb	r1, [r3, r2]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2245      	movs	r2, #69	; 0x45
 800383a:	2101      	movs	r1, #1
 800383c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	223d      	movs	r2, #61	; 0x3d
 8003842:	2101      	movs	r1, #1
 8003844:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	0018      	movs	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	b002      	add	sp, #8
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003858:	46c0      	nop			; (mov r8, r8)
 800385a:	46bd      	mov	sp, r7
 800385c:	b002      	add	sp, #8
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d108      	bne.n	8003882 <HAL_TIM_PWM_Start+0x22>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	223e      	movs	r2, #62	; 0x3e
 8003874:	5c9b      	ldrb	r3, [r3, r2]
 8003876:	b2db      	uxtb	r3, r3
 8003878:	3b01      	subs	r3, #1
 800387a:	1e5a      	subs	r2, r3, #1
 800387c:	4193      	sbcs	r3, r2
 800387e:	b2db      	uxtb	r3, r3
 8003880:	e01f      	b.n	80038c2 <HAL_TIM_PWM_Start+0x62>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	2b04      	cmp	r3, #4
 8003886:	d108      	bne.n	800389a <HAL_TIM_PWM_Start+0x3a>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	223f      	movs	r2, #63	; 0x3f
 800388c:	5c9b      	ldrb	r3, [r3, r2]
 800388e:	b2db      	uxtb	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	1e5a      	subs	r2, r3, #1
 8003894:	4193      	sbcs	r3, r2
 8003896:	b2db      	uxtb	r3, r3
 8003898:	e013      	b.n	80038c2 <HAL_TIM_PWM_Start+0x62>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b08      	cmp	r3, #8
 800389e:	d108      	bne.n	80038b2 <HAL_TIM_PWM_Start+0x52>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2240      	movs	r2, #64	; 0x40
 80038a4:	5c9b      	ldrb	r3, [r3, r2]
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	1e5a      	subs	r2, r3, #1
 80038ac:	4193      	sbcs	r3, r2
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	e007      	b.n	80038c2 <HAL_TIM_PWM_Start+0x62>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2241      	movs	r2, #65	; 0x41
 80038b6:	5c9b      	ldrb	r3, [r3, r2]
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	3b01      	subs	r3, #1
 80038bc:	1e5a      	subs	r2, r3, #1
 80038be:	4193      	sbcs	r3, r2
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e06e      	b.n	80039a8 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d104      	bne.n	80038da <HAL_TIM_PWM_Start+0x7a>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	223e      	movs	r2, #62	; 0x3e
 80038d4:	2102      	movs	r1, #2
 80038d6:	5499      	strb	r1, [r3, r2]
 80038d8:	e013      	b.n	8003902 <HAL_TIM_PWM_Start+0xa2>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b04      	cmp	r3, #4
 80038de:	d104      	bne.n	80038ea <HAL_TIM_PWM_Start+0x8a>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	223f      	movs	r2, #63	; 0x3f
 80038e4:	2102      	movs	r1, #2
 80038e6:	5499      	strb	r1, [r3, r2]
 80038e8:	e00b      	b.n	8003902 <HAL_TIM_PWM_Start+0xa2>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d104      	bne.n	80038fa <HAL_TIM_PWM_Start+0x9a>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2240      	movs	r2, #64	; 0x40
 80038f4:	2102      	movs	r1, #2
 80038f6:	5499      	strb	r1, [r3, r2]
 80038f8:	e003      	b.n	8003902 <HAL_TIM_PWM_Start+0xa2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2241      	movs	r2, #65	; 0x41
 80038fe:	2102      	movs	r1, #2
 8003900:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6839      	ldr	r1, [r7, #0]
 8003908:	2201      	movs	r2, #1
 800390a:	0018      	movs	r0, r3
 800390c:	f000 fe36 	bl	800457c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a26      	ldr	r2, [pc, #152]	; (80039b0 <HAL_TIM_PWM_Start+0x150>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d00e      	beq.n	8003938 <HAL_TIM_PWM_Start+0xd8>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a25      	ldr	r2, [pc, #148]	; (80039b4 <HAL_TIM_PWM_Start+0x154>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d009      	beq.n	8003938 <HAL_TIM_PWM_Start+0xd8>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a23      	ldr	r2, [pc, #140]	; (80039b8 <HAL_TIM_PWM_Start+0x158>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d004      	beq.n	8003938 <HAL_TIM_PWM_Start+0xd8>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a22      	ldr	r2, [pc, #136]	; (80039bc <HAL_TIM_PWM_Start+0x15c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d101      	bne.n	800393c <HAL_TIM_PWM_Start+0xdc>
 8003938:	2301      	movs	r3, #1
 800393a:	e000      	b.n	800393e <HAL_TIM_PWM_Start+0xde>
 800393c:	2300      	movs	r3, #0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d008      	beq.n	8003954 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2180      	movs	r1, #128	; 0x80
 800394e:	0209      	lsls	r1, r1, #8
 8003950:	430a      	orrs	r2, r1
 8003952:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a15      	ldr	r2, [pc, #84]	; (80039b0 <HAL_TIM_PWM_Start+0x150>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d009      	beq.n	8003972 <HAL_TIM_PWM_Start+0x112>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a17      	ldr	r2, [pc, #92]	; (80039c0 <HAL_TIM_PWM_Start+0x160>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d004      	beq.n	8003972 <HAL_TIM_PWM_Start+0x112>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a11      	ldr	r2, [pc, #68]	; (80039b4 <HAL_TIM_PWM_Start+0x154>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d111      	bne.n	8003996 <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	2207      	movs	r2, #7
 800397a:	4013      	ands	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2b06      	cmp	r3, #6
 8003982:	d010      	beq.n	80039a6 <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2101      	movs	r1, #1
 8003990:	430a      	orrs	r2, r1
 8003992:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003994:	e007      	b.n	80039a6 <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2101      	movs	r1, #1
 80039a2:	430a      	orrs	r2, r1
 80039a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	0018      	movs	r0, r3
 80039aa:	46bd      	mov	sp, r7
 80039ac:	b004      	add	sp, #16
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40012c00 	.word	0x40012c00
 80039b4:	40014000 	.word	0x40014000
 80039b8:	40014400 	.word	0x40014400
 80039bc:	40014800 	.word	0x40014800
 80039c0:	40000400 	.word	0x40000400

080039c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	2202      	movs	r2, #2
 80039d4:	4013      	ands	r3, r2
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d124      	bne.n	8003a24 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	2202      	movs	r2, #2
 80039e2:	4013      	ands	r3, r2
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d11d      	bne.n	8003a24 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2203      	movs	r2, #3
 80039ee:	4252      	negs	r2, r2
 80039f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	2203      	movs	r2, #3
 8003a00:	4013      	ands	r3, r2
 8003a02:	d004      	beq.n	8003a0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	0018      	movs	r0, r3
 8003a08:	f000 fa94 	bl	8003f34 <HAL_TIM_IC_CaptureCallback>
 8003a0c:	e007      	b.n	8003a1e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	0018      	movs	r0, r3
 8003a12:	f000 fa87 	bl	8003f24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f000 fa93 	bl	8003f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	2204      	movs	r2, #4
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d125      	bne.n	8003a7e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	2204      	movs	r2, #4
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	2b04      	cmp	r3, #4
 8003a3e:	d11e      	bne.n	8003a7e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2205      	movs	r2, #5
 8003a46:	4252      	negs	r2, r2
 8003a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699a      	ldr	r2, [r3, #24]
 8003a56:	23c0      	movs	r3, #192	; 0xc0
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	d004      	beq.n	8003a68 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	0018      	movs	r0, r3
 8003a62:	f000 fa67 	bl	8003f34 <HAL_TIM_IC_CaptureCallback>
 8003a66:	e007      	b.n	8003a78 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	f000 fa5a 	bl	8003f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	0018      	movs	r0, r3
 8003a74:	f000 fa66 	bl	8003f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	2208      	movs	r2, #8
 8003a86:	4013      	ands	r3, r2
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d124      	bne.n	8003ad6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	2208      	movs	r2, #8
 8003a94:	4013      	ands	r3, r2
 8003a96:	2b08      	cmp	r3, #8
 8003a98:	d11d      	bne.n	8003ad6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2209      	movs	r2, #9
 8003aa0:	4252      	negs	r2, r2
 8003aa2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2204      	movs	r2, #4
 8003aa8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	2203      	movs	r2, #3
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	d004      	beq.n	8003ac0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	0018      	movs	r0, r3
 8003aba:	f000 fa3b 	bl	8003f34 <HAL_TIM_IC_CaptureCallback>
 8003abe:	e007      	b.n	8003ad0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	f000 fa2e 	bl	8003f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	0018      	movs	r0, r3
 8003acc:	f000 fa3a 	bl	8003f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	2210      	movs	r2, #16
 8003ade:	4013      	ands	r3, r2
 8003ae0:	2b10      	cmp	r3, #16
 8003ae2:	d125      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	2210      	movs	r2, #16
 8003aec:	4013      	ands	r3, r2
 8003aee:	2b10      	cmp	r3, #16
 8003af0:	d11e      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2211      	movs	r2, #17
 8003af8:	4252      	negs	r2, r2
 8003afa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2208      	movs	r2, #8
 8003b00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69da      	ldr	r2, [r3, #28]
 8003b08:	23c0      	movs	r3, #192	; 0xc0
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	d004      	beq.n	8003b1a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	0018      	movs	r0, r3
 8003b14:	f000 fa0e 	bl	8003f34 <HAL_TIM_IC_CaptureCallback>
 8003b18:	e007      	b.n	8003b2a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	f000 fa01 	bl	8003f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	0018      	movs	r0, r3
 8003b26:	f000 fa0d 	bl	8003f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	2201      	movs	r2, #1
 8003b38:	4013      	ands	r3, r2
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d10f      	bne.n	8003b5e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	2201      	movs	r2, #1
 8003b46:	4013      	ands	r3, r2
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d108      	bne.n	8003b5e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2202      	movs	r2, #2
 8003b52:	4252      	negs	r2, r2
 8003b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f7fe fc5b 	bl	8002414 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	2280      	movs	r2, #128	; 0x80
 8003b66:	4013      	ands	r3, r2
 8003b68:	2b80      	cmp	r3, #128	; 0x80
 8003b6a:	d10f      	bne.n	8003b8c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	2280      	movs	r2, #128	; 0x80
 8003b74:	4013      	ands	r3, r2
 8003b76:	2b80      	cmp	r3, #128	; 0x80
 8003b78:	d108      	bne.n	8003b8c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2281      	movs	r2, #129	; 0x81
 8003b80:	4252      	negs	r2, r2
 8003b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	0018      	movs	r0, r3
 8003b88:	f000 fdda 	bl	8004740 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	2240      	movs	r2, #64	; 0x40
 8003b94:	4013      	ands	r3, r2
 8003b96:	2b40      	cmp	r3, #64	; 0x40
 8003b98:	d10f      	bne.n	8003bba <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	2240      	movs	r2, #64	; 0x40
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	2b40      	cmp	r3, #64	; 0x40
 8003ba6:	d108      	bne.n	8003bba <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2241      	movs	r2, #65	; 0x41
 8003bae:	4252      	negs	r2, r2
 8003bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	f000 f9cd 	bl	8003f54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	2b20      	cmp	r3, #32
 8003bc6:	d10f      	bne.n	8003be8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2b20      	cmp	r3, #32
 8003bd4:	d108      	bne.n	8003be8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2221      	movs	r2, #33	; 0x21
 8003bdc:	4252      	negs	r2, r2
 8003bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	0018      	movs	r0, r3
 8003be4:	f000 fda4 	bl	8004730 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003be8:	46c0      	nop			; (mov r8, r8)
 8003bea:	46bd      	mov	sp, r7
 8003bec:	b002      	add	sp, #8
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bfc:	2317      	movs	r3, #23
 8003bfe:	18fb      	adds	r3, r7, r3
 8003c00:	2200      	movs	r2, #0
 8003c02:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	223c      	movs	r2, #60	; 0x3c
 8003c08:	5c9b      	ldrb	r3, [r3, r2]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d101      	bne.n	8003c12 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003c0e:	2302      	movs	r3, #2
 8003c10:	e0ad      	b.n	8003d6e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	223c      	movs	r2, #60	; 0x3c
 8003c16:	2101      	movs	r1, #1
 8003c18:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b0c      	cmp	r3, #12
 8003c1e:	d100      	bne.n	8003c22 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003c20:	e076      	b.n	8003d10 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b0c      	cmp	r3, #12
 8003c26:	d900      	bls.n	8003c2a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003c28:	e095      	b.n	8003d56 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d04e      	beq.n	8003cce <HAL_TIM_PWM_ConfigChannel+0xde>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b08      	cmp	r3, #8
 8003c34:	d900      	bls.n	8003c38 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003c36:	e08e      	b.n	8003d56 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_TIM_PWM_ConfigChannel+0x56>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d021      	beq.n	8003c88 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003c44:	e087      	b.n	8003d56 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	0011      	movs	r1, r2
 8003c4e:	0018      	movs	r0, r3
 8003c50:	f000 f9fe 	bl	8004050 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2108      	movs	r1, #8
 8003c60:	430a      	orrs	r2, r1
 8003c62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699a      	ldr	r2, [r3, #24]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2104      	movs	r1, #4
 8003c70:	438a      	bics	r2, r1
 8003c72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6999      	ldr	r1, [r3, #24]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	691a      	ldr	r2, [r3, #16]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	619a      	str	r2, [r3, #24]
      break;
 8003c86:	e06b      	b.n	8003d60 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	0011      	movs	r1, r2
 8003c90:	0018      	movs	r0, r3
 8003c92:	f000 fa65 	bl	8004160 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	699a      	ldr	r2, [r3, #24]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2180      	movs	r1, #128	; 0x80
 8003ca2:	0109      	lsls	r1, r1, #4
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699a      	ldr	r2, [r3, #24]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4931      	ldr	r1, [pc, #196]	; (8003d78 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003cb4:	400a      	ands	r2, r1
 8003cb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6999      	ldr	r1, [r3, #24]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	021a      	lsls	r2, r3, #8
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	619a      	str	r2, [r3, #24]
      break;
 8003ccc:	e048      	b.n	8003d60 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	0011      	movs	r1, r2
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	f000 fac6 	bl	8004268 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	69da      	ldr	r2, [r3, #28]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2108      	movs	r1, #8
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	69da      	ldr	r2, [r3, #28]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2104      	movs	r1, #4
 8003cf8:	438a      	bics	r2, r1
 8003cfa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	69d9      	ldr	r1, [r3, #28]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	691a      	ldr	r2, [r3, #16]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	61da      	str	r2, [r3, #28]
      break;
 8003d0e:	e027      	b.n	8003d60 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	0011      	movs	r1, r2
 8003d18:	0018      	movs	r0, r3
 8003d1a:	f000 fb2b 	bl	8004374 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	69da      	ldr	r2, [r3, #28]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2180      	movs	r1, #128	; 0x80
 8003d2a:	0109      	lsls	r1, r1, #4
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	69da      	ldr	r2, [r3, #28]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	490f      	ldr	r1, [pc, #60]	; (8003d78 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003d3c:	400a      	ands	r2, r1
 8003d3e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	69d9      	ldr	r1, [r3, #28]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	021a      	lsls	r2, r3, #8
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	61da      	str	r2, [r3, #28]
      break;
 8003d54:	e004      	b.n	8003d60 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003d56:	2317      	movs	r3, #23
 8003d58:	18fb      	adds	r3, r7, r3
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	701a      	strb	r2, [r3, #0]
      break;
 8003d5e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	223c      	movs	r2, #60	; 0x3c
 8003d64:	2100      	movs	r1, #0
 8003d66:	5499      	strb	r1, [r3, r2]

  return status;
 8003d68:	2317      	movs	r3, #23
 8003d6a:	18fb      	adds	r3, r7, r3
 8003d6c:	781b      	ldrb	r3, [r3, #0]
}
 8003d6e:	0018      	movs	r0, r3
 8003d70:	46bd      	mov	sp, r7
 8003d72:	b006      	add	sp, #24
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	46c0      	nop			; (mov r8, r8)
 8003d78:	fffffbff 	.word	0xfffffbff

08003d7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d86:	230f      	movs	r3, #15
 8003d88:	18fb      	adds	r3, r7, r3
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	223c      	movs	r2, #60	; 0x3c
 8003d92:	5c9b      	ldrb	r3, [r3, r2]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d101      	bne.n	8003d9c <HAL_TIM_ConfigClockSource+0x20>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e0bc      	b.n	8003f16 <HAL_TIM_ConfigClockSource+0x19a>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	223c      	movs	r2, #60	; 0x3c
 8003da0:	2101      	movs	r1, #1
 8003da2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	223d      	movs	r2, #61	; 0x3d
 8003da8:	2102      	movs	r1, #2
 8003daa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	2277      	movs	r2, #119	; 0x77
 8003db8:	4393      	bics	r3, r2
 8003dba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	4a58      	ldr	r2, [pc, #352]	; (8003f20 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2280      	movs	r2, #128	; 0x80
 8003dd2:	0192      	lsls	r2, r2, #6
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d040      	beq.n	8003e5a <HAL_TIM_ConfigClockSource+0xde>
 8003dd8:	2280      	movs	r2, #128	; 0x80
 8003dda:	0192      	lsls	r2, r2, #6
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d900      	bls.n	8003de2 <HAL_TIM_ConfigClockSource+0x66>
 8003de0:	e088      	b.n	8003ef4 <HAL_TIM_ConfigClockSource+0x178>
 8003de2:	2280      	movs	r2, #128	; 0x80
 8003de4:	0152      	lsls	r2, r2, #5
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d100      	bne.n	8003dec <HAL_TIM_ConfigClockSource+0x70>
 8003dea:	e088      	b.n	8003efe <HAL_TIM_ConfigClockSource+0x182>
 8003dec:	2280      	movs	r2, #128	; 0x80
 8003dee:	0152      	lsls	r2, r2, #5
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d900      	bls.n	8003df6 <HAL_TIM_ConfigClockSource+0x7a>
 8003df4:	e07e      	b.n	8003ef4 <HAL_TIM_ConfigClockSource+0x178>
 8003df6:	2b70      	cmp	r3, #112	; 0x70
 8003df8:	d018      	beq.n	8003e2c <HAL_TIM_ConfigClockSource+0xb0>
 8003dfa:	d900      	bls.n	8003dfe <HAL_TIM_ConfigClockSource+0x82>
 8003dfc:	e07a      	b.n	8003ef4 <HAL_TIM_ConfigClockSource+0x178>
 8003dfe:	2b60      	cmp	r3, #96	; 0x60
 8003e00:	d04f      	beq.n	8003ea2 <HAL_TIM_ConfigClockSource+0x126>
 8003e02:	d900      	bls.n	8003e06 <HAL_TIM_ConfigClockSource+0x8a>
 8003e04:	e076      	b.n	8003ef4 <HAL_TIM_ConfigClockSource+0x178>
 8003e06:	2b50      	cmp	r3, #80	; 0x50
 8003e08:	d03b      	beq.n	8003e82 <HAL_TIM_ConfigClockSource+0x106>
 8003e0a:	d900      	bls.n	8003e0e <HAL_TIM_ConfigClockSource+0x92>
 8003e0c:	e072      	b.n	8003ef4 <HAL_TIM_ConfigClockSource+0x178>
 8003e0e:	2b40      	cmp	r3, #64	; 0x40
 8003e10:	d057      	beq.n	8003ec2 <HAL_TIM_ConfigClockSource+0x146>
 8003e12:	d900      	bls.n	8003e16 <HAL_TIM_ConfigClockSource+0x9a>
 8003e14:	e06e      	b.n	8003ef4 <HAL_TIM_ConfigClockSource+0x178>
 8003e16:	2b30      	cmp	r3, #48	; 0x30
 8003e18:	d063      	beq.n	8003ee2 <HAL_TIM_ConfigClockSource+0x166>
 8003e1a:	d86b      	bhi.n	8003ef4 <HAL_TIM_ConfigClockSource+0x178>
 8003e1c:	2b20      	cmp	r3, #32
 8003e1e:	d060      	beq.n	8003ee2 <HAL_TIM_ConfigClockSource+0x166>
 8003e20:	d868      	bhi.n	8003ef4 <HAL_TIM_ConfigClockSource+0x178>
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d05d      	beq.n	8003ee2 <HAL_TIM_ConfigClockSource+0x166>
 8003e26:	2b10      	cmp	r3, #16
 8003e28:	d05b      	beq.n	8003ee2 <HAL_TIM_ConfigClockSource+0x166>
 8003e2a:	e063      	b.n	8003ef4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6818      	ldr	r0, [r3, #0]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	6899      	ldr	r1, [r3, #8]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	f000 fb7e 	bl	800453c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2277      	movs	r2, #119	; 0x77
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	609a      	str	r2, [r3, #8]
      break;
 8003e58:	e052      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6818      	ldr	r0, [r3, #0]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	6899      	ldr	r1, [r3, #8]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f000 fb67 	bl	800453c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2180      	movs	r1, #128	; 0x80
 8003e7a:	01c9      	lsls	r1, r1, #7
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	609a      	str	r2, [r3, #8]
      break;
 8003e80:	e03e      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6818      	ldr	r0, [r3, #0]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	6859      	ldr	r1, [r3, #4]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	001a      	movs	r2, r3
 8003e90:	f000 fada 	bl	8004448 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2150      	movs	r1, #80	; 0x50
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	f000 fb34 	bl	8004508 <TIM_ITRx_SetConfig>
      break;
 8003ea0:	e02e      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6818      	ldr	r0, [r3, #0]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	6859      	ldr	r1, [r3, #4]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	001a      	movs	r2, r3
 8003eb0:	f000 faf8 	bl	80044a4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2160      	movs	r1, #96	; 0x60
 8003eba:	0018      	movs	r0, r3
 8003ebc:	f000 fb24 	bl	8004508 <TIM_ITRx_SetConfig>
      break;
 8003ec0:	e01e      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6818      	ldr	r0, [r3, #0]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	6859      	ldr	r1, [r3, #4]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	001a      	movs	r2, r3
 8003ed0:	f000 faba 	bl	8004448 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2140      	movs	r1, #64	; 0x40
 8003eda:	0018      	movs	r0, r3
 8003edc:	f000 fb14 	bl	8004508 <TIM_ITRx_SetConfig>
      break;
 8003ee0:	e00e      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	0019      	movs	r1, r3
 8003eec:	0010      	movs	r0, r2
 8003eee:	f000 fb0b 	bl	8004508 <TIM_ITRx_SetConfig>
      break;
 8003ef2:	e005      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003ef4:	230f      	movs	r3, #15
 8003ef6:	18fb      	adds	r3, r7, r3
 8003ef8:	2201      	movs	r2, #1
 8003efa:	701a      	strb	r2, [r3, #0]
      break;
 8003efc:	e000      	b.n	8003f00 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003efe:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	223d      	movs	r2, #61	; 0x3d
 8003f04:	2101      	movs	r1, #1
 8003f06:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	223c      	movs	r2, #60	; 0x3c
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	5499      	strb	r1, [r3, r2]

  return status;
 8003f10:	230f      	movs	r3, #15
 8003f12:	18fb      	adds	r3, r7, r3
 8003f14:	781b      	ldrb	r3, [r3, #0]
}
 8003f16:	0018      	movs	r0, r3
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	b004      	add	sp, #16
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	46c0      	nop			; (mov r8, r8)
 8003f20:	ffff00ff 	.word	0xffff00ff

08003f24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f2c:	46c0      	nop			; (mov r8, r8)
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	b002      	add	sp, #8
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f3c:	46c0      	nop			; (mov r8, r8)
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	b002      	add	sp, #8
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f4c:	46c0      	nop			; (mov r8, r8)
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	b002      	add	sp, #8
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f5c:	46c0      	nop			; (mov r8, r8)
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	b002      	add	sp, #8
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a2f      	ldr	r2, [pc, #188]	; (8004034 <TIM_Base_SetConfig+0xd0>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d003      	beq.n	8003f84 <TIM_Base_SetConfig+0x20>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a2e      	ldr	r2, [pc, #184]	; (8004038 <TIM_Base_SetConfig+0xd4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d108      	bne.n	8003f96 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2270      	movs	r2, #112	; 0x70
 8003f88:	4393      	bics	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a26      	ldr	r2, [pc, #152]	; (8004034 <TIM_Base_SetConfig+0xd0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d013      	beq.n	8003fc6 <TIM_Base_SetConfig+0x62>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a25      	ldr	r2, [pc, #148]	; (8004038 <TIM_Base_SetConfig+0xd4>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d00f      	beq.n	8003fc6 <TIM_Base_SetConfig+0x62>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a24      	ldr	r2, [pc, #144]	; (800403c <TIM_Base_SetConfig+0xd8>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d00b      	beq.n	8003fc6 <TIM_Base_SetConfig+0x62>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a23      	ldr	r2, [pc, #140]	; (8004040 <TIM_Base_SetConfig+0xdc>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d007      	beq.n	8003fc6 <TIM_Base_SetConfig+0x62>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a22      	ldr	r2, [pc, #136]	; (8004044 <TIM_Base_SetConfig+0xe0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d003      	beq.n	8003fc6 <TIM_Base_SetConfig+0x62>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a21      	ldr	r2, [pc, #132]	; (8004048 <TIM_Base_SetConfig+0xe4>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d108      	bne.n	8003fd8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4a20      	ldr	r2, [pc, #128]	; (800404c <TIM_Base_SetConfig+0xe8>)
 8003fca:	4013      	ands	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2280      	movs	r2, #128	; 0x80
 8003fdc:	4393      	bics	r3, r2
 8003fde:	001a      	movs	r2, r3
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	689a      	ldr	r2, [r3, #8]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a0c      	ldr	r2, [pc, #48]	; (8004034 <TIM_Base_SetConfig+0xd0>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d00b      	beq.n	800401e <TIM_Base_SetConfig+0xba>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a0d      	ldr	r2, [pc, #52]	; (8004040 <TIM_Base_SetConfig+0xdc>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d007      	beq.n	800401e <TIM_Base_SetConfig+0xba>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a0c      	ldr	r2, [pc, #48]	; (8004044 <TIM_Base_SetConfig+0xe0>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d003      	beq.n	800401e <TIM_Base_SetConfig+0xba>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a0b      	ldr	r2, [pc, #44]	; (8004048 <TIM_Base_SetConfig+0xe4>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d103      	bne.n	8004026 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	691a      	ldr	r2, [r3, #16]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	615a      	str	r2, [r3, #20]
}
 800402c:	46c0      	nop			; (mov r8, r8)
 800402e:	46bd      	mov	sp, r7
 8004030:	b004      	add	sp, #16
 8004032:	bd80      	pop	{r7, pc}
 8004034:	40012c00 	.word	0x40012c00
 8004038:	40000400 	.word	0x40000400
 800403c:	40002000 	.word	0x40002000
 8004040:	40014000 	.word	0x40014000
 8004044:	40014400 	.word	0x40014400
 8004048:	40014800 	.word	0x40014800
 800404c:	fffffcff 	.word	0xfffffcff

08004050 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	2201      	movs	r2, #1
 8004060:	4393      	bics	r3, r2
 8004062:	001a      	movs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2270      	movs	r2, #112	; 0x70
 800407e:	4393      	bics	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2203      	movs	r2, #3
 8004086:	4393      	bics	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	4313      	orrs	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	2202      	movs	r2, #2
 8004098:	4393      	bics	r3, r2
 800409a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a27      	ldr	r2, [pc, #156]	; (8004148 <TIM_OC1_SetConfig+0xf8>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d00b      	beq.n	80040c6 <TIM_OC1_SetConfig+0x76>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a26      	ldr	r2, [pc, #152]	; (800414c <TIM_OC1_SetConfig+0xfc>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d007      	beq.n	80040c6 <TIM_OC1_SetConfig+0x76>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a25      	ldr	r2, [pc, #148]	; (8004150 <TIM_OC1_SetConfig+0x100>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d003      	beq.n	80040c6 <TIM_OC1_SetConfig+0x76>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a24      	ldr	r2, [pc, #144]	; (8004154 <TIM_OC1_SetConfig+0x104>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d10c      	bne.n	80040e0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2208      	movs	r2, #8
 80040ca:	4393      	bics	r3, r2
 80040cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2204      	movs	r2, #4
 80040dc:	4393      	bics	r3, r2
 80040de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a19      	ldr	r2, [pc, #100]	; (8004148 <TIM_OC1_SetConfig+0xf8>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d00b      	beq.n	8004100 <TIM_OC1_SetConfig+0xb0>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a18      	ldr	r2, [pc, #96]	; (800414c <TIM_OC1_SetConfig+0xfc>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d007      	beq.n	8004100 <TIM_OC1_SetConfig+0xb0>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a17      	ldr	r2, [pc, #92]	; (8004150 <TIM_OC1_SetConfig+0x100>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d003      	beq.n	8004100 <TIM_OC1_SetConfig+0xb0>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a16      	ldr	r2, [pc, #88]	; (8004154 <TIM_OC1_SetConfig+0x104>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d111      	bne.n	8004124 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	4a15      	ldr	r2, [pc, #84]	; (8004158 <TIM_OC1_SetConfig+0x108>)
 8004104:	4013      	ands	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	4a14      	ldr	r2, [pc, #80]	; (800415c <TIM_OC1_SetConfig+0x10c>)
 800410c:	4013      	ands	r3, r2
 800410e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	4313      	orrs	r3, r2
 8004118:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4313      	orrs	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	621a      	str	r2, [r3, #32]
}
 800413e:	46c0      	nop			; (mov r8, r8)
 8004140:	46bd      	mov	sp, r7
 8004142:	b006      	add	sp, #24
 8004144:	bd80      	pop	{r7, pc}
 8004146:	46c0      	nop			; (mov r8, r8)
 8004148:	40012c00 	.word	0x40012c00
 800414c:	40014000 	.word	0x40014000
 8004150:	40014400 	.word	0x40014400
 8004154:	40014800 	.word	0x40014800
 8004158:	fffffeff 	.word	0xfffffeff
 800415c:	fffffdff 	.word	0xfffffdff

08004160 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	2210      	movs	r2, #16
 8004170:	4393      	bics	r3, r2
 8004172:	001a      	movs	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	4a2e      	ldr	r2, [pc, #184]	; (8004248 <TIM_OC2_SetConfig+0xe8>)
 800418e:	4013      	ands	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4a2d      	ldr	r2, [pc, #180]	; (800424c <TIM_OC2_SetConfig+0xec>)
 8004196:	4013      	ands	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	2220      	movs	r2, #32
 80041aa:	4393      	bics	r3, r2
 80041ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a24      	ldr	r2, [pc, #144]	; (8004250 <TIM_OC2_SetConfig+0xf0>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d10d      	bne.n	80041de <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	2280      	movs	r2, #128	; 0x80
 80041c6:	4393      	bics	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	011b      	lsls	r3, r3, #4
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2240      	movs	r2, #64	; 0x40
 80041da:	4393      	bics	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a1b      	ldr	r2, [pc, #108]	; (8004250 <TIM_OC2_SetConfig+0xf0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00b      	beq.n	80041fe <TIM_OC2_SetConfig+0x9e>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a1a      	ldr	r2, [pc, #104]	; (8004254 <TIM_OC2_SetConfig+0xf4>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d007      	beq.n	80041fe <TIM_OC2_SetConfig+0x9e>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a19      	ldr	r2, [pc, #100]	; (8004258 <TIM_OC2_SetConfig+0xf8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d003      	beq.n	80041fe <TIM_OC2_SetConfig+0x9e>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a18      	ldr	r2, [pc, #96]	; (800425c <TIM_OC2_SetConfig+0xfc>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d113      	bne.n	8004226 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	4a17      	ldr	r2, [pc, #92]	; (8004260 <TIM_OC2_SetConfig+0x100>)
 8004202:	4013      	ands	r3, r2
 8004204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	4a16      	ldr	r2, [pc, #88]	; (8004264 <TIM_OC2_SetConfig+0x104>)
 800420a:	4013      	ands	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	4313      	orrs	r3, r2
 8004218:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	621a      	str	r2, [r3, #32]
}
 8004240:	46c0      	nop			; (mov r8, r8)
 8004242:	46bd      	mov	sp, r7
 8004244:	b006      	add	sp, #24
 8004246:	bd80      	pop	{r7, pc}
 8004248:	ffff8fff 	.word	0xffff8fff
 800424c:	fffffcff 	.word	0xfffffcff
 8004250:	40012c00 	.word	0x40012c00
 8004254:	40014000 	.word	0x40014000
 8004258:	40014400 	.word	0x40014400
 800425c:	40014800 	.word	0x40014800
 8004260:	fffffbff 	.word	0xfffffbff
 8004264:	fffff7ff 	.word	0xfffff7ff

08004268 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	4a35      	ldr	r2, [pc, #212]	; (800434c <TIM_OC3_SetConfig+0xe4>)
 8004278:	401a      	ands	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2270      	movs	r2, #112	; 0x70
 8004294:	4393      	bics	r3, r2
 8004296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2203      	movs	r2, #3
 800429c:	4393      	bics	r3, r2
 800429e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	4a28      	ldr	r2, [pc, #160]	; (8004350 <TIM_OC3_SetConfig+0xe8>)
 80042ae:	4013      	ands	r3, r2
 80042b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	021b      	lsls	r3, r3, #8
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a24      	ldr	r2, [pc, #144]	; (8004354 <TIM_OC3_SetConfig+0xec>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d10d      	bne.n	80042e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	4a23      	ldr	r2, [pc, #140]	; (8004358 <TIM_OC3_SetConfig+0xf0>)
 80042ca:	4013      	ands	r3, r2
 80042cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	021b      	lsls	r3, r3, #8
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	4a1f      	ldr	r2, [pc, #124]	; (800435c <TIM_OC3_SetConfig+0xf4>)
 80042de:	4013      	ands	r3, r2
 80042e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a1b      	ldr	r2, [pc, #108]	; (8004354 <TIM_OC3_SetConfig+0xec>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d00b      	beq.n	8004302 <TIM_OC3_SetConfig+0x9a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a1c      	ldr	r2, [pc, #112]	; (8004360 <TIM_OC3_SetConfig+0xf8>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d007      	beq.n	8004302 <TIM_OC3_SetConfig+0x9a>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a1b      	ldr	r2, [pc, #108]	; (8004364 <TIM_OC3_SetConfig+0xfc>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d003      	beq.n	8004302 <TIM_OC3_SetConfig+0x9a>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a1a      	ldr	r2, [pc, #104]	; (8004368 <TIM_OC3_SetConfig+0x100>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d113      	bne.n	800432a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	4a19      	ldr	r2, [pc, #100]	; (800436c <TIM_OC3_SetConfig+0x104>)
 8004306:	4013      	ands	r3, r2
 8004308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	4a18      	ldr	r2, [pc, #96]	; (8004370 <TIM_OC3_SetConfig+0x108>)
 800430e:	4013      	ands	r3, r2
 8004310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	4313      	orrs	r3, r2
 800431c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	011b      	lsls	r3, r3, #4
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	4313      	orrs	r3, r2
 8004328:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	621a      	str	r2, [r3, #32]
}
 8004344:	46c0      	nop			; (mov r8, r8)
 8004346:	46bd      	mov	sp, r7
 8004348:	b006      	add	sp, #24
 800434a:	bd80      	pop	{r7, pc}
 800434c:	fffffeff 	.word	0xfffffeff
 8004350:	fffffdff 	.word	0xfffffdff
 8004354:	40012c00 	.word	0x40012c00
 8004358:	fffff7ff 	.word	0xfffff7ff
 800435c:	fffffbff 	.word	0xfffffbff
 8004360:	40014000 	.word	0x40014000
 8004364:	40014400 	.word	0x40014400
 8004368:	40014800 	.word	0x40014800
 800436c:	ffffefff 	.word	0xffffefff
 8004370:	ffffdfff 	.word	0xffffdfff

08004374 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	4a28      	ldr	r2, [pc, #160]	; (8004424 <TIM_OC4_SetConfig+0xb0>)
 8004384:	401a      	ands	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4a22      	ldr	r2, [pc, #136]	; (8004428 <TIM_OC4_SetConfig+0xb4>)
 80043a0:	4013      	ands	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4a21      	ldr	r2, [pc, #132]	; (800442c <TIM_OC4_SetConfig+0xb8>)
 80043a8:	4013      	ands	r3, r2
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	021b      	lsls	r3, r3, #8
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	4a1d      	ldr	r2, [pc, #116]	; (8004430 <TIM_OC4_SetConfig+0xbc>)
 80043bc:	4013      	ands	r3, r2
 80043be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	031b      	lsls	r3, r3, #12
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a19      	ldr	r2, [pc, #100]	; (8004434 <TIM_OC4_SetConfig+0xc0>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d00b      	beq.n	80043ec <TIM_OC4_SetConfig+0x78>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a18      	ldr	r2, [pc, #96]	; (8004438 <TIM_OC4_SetConfig+0xc4>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d007      	beq.n	80043ec <TIM_OC4_SetConfig+0x78>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a17      	ldr	r2, [pc, #92]	; (800443c <TIM_OC4_SetConfig+0xc8>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d003      	beq.n	80043ec <TIM_OC4_SetConfig+0x78>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a16      	ldr	r2, [pc, #88]	; (8004440 <TIM_OC4_SetConfig+0xcc>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d109      	bne.n	8004400 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	4a15      	ldr	r2, [pc, #84]	; (8004444 <TIM_OC4_SetConfig+0xd0>)
 80043f0:	4013      	ands	r3, r2
 80043f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	019b      	lsls	r3, r3, #6
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	621a      	str	r2, [r3, #32]
}
 800441a:	46c0      	nop			; (mov r8, r8)
 800441c:	46bd      	mov	sp, r7
 800441e:	b006      	add	sp, #24
 8004420:	bd80      	pop	{r7, pc}
 8004422:	46c0      	nop			; (mov r8, r8)
 8004424:	ffffefff 	.word	0xffffefff
 8004428:	ffff8fff 	.word	0xffff8fff
 800442c:	fffffcff 	.word	0xfffffcff
 8004430:	ffffdfff 	.word	0xffffdfff
 8004434:	40012c00 	.word	0x40012c00
 8004438:	40014000 	.word	0x40014000
 800443c:	40014400 	.word	0x40014400
 8004440:	40014800 	.word	0x40014800
 8004444:	ffffbfff 	.word	0xffffbfff

08004448 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	2201      	movs	r2, #1
 8004460:	4393      	bics	r3, r2
 8004462:	001a      	movs	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	22f0      	movs	r2, #240	; 0xf0
 8004472:	4393      	bics	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	4313      	orrs	r3, r2
 800447e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	220a      	movs	r2, #10
 8004484:	4393      	bics	r3, r2
 8004486:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	4313      	orrs	r3, r2
 800448e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	621a      	str	r2, [r3, #32]
}
 800449c:	46c0      	nop			; (mov r8, r8)
 800449e:	46bd      	mov	sp, r7
 80044a0:	b006      	add	sp, #24
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	2210      	movs	r2, #16
 80044b6:	4393      	bics	r3, r2
 80044b8:	001a      	movs	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	4a0d      	ldr	r2, [pc, #52]	; (8004504 <TIM_TI2_ConfigInputStage+0x60>)
 80044ce:	4013      	ands	r3, r2
 80044d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	031b      	lsls	r3, r3, #12
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	4313      	orrs	r3, r2
 80044da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	22a0      	movs	r2, #160	; 0xa0
 80044e0:	4393      	bics	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	621a      	str	r2, [r3, #32]
}
 80044fa:	46c0      	nop			; (mov r8, r8)
 80044fc:	46bd      	mov	sp, r7
 80044fe:	b006      	add	sp, #24
 8004500:	bd80      	pop	{r7, pc}
 8004502:	46c0      	nop			; (mov r8, r8)
 8004504:	ffff0fff 	.word	0xffff0fff

08004508 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2270      	movs	r2, #112	; 0x70
 800451c:	4393      	bics	r3, r2
 800451e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	4313      	orrs	r3, r2
 8004526:	2207      	movs	r2, #7
 8004528:	4313      	orrs	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	609a      	str	r2, [r3, #8]
}
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	46bd      	mov	sp, r7
 8004536:	b004      	add	sp, #16
 8004538:	bd80      	pop	{r7, pc}
	...

0800453c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
 8004548:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	4a09      	ldr	r2, [pc, #36]	; (8004578 <TIM_ETR_SetConfig+0x3c>)
 8004554:	4013      	ands	r3, r2
 8004556:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	021a      	lsls	r2, r3, #8
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	431a      	orrs	r2, r3
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	4313      	orrs	r3, r2
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	4313      	orrs	r3, r2
 8004568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	609a      	str	r2, [r3, #8]
}
 8004570:	46c0      	nop			; (mov r8, r8)
 8004572:	46bd      	mov	sp, r7
 8004574:	b006      	add	sp, #24
 8004576:	bd80      	pop	{r7, pc}
 8004578:	ffff00ff 	.word	0xffff00ff

0800457c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	221f      	movs	r2, #31
 800458c:	4013      	ands	r3, r2
 800458e:	2201      	movs	r2, #1
 8004590:	409a      	lsls	r2, r3
 8004592:	0013      	movs	r3, r2
 8004594:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	43d2      	mvns	r2, r2
 800459e:	401a      	ands	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6a1a      	ldr	r2, [r3, #32]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	211f      	movs	r1, #31
 80045ac:	400b      	ands	r3, r1
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	4099      	lsls	r1, r3
 80045b2:	000b      	movs	r3, r1
 80045b4:	431a      	orrs	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	621a      	str	r2, [r3, #32]
}
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	46bd      	mov	sp, r7
 80045be:	b006      	add	sp, #24
 80045c0:	bd80      	pop	{r7, pc}
	...

080045c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	223c      	movs	r2, #60	; 0x3c
 80045d2:	5c9b      	ldrb	r3, [r3, r2]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d101      	bne.n	80045dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045d8:	2302      	movs	r3, #2
 80045da:	e041      	b.n	8004660 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	223c      	movs	r2, #60	; 0x3c
 80045e0:	2101      	movs	r1, #1
 80045e2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	223d      	movs	r2, #61	; 0x3d
 80045e8:	2102      	movs	r1, #2
 80045ea:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2270      	movs	r2, #112	; 0x70
 8004600:	4393      	bics	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	4313      	orrs	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a13      	ldr	r2, [pc, #76]	; (8004668 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d009      	beq.n	8004634 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a11      	ldr	r2, [pc, #68]	; (800466c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d004      	beq.n	8004634 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a10      	ldr	r2, [pc, #64]	; (8004670 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d10c      	bne.n	800464e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	2280      	movs	r2, #128	; 0x80
 8004638:	4393      	bics	r3, r2
 800463a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	4313      	orrs	r3, r2
 8004644:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	223d      	movs	r2, #61	; 0x3d
 8004652:	2101      	movs	r1, #1
 8004654:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	223c      	movs	r2, #60	; 0x3c
 800465a:	2100      	movs	r1, #0
 800465c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	0018      	movs	r0, r3
 8004662:	46bd      	mov	sp, r7
 8004664:	b004      	add	sp, #16
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40012c00 	.word	0x40012c00
 800466c:	40000400 	.word	0x40000400
 8004670:	40014000 	.word	0x40014000

08004674 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800467e:	2300      	movs	r3, #0
 8004680:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	223c      	movs	r2, #60	; 0x3c
 8004686:	5c9b      	ldrb	r3, [r3, r2]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d101      	bne.n	8004690 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800468c:	2302      	movs	r3, #2
 800468e:	e03e      	b.n	800470e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	223c      	movs	r2, #60	; 0x3c
 8004694:	2101      	movs	r1, #1
 8004696:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	22ff      	movs	r2, #255	; 0xff
 800469c:	4393      	bics	r3, r2
 800469e:	001a      	movs	r2, r3
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4a1b      	ldr	r2, [pc, #108]	; (8004718 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80046ac:	401a      	ands	r2, r3
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	4a18      	ldr	r2, [pc, #96]	; (800471c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80046ba:	401a      	ands	r2, r3
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4a16      	ldr	r2, [pc, #88]	; (8004720 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80046c8:	401a      	ands	r2, r3
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4a13      	ldr	r2, [pc, #76]	; (8004724 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80046d6:	401a      	ands	r2, r3
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	4313      	orrs	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4a11      	ldr	r2, [pc, #68]	; (8004728 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80046e4:	401a      	ands	r2, r3
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4a0e      	ldr	r2, [pc, #56]	; (800472c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80046f2:	401a      	ands	r2, r3
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	223c      	movs	r2, #60	; 0x3c
 8004708:	2100      	movs	r1, #0
 800470a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	0018      	movs	r0, r3
 8004710:	46bd      	mov	sp, r7
 8004712:	b004      	add	sp, #16
 8004714:	bd80      	pop	{r7, pc}
 8004716:	46c0      	nop			; (mov r8, r8)
 8004718:	fffffcff 	.word	0xfffffcff
 800471c:	fffffbff 	.word	0xfffffbff
 8004720:	fffff7ff 	.word	0xfffff7ff
 8004724:	ffffefff 	.word	0xffffefff
 8004728:	ffffdfff 	.word	0xffffdfff
 800472c:	ffffbfff 	.word	0xffffbfff

08004730 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004738:	46c0      	nop			; (mov r8, r8)
 800473a:	46bd      	mov	sp, r7
 800473c:	b002      	add	sp, #8
 800473e:	bd80      	pop	{r7, pc}

08004740 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004748:	46c0      	nop			; (mov r8, r8)
 800474a:	46bd      	mov	sp, r7
 800474c:	b002      	add	sp, #8
 800474e:	bd80      	pop	{r7, pc}

08004750 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e044      	b.n	80047ec <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004766:	2b00      	cmp	r3, #0
 8004768:	d107      	bne.n	800477a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2278      	movs	r2, #120	; 0x78
 800476e:	2100      	movs	r1, #0
 8004770:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	0018      	movs	r0, r3
 8004776:	f7fd feef 	bl	8002558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2224      	movs	r2, #36	; 0x24
 800477e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2101      	movs	r1, #1
 800478c:	438a      	bics	r2, r1
 800478e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	0018      	movs	r0, r3
 8004794:	f000 f9a4 	bl	8004ae0 <UART_SetConfig>
 8004798:	0003      	movs	r3, r0
 800479a:	2b01      	cmp	r3, #1
 800479c:	d101      	bne.n	80047a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e024      	b.n	80047ec <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	0018      	movs	r0, r3
 80047ae:	f000 fad7 	bl	8004d60 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	490d      	ldr	r1, [pc, #52]	; (80047f4 <HAL_UART_Init+0xa4>)
 80047be:	400a      	ands	r2, r1
 80047c0:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2108      	movs	r1, #8
 80047ce:	438a      	bics	r2, r1
 80047d0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2101      	movs	r1, #1
 80047de:	430a      	orrs	r2, r1
 80047e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	0018      	movs	r0, r3
 80047e6:	f000 fb6f 	bl	8004ec8 <UART_CheckIdleState>
 80047ea:	0003      	movs	r3, r0
}
 80047ec:	0018      	movs	r0, r3
 80047ee:	46bd      	mov	sp, r7
 80047f0:	b002      	add	sp, #8
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	fffff7ff 	.word	0xfffff7ff

080047f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b08a      	sub	sp, #40	; 0x28
 80047fc:	af02      	add	r7, sp, #8
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	603b      	str	r3, [r7, #0]
 8004804:	1dbb      	adds	r3, r7, #6
 8004806:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800480c:	2b20      	cmp	r3, #32
 800480e:	d000      	beq.n	8004812 <HAL_UART_Transmit+0x1a>
 8004810:	e08d      	b.n	800492e <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d003      	beq.n	8004820 <HAL_UART_Transmit+0x28>
 8004818:	1dbb      	adds	r3, r7, #6
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e085      	b.n	8004930 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	689a      	ldr	r2, [r3, #8]
 8004828:	2380      	movs	r3, #128	; 0x80
 800482a:	015b      	lsls	r3, r3, #5
 800482c:	429a      	cmp	r2, r3
 800482e:	d109      	bne.n	8004844 <HAL_UART_Transmit+0x4c>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d105      	bne.n	8004844 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	2201      	movs	r2, #1
 800483c:	4013      	ands	r3, r2
 800483e:	d001      	beq.n	8004844 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e075      	b.n	8004930 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2284      	movs	r2, #132	; 0x84
 8004848:	2100      	movs	r1, #0
 800484a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2221      	movs	r2, #33	; 0x21
 8004850:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004852:	f7fe f803 	bl	800285c <HAL_GetTick>
 8004856:	0003      	movs	r3, r0
 8004858:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	1dba      	adds	r2, r7, #6
 800485e:	2150      	movs	r1, #80	; 0x50
 8004860:	8812      	ldrh	r2, [r2, #0]
 8004862:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	1dba      	adds	r2, r7, #6
 8004868:	2152      	movs	r1, #82	; 0x52
 800486a:	8812      	ldrh	r2, [r2, #0]
 800486c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	689a      	ldr	r2, [r3, #8]
 8004872:	2380      	movs	r3, #128	; 0x80
 8004874:	015b      	lsls	r3, r3, #5
 8004876:	429a      	cmp	r2, r3
 8004878:	d108      	bne.n	800488c <HAL_UART_Transmit+0x94>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d104      	bne.n	800488c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004882:	2300      	movs	r3, #0
 8004884:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	61bb      	str	r3, [r7, #24]
 800488a:	e003      	b.n	8004894 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004890:	2300      	movs	r3, #0
 8004892:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004894:	e030      	b.n	80048f8 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	0013      	movs	r3, r2
 80048a0:	2200      	movs	r2, #0
 80048a2:	2180      	movs	r1, #128	; 0x80
 80048a4:	f000 fbb8 	bl	8005018 <UART_WaitOnFlagUntilTimeout>
 80048a8:	1e03      	subs	r3, r0, #0
 80048aa:	d004      	beq.n	80048b6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2220      	movs	r2, #32
 80048b0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e03c      	b.n	8004930 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10b      	bne.n	80048d4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	881a      	ldrh	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	05d2      	lsls	r2, r2, #23
 80048c6:	0dd2      	lsrs	r2, r2, #23
 80048c8:	b292      	uxth	r2, r2
 80048ca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	3302      	adds	r3, #2
 80048d0:	61bb      	str	r3, [r7, #24]
 80048d2:	e008      	b.n	80048e6 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	781a      	ldrb	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	b292      	uxth	r2, r2
 80048de:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	3301      	adds	r3, #1
 80048e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2252      	movs	r2, #82	; 0x52
 80048ea:	5a9b      	ldrh	r3, [r3, r2]
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b299      	uxth	r1, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2252      	movs	r2, #82	; 0x52
 80048f6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2252      	movs	r2, #82	; 0x52
 80048fc:	5a9b      	ldrh	r3, [r3, r2]
 80048fe:	b29b      	uxth	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1c8      	bne.n	8004896 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	0013      	movs	r3, r2
 800490e:	2200      	movs	r2, #0
 8004910:	2140      	movs	r1, #64	; 0x40
 8004912:	f000 fb81 	bl	8005018 <UART_WaitOnFlagUntilTimeout>
 8004916:	1e03      	subs	r3, r0, #0
 8004918:	d004      	beq.n	8004924 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2220      	movs	r2, #32
 800491e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e005      	b.n	8004930 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2220      	movs	r2, #32
 8004928:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	e000      	b.n	8004930 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 800492e:	2302      	movs	r3, #2
  }
}
 8004930:	0018      	movs	r0, r3
 8004932:	46bd      	mov	sp, r7
 8004934:	b008      	add	sp, #32
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b08a      	sub	sp, #40	; 0x28
 800493c:	af02      	add	r7, sp, #8
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	603b      	str	r3, [r7, #0]
 8004944:	1dbb      	adds	r3, r7, #6
 8004946:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2280      	movs	r2, #128	; 0x80
 800494c:	589b      	ldr	r3, [r3, r2]
 800494e:	2b20      	cmp	r3, #32
 8004950:	d000      	beq.n	8004954 <HAL_UART_Receive+0x1c>
 8004952:	e0bd      	b.n	8004ad0 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_UART_Receive+0x2a>
 800495a:	1dbb      	adds	r3, r7, #6
 800495c:	881b      	ldrh	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e0b5      	b.n	8004ad2 <HAL_UART_Receive+0x19a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	689a      	ldr	r2, [r3, #8]
 800496a:	2380      	movs	r3, #128	; 0x80
 800496c:	015b      	lsls	r3, r3, #5
 800496e:	429a      	cmp	r2, r3
 8004970:	d109      	bne.n	8004986 <HAL_UART_Receive+0x4e>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d105      	bne.n	8004986 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2201      	movs	r2, #1
 800497e:	4013      	ands	r3, r2
 8004980:	d001      	beq.n	8004986 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e0a5      	b.n	8004ad2 <HAL_UART_Receive+0x19a>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2284      	movs	r2, #132	; 0x84
 800498a:	2100      	movs	r1, #0
 800498c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2280      	movs	r2, #128	; 0x80
 8004992:	2122      	movs	r1, #34	; 0x22
 8004994:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800499c:	f7fd ff5e 	bl	800285c <HAL_GetTick>
 80049a0:	0003      	movs	r3, r0
 80049a2:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	1dba      	adds	r2, r7, #6
 80049a8:	2158      	movs	r1, #88	; 0x58
 80049aa:	8812      	ldrh	r2, [r2, #0]
 80049ac:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	1dba      	adds	r2, r7, #6
 80049b2:	215a      	movs	r1, #90	; 0x5a
 80049b4:	8812      	ldrh	r2, [r2, #0]
 80049b6:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	2380      	movs	r3, #128	; 0x80
 80049be:	015b      	lsls	r3, r3, #5
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d10d      	bne.n	80049e0 <HAL_UART_Receive+0xa8>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d104      	bne.n	80049d6 <HAL_UART_Receive+0x9e>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	225c      	movs	r2, #92	; 0x5c
 80049d0:	4942      	ldr	r1, [pc, #264]	; (8004adc <HAL_UART_Receive+0x1a4>)
 80049d2:	5299      	strh	r1, [r3, r2]
 80049d4:	e01a      	b.n	8004a0c <HAL_UART_Receive+0xd4>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	225c      	movs	r2, #92	; 0x5c
 80049da:	21ff      	movs	r1, #255	; 0xff
 80049dc:	5299      	strh	r1, [r3, r2]
 80049de:	e015      	b.n	8004a0c <HAL_UART_Receive+0xd4>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10d      	bne.n	8004a04 <HAL_UART_Receive+0xcc>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d104      	bne.n	80049fa <HAL_UART_Receive+0xc2>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	225c      	movs	r2, #92	; 0x5c
 80049f4:	21ff      	movs	r1, #255	; 0xff
 80049f6:	5299      	strh	r1, [r3, r2]
 80049f8:	e008      	b.n	8004a0c <HAL_UART_Receive+0xd4>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	225c      	movs	r2, #92	; 0x5c
 80049fe:	217f      	movs	r1, #127	; 0x7f
 8004a00:	5299      	strh	r1, [r3, r2]
 8004a02:	e003      	b.n	8004a0c <HAL_UART_Receive+0xd4>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	225c      	movs	r2, #92	; 0x5c
 8004a08:	2100      	movs	r1, #0
 8004a0a:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8004a0c:	2312      	movs	r3, #18
 8004a0e:	18fb      	adds	r3, r7, r3
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	215c      	movs	r1, #92	; 0x5c
 8004a14:	5a52      	ldrh	r2, [r2, r1]
 8004a16:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	2380      	movs	r3, #128	; 0x80
 8004a1e:	015b      	lsls	r3, r3, #5
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d108      	bne.n	8004a36 <HAL_UART_Receive+0xfe>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d104      	bne.n	8004a36 <HAL_UART_Receive+0xfe>
    {
      pdata8bits  = NULL;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	61bb      	str	r3, [r7, #24]
 8004a34:	e003      	b.n	8004a3e <HAL_UART_Receive+0x106>
    }
    else
    {
      pdata8bits  = pData;
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004a3e:	e03b      	b.n	8004ab8 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	0013      	movs	r3, r2
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	2120      	movs	r1, #32
 8004a4e:	f000 fae3 	bl	8005018 <UART_WaitOnFlagUntilTimeout>
 8004a52:	1e03      	subs	r3, r0, #0
 8004a54:	d005      	beq.n	8004a62 <HAL_UART_Receive+0x12a>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2280      	movs	r2, #128	; 0x80
 8004a5a:	2120      	movs	r1, #32
 8004a5c:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e037      	b.n	8004ad2 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10e      	bne.n	8004a86 <HAL_UART_Receive+0x14e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	2212      	movs	r2, #18
 8004a72:	18ba      	adds	r2, r7, r2
 8004a74:	8812      	ldrh	r2, [r2, #0]
 8004a76:	4013      	ands	r3, r2
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	3302      	adds	r3, #2
 8004a82:	61bb      	str	r3, [r7, #24]
 8004a84:	e00f      	b.n	8004aa6 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2212      	movs	r2, #18
 8004a92:	18ba      	adds	r2, r7, r2
 8004a94:	8812      	ldrh	r2, [r2, #0]
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	4013      	ands	r3, r2
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	225a      	movs	r2, #90	; 0x5a
 8004aaa:	5a9b      	ldrh	r3, [r3, r2]
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	b299      	uxth	r1, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	225a      	movs	r2, #90	; 0x5a
 8004ab6:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	225a      	movs	r2, #90	; 0x5a
 8004abc:	5a9b      	ldrh	r3, [r3, r2]
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1bd      	bne.n	8004a40 <HAL_UART_Receive+0x108>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2280      	movs	r2, #128	; 0x80
 8004ac8:	2120      	movs	r1, #32
 8004aca:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004acc:	2300      	movs	r3, #0
 8004ace:	e000      	b.n	8004ad2 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004ad0:	2302      	movs	r3, #2
  }
}
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	b008      	add	sp, #32
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	46c0      	nop			; (mov r8, r8)
 8004adc:	000001ff 	.word	0x000001ff

08004ae0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b088      	sub	sp, #32
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ae8:	231e      	movs	r3, #30
 8004aea:	18fb      	adds	r3, r7, r3
 8004aec:	2200      	movs	r2, #0
 8004aee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	431a      	orrs	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a8d      	ldr	r2, [pc, #564]	; (8004d44 <UART_SetConfig+0x264>)
 8004b10:	4013      	ands	r3, r2
 8004b12:	0019      	movs	r1, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	4a88      	ldr	r2, [pc, #544]	; (8004d48 <UART_SetConfig+0x268>)
 8004b26:	4013      	ands	r3, r2
 8004b28:	0019      	movs	r1, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68da      	ldr	r2, [r3, #12]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	4a7f      	ldr	r2, [pc, #508]	; (8004d4c <UART_SetConfig+0x26c>)
 8004b4e:	4013      	ands	r3, r2
 8004b50:	0019      	movs	r1, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a7b      	ldr	r2, [pc, #492]	; (8004d50 <UART_SetConfig+0x270>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d127      	bne.n	8004bb6 <UART_SetConfig+0xd6>
 8004b66:	4b7b      	ldr	r3, [pc, #492]	; (8004d54 <UART_SetConfig+0x274>)
 8004b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6a:	2203      	movs	r2, #3
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	2b03      	cmp	r3, #3
 8004b70:	d00d      	beq.n	8004b8e <UART_SetConfig+0xae>
 8004b72:	d81b      	bhi.n	8004bac <UART_SetConfig+0xcc>
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d014      	beq.n	8004ba2 <UART_SetConfig+0xc2>
 8004b78:	d818      	bhi.n	8004bac <UART_SetConfig+0xcc>
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d002      	beq.n	8004b84 <UART_SetConfig+0xa4>
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d00a      	beq.n	8004b98 <UART_SetConfig+0xb8>
 8004b82:	e013      	b.n	8004bac <UART_SetConfig+0xcc>
 8004b84:	231f      	movs	r3, #31
 8004b86:	18fb      	adds	r3, r7, r3
 8004b88:	2200      	movs	r2, #0
 8004b8a:	701a      	strb	r2, [r3, #0]
 8004b8c:	e021      	b.n	8004bd2 <UART_SetConfig+0xf2>
 8004b8e:	231f      	movs	r3, #31
 8004b90:	18fb      	adds	r3, r7, r3
 8004b92:	2202      	movs	r2, #2
 8004b94:	701a      	strb	r2, [r3, #0]
 8004b96:	e01c      	b.n	8004bd2 <UART_SetConfig+0xf2>
 8004b98:	231f      	movs	r3, #31
 8004b9a:	18fb      	adds	r3, r7, r3
 8004b9c:	2204      	movs	r2, #4
 8004b9e:	701a      	strb	r2, [r3, #0]
 8004ba0:	e017      	b.n	8004bd2 <UART_SetConfig+0xf2>
 8004ba2:	231f      	movs	r3, #31
 8004ba4:	18fb      	adds	r3, r7, r3
 8004ba6:	2208      	movs	r2, #8
 8004ba8:	701a      	strb	r2, [r3, #0]
 8004baa:	e012      	b.n	8004bd2 <UART_SetConfig+0xf2>
 8004bac:	231f      	movs	r3, #31
 8004bae:	18fb      	adds	r3, r7, r3
 8004bb0:	2210      	movs	r2, #16
 8004bb2:	701a      	strb	r2, [r3, #0]
 8004bb4:	e00d      	b.n	8004bd2 <UART_SetConfig+0xf2>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a67      	ldr	r2, [pc, #412]	; (8004d58 <UART_SetConfig+0x278>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d104      	bne.n	8004bca <UART_SetConfig+0xea>
 8004bc0:	231f      	movs	r3, #31
 8004bc2:	18fb      	adds	r3, r7, r3
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	701a      	strb	r2, [r3, #0]
 8004bc8:	e003      	b.n	8004bd2 <UART_SetConfig+0xf2>
 8004bca:	231f      	movs	r3, #31
 8004bcc:	18fb      	adds	r3, r7, r3
 8004bce:	2210      	movs	r2, #16
 8004bd0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	69da      	ldr	r2, [r3, #28]
 8004bd6:	2380      	movs	r3, #128	; 0x80
 8004bd8:	021b      	lsls	r3, r3, #8
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d15c      	bne.n	8004c98 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8004bde:	231f      	movs	r3, #31
 8004be0:	18fb      	adds	r3, r7, r3
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	2b08      	cmp	r3, #8
 8004be6:	d015      	beq.n	8004c14 <UART_SetConfig+0x134>
 8004be8:	dc18      	bgt.n	8004c1c <UART_SetConfig+0x13c>
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	d00d      	beq.n	8004c0a <UART_SetConfig+0x12a>
 8004bee:	dc15      	bgt.n	8004c1c <UART_SetConfig+0x13c>
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <UART_SetConfig+0x11a>
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d005      	beq.n	8004c04 <UART_SetConfig+0x124>
 8004bf8:	e010      	b.n	8004c1c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bfa:	f7fe fcfd 	bl	80035f8 <HAL_RCC_GetPCLK1Freq>
 8004bfe:	0003      	movs	r3, r0
 8004c00:	61bb      	str	r3, [r7, #24]
        break;
 8004c02:	e012      	b.n	8004c2a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c04:	4b55      	ldr	r3, [pc, #340]	; (8004d5c <UART_SetConfig+0x27c>)
 8004c06:	61bb      	str	r3, [r7, #24]
        break;
 8004c08:	e00f      	b.n	8004c2a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c0a:	f7fe fc95 	bl	8003538 <HAL_RCC_GetSysClockFreq>
 8004c0e:	0003      	movs	r3, r0
 8004c10:	61bb      	str	r3, [r7, #24]
        break;
 8004c12:	e00a      	b.n	8004c2a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c14:	2380      	movs	r3, #128	; 0x80
 8004c16:	021b      	lsls	r3, r3, #8
 8004c18:	61bb      	str	r3, [r7, #24]
        break;
 8004c1a:	e006      	b.n	8004c2a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c20:	231e      	movs	r3, #30
 8004c22:	18fb      	adds	r3, r7, r3
 8004c24:	2201      	movs	r2, #1
 8004c26:	701a      	strb	r2, [r3, #0]
        break;
 8004c28:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d100      	bne.n	8004c32 <UART_SetConfig+0x152>
 8004c30:	e07a      	b.n	8004d28 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	005a      	lsls	r2, r3, #1
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	085b      	lsrs	r3, r3, #1
 8004c3c:	18d2      	adds	r2, r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	0019      	movs	r1, r3
 8004c44:	0010      	movs	r0, r2
 8004c46:	f7fb fa69 	bl	800011c <__udivsi3>
 8004c4a:	0003      	movs	r3, r0
 8004c4c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	2b0f      	cmp	r3, #15
 8004c52:	d91c      	bls.n	8004c8e <UART_SetConfig+0x1ae>
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	2380      	movs	r3, #128	; 0x80
 8004c58:	025b      	lsls	r3, r3, #9
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d217      	bcs.n	8004c8e <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	200e      	movs	r0, #14
 8004c64:	183b      	adds	r3, r7, r0
 8004c66:	210f      	movs	r1, #15
 8004c68:	438a      	bics	r2, r1
 8004c6a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	085b      	lsrs	r3, r3, #1
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	2207      	movs	r2, #7
 8004c74:	4013      	ands	r3, r2
 8004c76:	b299      	uxth	r1, r3
 8004c78:	183b      	adds	r3, r7, r0
 8004c7a:	183a      	adds	r2, r7, r0
 8004c7c:	8812      	ldrh	r2, [r2, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	183a      	adds	r2, r7, r0
 8004c88:	8812      	ldrh	r2, [r2, #0]
 8004c8a:	60da      	str	r2, [r3, #12]
 8004c8c:	e04c      	b.n	8004d28 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004c8e:	231e      	movs	r3, #30
 8004c90:	18fb      	adds	r3, r7, r3
 8004c92:	2201      	movs	r2, #1
 8004c94:	701a      	strb	r2, [r3, #0]
 8004c96:	e047      	b.n	8004d28 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c98:	231f      	movs	r3, #31
 8004c9a:	18fb      	adds	r3, r7, r3
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	2b08      	cmp	r3, #8
 8004ca0:	d015      	beq.n	8004cce <UART_SetConfig+0x1ee>
 8004ca2:	dc18      	bgt.n	8004cd6 <UART_SetConfig+0x1f6>
 8004ca4:	2b04      	cmp	r3, #4
 8004ca6:	d00d      	beq.n	8004cc4 <UART_SetConfig+0x1e4>
 8004ca8:	dc15      	bgt.n	8004cd6 <UART_SetConfig+0x1f6>
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <UART_SetConfig+0x1d4>
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d005      	beq.n	8004cbe <UART_SetConfig+0x1de>
 8004cb2:	e010      	b.n	8004cd6 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cb4:	f7fe fca0 	bl	80035f8 <HAL_RCC_GetPCLK1Freq>
 8004cb8:	0003      	movs	r3, r0
 8004cba:	61bb      	str	r3, [r7, #24]
        break;
 8004cbc:	e012      	b.n	8004ce4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cbe:	4b27      	ldr	r3, [pc, #156]	; (8004d5c <UART_SetConfig+0x27c>)
 8004cc0:	61bb      	str	r3, [r7, #24]
        break;
 8004cc2:	e00f      	b.n	8004ce4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cc4:	f7fe fc38 	bl	8003538 <HAL_RCC_GetSysClockFreq>
 8004cc8:	0003      	movs	r3, r0
 8004cca:	61bb      	str	r3, [r7, #24]
        break;
 8004ccc:	e00a      	b.n	8004ce4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cce:	2380      	movs	r3, #128	; 0x80
 8004cd0:	021b      	lsls	r3, r3, #8
 8004cd2:	61bb      	str	r3, [r7, #24]
        break;
 8004cd4:	e006      	b.n	8004ce4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cda:	231e      	movs	r3, #30
 8004cdc:	18fb      	adds	r3, r7, r3
 8004cde:	2201      	movs	r2, #1
 8004ce0:	701a      	strb	r2, [r3, #0]
        break;
 8004ce2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d01e      	beq.n	8004d28 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	085a      	lsrs	r2, r3, #1
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	18d2      	adds	r2, r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	0019      	movs	r1, r3
 8004cfa:	0010      	movs	r0, r2
 8004cfc:	f7fb fa0e 	bl	800011c <__udivsi3>
 8004d00:	0003      	movs	r3, r0
 8004d02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	2b0f      	cmp	r3, #15
 8004d08:	d90a      	bls.n	8004d20 <UART_SetConfig+0x240>
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	2380      	movs	r3, #128	; 0x80
 8004d0e:	025b      	lsls	r3, r3, #9
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d205      	bcs.n	8004d20 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	60da      	str	r2, [r3, #12]
 8004d1e:	e003      	b.n	8004d28 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004d20:	231e      	movs	r3, #30
 8004d22:	18fb      	adds	r3, r7, r3
 8004d24:	2201      	movs	r2, #1
 8004d26:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004d34:	231e      	movs	r3, #30
 8004d36:	18fb      	adds	r3, r7, r3
 8004d38:	781b      	ldrb	r3, [r3, #0]
}
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	b008      	add	sp, #32
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	46c0      	nop			; (mov r8, r8)
 8004d44:	ffff69f3 	.word	0xffff69f3
 8004d48:	ffffcfff 	.word	0xffffcfff
 8004d4c:	fffff4ff 	.word	0xfffff4ff
 8004d50:	40013800 	.word	0x40013800
 8004d54:	40021000 	.word	0x40021000
 8004d58:	40004400 	.word	0x40004400
 8004d5c:	007a1200 	.word	0x007a1200

08004d60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	4013      	ands	r3, r2
 8004d70:	d00b      	beq.n	8004d8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	4a4a      	ldr	r2, [pc, #296]	; (8004ea4 <UART_AdvFeatureConfig+0x144>)
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	0019      	movs	r1, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	2202      	movs	r2, #2
 8004d90:	4013      	ands	r3, r2
 8004d92:	d00b      	beq.n	8004dac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	4a43      	ldr	r2, [pc, #268]	; (8004ea8 <UART_AdvFeatureConfig+0x148>)
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	0019      	movs	r1, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	2204      	movs	r2, #4
 8004db2:	4013      	ands	r3, r2
 8004db4:	d00b      	beq.n	8004dce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	4a3b      	ldr	r2, [pc, #236]	; (8004eac <UART_AdvFeatureConfig+0x14c>)
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	0019      	movs	r1, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	2208      	movs	r2, #8
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	d00b      	beq.n	8004df0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	4a34      	ldr	r2, [pc, #208]	; (8004eb0 <UART_AdvFeatureConfig+0x150>)
 8004de0:	4013      	ands	r3, r2
 8004de2:	0019      	movs	r1, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	2210      	movs	r2, #16
 8004df6:	4013      	ands	r3, r2
 8004df8:	d00b      	beq.n	8004e12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	4a2c      	ldr	r2, [pc, #176]	; (8004eb4 <UART_AdvFeatureConfig+0x154>)
 8004e02:	4013      	ands	r3, r2
 8004e04:	0019      	movs	r1, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	2220      	movs	r2, #32
 8004e18:	4013      	ands	r3, r2
 8004e1a:	d00b      	beq.n	8004e34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	4a25      	ldr	r2, [pc, #148]	; (8004eb8 <UART_AdvFeatureConfig+0x158>)
 8004e24:	4013      	ands	r3, r2
 8004e26:	0019      	movs	r1, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e38:	2240      	movs	r2, #64	; 0x40
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	d01d      	beq.n	8004e7a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	4a1d      	ldr	r2, [pc, #116]	; (8004ebc <UART_AdvFeatureConfig+0x15c>)
 8004e46:	4013      	ands	r3, r2
 8004e48:	0019      	movs	r1, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e5a:	2380      	movs	r3, #128	; 0x80
 8004e5c:	035b      	lsls	r3, r3, #13
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d10b      	bne.n	8004e7a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	4a15      	ldr	r2, [pc, #84]	; (8004ec0 <UART_AdvFeatureConfig+0x160>)
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	0019      	movs	r1, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	2280      	movs	r2, #128	; 0x80
 8004e80:	4013      	ands	r3, r2
 8004e82:	d00b      	beq.n	8004e9c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	4a0e      	ldr	r2, [pc, #56]	; (8004ec4 <UART_AdvFeatureConfig+0x164>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	0019      	movs	r1, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	605a      	str	r2, [r3, #4]
  }
}
 8004e9c:	46c0      	nop			; (mov r8, r8)
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	b002      	add	sp, #8
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	fffdffff 	.word	0xfffdffff
 8004ea8:	fffeffff 	.word	0xfffeffff
 8004eac:	fffbffff 	.word	0xfffbffff
 8004eb0:	ffff7fff 	.word	0xffff7fff
 8004eb4:	ffffefff 	.word	0xffffefff
 8004eb8:	ffffdfff 	.word	0xffffdfff
 8004ebc:	ffefffff 	.word	0xffefffff
 8004ec0:	ff9fffff 	.word	0xff9fffff
 8004ec4:	fff7ffff 	.word	0xfff7ffff

08004ec8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b092      	sub	sp, #72	; 0x48
 8004ecc:	af02      	add	r7, sp, #8
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2284      	movs	r2, #132	; 0x84
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ed8:	f7fd fcc0 	bl	800285c <HAL_GetTick>
 8004edc:	0003      	movs	r3, r0
 8004ede:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2208      	movs	r2, #8
 8004ee8:	4013      	ands	r3, r2
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	d12c      	bne.n	8004f48 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ef0:	2280      	movs	r2, #128	; 0x80
 8004ef2:	0391      	lsls	r1, r2, #14
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	4a46      	ldr	r2, [pc, #280]	; (8005010 <UART_CheckIdleState+0x148>)
 8004ef8:	9200      	str	r2, [sp, #0]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f000 f88c 	bl	8005018 <UART_WaitOnFlagUntilTimeout>
 8004f00:	1e03      	subs	r3, r0, #0
 8004f02:	d021      	beq.n	8004f48 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f04:	f3ef 8310 	mrs	r3, PRIMASK
 8004f08:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f0e:	2301      	movs	r3, #1
 8004f10:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f14:	f383 8810 	msr	PRIMASK, r3
}
 8004f18:	46c0      	nop			; (mov r8, r8)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2180      	movs	r1, #128	; 0x80
 8004f26:	438a      	bics	r2, r1
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f30:	f383 8810 	msr	PRIMASK, r3
}
 8004f34:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2278      	movs	r2, #120	; 0x78
 8004f40:	2100      	movs	r1, #0
 8004f42:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e05f      	b.n	8005008 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2204      	movs	r2, #4
 8004f50:	4013      	ands	r3, r2
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d146      	bne.n	8004fe4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f58:	2280      	movs	r2, #128	; 0x80
 8004f5a:	03d1      	lsls	r1, r2, #15
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	4a2c      	ldr	r2, [pc, #176]	; (8005010 <UART_CheckIdleState+0x148>)
 8004f60:	9200      	str	r2, [sp, #0]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f000 f858 	bl	8005018 <UART_WaitOnFlagUntilTimeout>
 8004f68:	1e03      	subs	r3, r0, #0
 8004f6a:	d03b      	beq.n	8004fe4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f6c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f70:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f72:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f74:	637b      	str	r3, [r7, #52]	; 0x34
 8004f76:	2301      	movs	r3, #1
 8004f78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	f383 8810 	msr	PRIMASK, r3
}
 8004f80:	46c0      	nop			; (mov r8, r8)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4921      	ldr	r1, [pc, #132]	; (8005014 <UART_CheckIdleState+0x14c>)
 8004f8e:	400a      	ands	r2, r1
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f383 8810 	msr	PRIMASK, r3
}
 8004f9c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f9e:	f3ef 8310 	mrs	r3, PRIMASK
 8004fa2:	61bb      	str	r3, [r7, #24]
  return(result);
 8004fa4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa6:	633b      	str	r3, [r7, #48]	; 0x30
 8004fa8:	2301      	movs	r3, #1
 8004faa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	f383 8810 	msr	PRIMASK, r3
}
 8004fb2:	46c0      	nop			; (mov r8, r8)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689a      	ldr	r2, [r3, #8]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	438a      	bics	r2, r1
 8004fc2:	609a      	str	r2, [r3, #8]
 8004fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	f383 8810 	msr	PRIMASK, r3
}
 8004fce:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2280      	movs	r2, #128	; 0x80
 8004fd4:	2120      	movs	r1, #32
 8004fd6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2278      	movs	r2, #120	; 0x78
 8004fdc:	2100      	movs	r1, #0
 8004fde:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e011      	b.n	8005008 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2280      	movs	r2, #128	; 0x80
 8004fee:	2120      	movs	r1, #32
 8004ff0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2278      	movs	r2, #120	; 0x78
 8005002:	2100      	movs	r1, #0
 8005004:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	0018      	movs	r0, r3
 800500a:	46bd      	mov	sp, r7
 800500c:	b010      	add	sp, #64	; 0x40
 800500e:	bd80      	pop	{r7, pc}
 8005010:	01ffffff 	.word	0x01ffffff
 8005014:	fffffedf 	.word	0xfffffedf

08005018 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	603b      	str	r3, [r7, #0]
 8005024:	1dfb      	adds	r3, r7, #7
 8005026:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005028:	e04b      	b.n	80050c2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	3301      	adds	r3, #1
 800502e:	d048      	beq.n	80050c2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005030:	f7fd fc14 	bl	800285c <HAL_GetTick>
 8005034:	0002      	movs	r2, r0
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	429a      	cmp	r2, r3
 800503e:	d302      	bcc.n	8005046 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e04b      	b.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2204      	movs	r2, #4
 8005052:	4013      	ands	r3, r2
 8005054:	d035      	beq.n	80050c2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	69db      	ldr	r3, [r3, #28]
 800505c:	2208      	movs	r2, #8
 800505e:	4013      	ands	r3, r2
 8005060:	2b08      	cmp	r3, #8
 8005062:	d111      	bne.n	8005088 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2208      	movs	r2, #8
 800506a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	0018      	movs	r0, r3
 8005070:	f000 f83c 	bl	80050ec <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2284      	movs	r2, #132	; 0x84
 8005078:	2108      	movs	r1, #8
 800507a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2278      	movs	r2, #120	; 0x78
 8005080:	2100      	movs	r1, #0
 8005082:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e02c      	b.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	69da      	ldr	r2, [r3, #28]
 800508e:	2380      	movs	r3, #128	; 0x80
 8005090:	011b      	lsls	r3, r3, #4
 8005092:	401a      	ands	r2, r3
 8005094:	2380      	movs	r3, #128	; 0x80
 8005096:	011b      	lsls	r3, r3, #4
 8005098:	429a      	cmp	r2, r3
 800509a:	d112      	bne.n	80050c2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2280      	movs	r2, #128	; 0x80
 80050a2:	0112      	lsls	r2, r2, #4
 80050a4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	0018      	movs	r0, r3
 80050aa:	f000 f81f 	bl	80050ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2284      	movs	r2, #132	; 0x84
 80050b2:	2120      	movs	r1, #32
 80050b4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2278      	movs	r2, #120	; 0x78
 80050ba:	2100      	movs	r1, #0
 80050bc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e00f      	b.n	80050e2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	4013      	ands	r3, r2
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	425a      	negs	r2, r3
 80050d2:	4153      	adcs	r3, r2
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	001a      	movs	r2, r3
 80050d8:	1dfb      	adds	r3, r7, #7
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d0a4      	beq.n	800502a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	0018      	movs	r0, r3
 80050e4:	46bd      	mov	sp, r7
 80050e6:	b004      	add	sp, #16
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b08e      	sub	sp, #56	; 0x38
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050f4:	f3ef 8310 	mrs	r3, PRIMASK
 80050f8:	617b      	str	r3, [r7, #20]
  return(result);
 80050fa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050fc:	637b      	str	r3, [r7, #52]	; 0x34
 80050fe:	2301      	movs	r3, #1
 8005100:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	f383 8810 	msr	PRIMASK, r3
}
 8005108:	46c0      	nop			; (mov r8, r8)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4926      	ldr	r1, [pc, #152]	; (80051b0 <UART_EndRxTransfer+0xc4>)
 8005116:	400a      	ands	r2, r1
 8005118:	601a      	str	r2, [r3, #0]
 800511a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800511c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	f383 8810 	msr	PRIMASK, r3
}
 8005124:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005126:	f3ef 8310 	mrs	r3, PRIMASK
 800512a:	623b      	str	r3, [r7, #32]
  return(result);
 800512c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512e:	633b      	str	r3, [r7, #48]	; 0x30
 8005130:	2301      	movs	r3, #1
 8005132:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	f383 8810 	msr	PRIMASK, r3
}
 800513a:	46c0      	nop			; (mov r8, r8)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2101      	movs	r1, #1
 8005148:	438a      	bics	r2, r1
 800514a:	609a      	str	r2, [r3, #8]
 800514c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005152:	f383 8810 	msr	PRIMASK, r3
}
 8005156:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800515c:	2b01      	cmp	r3, #1
 800515e:	d118      	bne.n	8005192 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005160:	f3ef 8310 	mrs	r3, PRIMASK
 8005164:	60bb      	str	r3, [r7, #8]
  return(result);
 8005166:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005168:	62fb      	str	r3, [r7, #44]	; 0x2c
 800516a:	2301      	movs	r3, #1
 800516c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f383 8810 	msr	PRIMASK, r3
}
 8005174:	46c0      	nop			; (mov r8, r8)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2110      	movs	r1, #16
 8005182:	438a      	bics	r2, r1
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005188:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	f383 8810 	msr	PRIMASK, r3
}
 8005190:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2280      	movs	r2, #128	; 0x80
 8005196:	2120      	movs	r1, #32
 8005198:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80051a6:	46c0      	nop			; (mov r8, r8)
 80051a8:	46bd      	mov	sp, r7
 80051aa:	b00e      	add	sp, #56	; 0x38
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	46c0      	nop			; (mov r8, r8)
 80051b0:	fffffedf 	.word	0xfffffedf

080051b4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	0002      	movs	r2, r0
 80051bc:	1dbb      	adds	r3, r7, #6
 80051be:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80051c0:	2300      	movs	r3, #0
 80051c2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80051c4:	1dbb      	adds	r3, r7, #6
 80051c6:	2200      	movs	r2, #0
 80051c8:	5e9b      	ldrsh	r3, [r3, r2]
 80051ca:	2b84      	cmp	r3, #132	; 0x84
 80051cc:	d006      	beq.n	80051dc <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 80051ce:	1dbb      	adds	r3, r7, #6
 80051d0:	2200      	movs	r2, #0
 80051d2:	5e9a      	ldrsh	r2, [r3, r2]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	18d3      	adds	r3, r2, r3
 80051d8:	3303      	adds	r3, #3
 80051da:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80051dc:	68fb      	ldr	r3, [r7, #12]
}
 80051de:	0018      	movs	r0, r3
 80051e0:	46bd      	mov	sp, r7
 80051e2:	b004      	add	sp, #16
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80051ea:	f000 fa31 	bl	8005650 <vTaskStartScheduler>
  
  return osOK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	0018      	movs	r0, r3
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80051f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051f8:	b089      	sub	sp, #36	; 0x24
 80051fa:	af04      	add	r7, sp, #16
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d020      	beq.n	800524a <osThreadCreate+0x54>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d01c      	beq.n	800524a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685c      	ldr	r4, [r3, #4]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681d      	ldr	r5, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	691e      	ldr	r6, [r3, #16]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2208      	movs	r2, #8
 8005220:	5e9b      	ldrsh	r3, [r3, r2]
 8005222:	0018      	movs	r0, r3
 8005224:	f7ff ffc6 	bl	80051b4 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	695a      	ldr	r2, [r3, #20]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005230:	6839      	ldr	r1, [r7, #0]
 8005232:	9302      	str	r3, [sp, #8]
 8005234:	9201      	str	r2, [sp, #4]
 8005236:	9000      	str	r0, [sp, #0]
 8005238:	000b      	movs	r3, r1
 800523a:	0032      	movs	r2, r6
 800523c:	0029      	movs	r1, r5
 800523e:	0020      	movs	r0, r4
 8005240:	f000 f899 	bl	8005376 <xTaskCreateStatic>
 8005244:	0003      	movs	r3, r0
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	e01d      	b.n	8005286 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685c      	ldr	r4, [r3, #4]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005256:	b29e      	uxth	r6, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2208      	movs	r2, #8
 800525c:	5e9b      	ldrsh	r3, [r3, r2]
 800525e:	0018      	movs	r0, r3
 8005260:	f7ff ffa8 	bl	80051b4 <makeFreeRtosPriority>
 8005264:	0001      	movs	r1, r0
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	230c      	movs	r3, #12
 800526a:	18fb      	adds	r3, r7, r3
 800526c:	9301      	str	r3, [sp, #4]
 800526e:	9100      	str	r1, [sp, #0]
 8005270:	0013      	movs	r3, r2
 8005272:	0032      	movs	r2, r6
 8005274:	0029      	movs	r1, r5
 8005276:	0020      	movs	r0, r4
 8005278:	f000 f8c0 	bl	80053fc <xTaskCreate>
 800527c:	0003      	movs	r3, r0
 800527e:	2b01      	cmp	r3, #1
 8005280:	d001      	beq.n	8005286 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8005282:	2300      	movs	r3, #0
 8005284:	e000      	b.n	8005288 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005286:	68fb      	ldr	r3, [r7, #12]
}
 8005288:	0018      	movs	r0, r3
 800528a:	46bd      	mov	sp, r7
 800528c:	b005      	add	sp, #20
 800528e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005290 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3308      	adds	r3, #8
 800529c:	001a      	movs	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	4252      	negs	r2, r2
 80052a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	3308      	adds	r3, #8
 80052ae:	001a      	movs	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3308      	adds	r3, #8
 80052b8:	001a      	movs	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80052c4:	46c0      	nop			; (mov r8, r8)
 80052c6:	46bd      	mov	sp, r7
 80052c8:	b002      	add	sp, #8
 80052ca:	bd80      	pop	{r7, pc}

080052cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80052da:	46c0      	nop			; (mov r8, r8)
 80052dc:	46bd      	mov	sp, r7
 80052de:	b002      	add	sp, #8
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b084      	sub	sp, #16
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
 80052ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	1c5a      	adds	r2, r3, #1
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	601a      	str	r2, [r3, #0]
}
 800531e:	46c0      	nop			; (mov r8, r8)
 8005320:	46bd      	mov	sp, r7
 8005322:	b004      	add	sp, #16
 8005324:	bd80      	pop	{r7, pc}

08005326 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b084      	sub	sp, #16
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6892      	ldr	r2, [r2, #8]
 800533c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	6852      	ldr	r2, [r2, #4]
 8005346:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	429a      	cmp	r2, r3
 8005350:	d103      	bne.n	800535a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	1e5a      	subs	r2, r3, #1
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
}
 800536e:	0018      	movs	r0, r3
 8005370:	46bd      	mov	sp, r7
 8005372:	b004      	add	sp, #16
 8005374:	bd80      	pop	{r7, pc}

08005376 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005376:	b590      	push	{r4, r7, lr}
 8005378:	b08d      	sub	sp, #52	; 0x34
 800537a:	af04      	add	r7, sp, #16
 800537c:	60f8      	str	r0, [r7, #12]
 800537e:	60b9      	str	r1, [r7, #8]
 8005380:	607a      	str	r2, [r7, #4]
 8005382:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <xTaskCreateStatic+0x18>
 800538a:	b672      	cpsid	i
 800538c:	e7fe      	b.n	800538c <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800538e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <xTaskCreateStatic+0x22>
 8005394:	b672      	cpsid	i
 8005396:	e7fe      	b.n	8005396 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005398:	2354      	movs	r3, #84	; 0x54
 800539a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	2b54      	cmp	r3, #84	; 0x54
 80053a0:	d001      	beq.n	80053a6 <xTaskCreateStatic+0x30>
 80053a2:	b672      	cpsid	i
 80053a4:	e7fe      	b.n	80053a4 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d020      	beq.n	80053ee <xTaskCreateStatic+0x78>
 80053ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d01d      	beq.n	80053ee <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b4:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053ba:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	2251      	movs	r2, #81	; 0x51
 80053c0:	2102      	movs	r1, #2
 80053c2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053c4:	683c      	ldr	r4, [r7, #0]
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	68b9      	ldr	r1, [r7, #8]
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	2300      	movs	r3, #0
 80053ce:	9303      	str	r3, [sp, #12]
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	9302      	str	r3, [sp, #8]
 80053d4:	2318      	movs	r3, #24
 80053d6:	18fb      	adds	r3, r7, r3
 80053d8:	9301      	str	r3, [sp, #4]
 80053da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	0023      	movs	r3, r4
 80053e0:	f000 f858 	bl	8005494 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	0018      	movs	r0, r3
 80053e8:	f000 f8ce 	bl	8005588 <prvAddNewTaskToReadyList>
 80053ec:	e001      	b.n	80053f2 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80053f2:	69bb      	ldr	r3, [r7, #24]
	}
 80053f4:	0018      	movs	r0, r3
 80053f6:	46bd      	mov	sp, r7
 80053f8:	b009      	add	sp, #36	; 0x24
 80053fa:	bd90      	pop	{r4, r7, pc}

080053fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80053fc:	b590      	push	{r4, r7, lr}
 80053fe:	b08d      	sub	sp, #52	; 0x34
 8005400:	af04      	add	r7, sp, #16
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	603b      	str	r3, [r7, #0]
 8005408:	1dbb      	adds	r3, r7, #6
 800540a:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800540c:	1dbb      	adds	r3, r7, #6
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	0018      	movs	r0, r3
 8005414:	f000 fd0c 	bl	8005e30 <pvPortMalloc>
 8005418:	0003      	movs	r3, r0
 800541a:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d010      	beq.n	8005444 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005422:	2054      	movs	r0, #84	; 0x54
 8005424:	f000 fd04 	bl	8005e30 <pvPortMalloc>
 8005428:	0003      	movs	r3, r0
 800542a:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	631a      	str	r2, [r3, #48]	; 0x30
 8005438:	e006      	b.n	8005448 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	0018      	movs	r0, r3
 800543e:	f000 fd9d 	bl	8005f7c <vPortFree>
 8005442:	e001      	b.n	8005448 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005444:	2300      	movs	r3, #0
 8005446:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d01a      	beq.n	8005484 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	2251      	movs	r2, #81	; 0x51
 8005452:	2100      	movs	r1, #0
 8005454:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005456:	1dbb      	adds	r3, r7, #6
 8005458:	881a      	ldrh	r2, [r3, #0]
 800545a:	683c      	ldr	r4, [r7, #0]
 800545c:	68b9      	ldr	r1, [r7, #8]
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	2300      	movs	r3, #0
 8005462:	9303      	str	r3, [sp, #12]
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	9302      	str	r3, [sp, #8]
 8005468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546a:	9301      	str	r3, [sp, #4]
 800546c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546e:	9300      	str	r3, [sp, #0]
 8005470:	0023      	movs	r3, r4
 8005472:	f000 f80f 	bl	8005494 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	0018      	movs	r0, r3
 800547a:	f000 f885 	bl	8005588 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800547e:	2301      	movs	r3, #1
 8005480:	61bb      	str	r3, [r7, #24]
 8005482:	e002      	b.n	800548a <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005484:	2301      	movs	r3, #1
 8005486:	425b      	negs	r3, r3
 8005488:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800548a:	69bb      	ldr	r3, [r7, #24]
	}
 800548c:	0018      	movs	r0, r3
 800548e:	46bd      	mov	sp, r7
 8005490:	b009      	add	sp, #36	; 0x24
 8005492:	bd90      	pop	{r4, r7, pc}

08005494 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
 80054a0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80054a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4936      	ldr	r1, [pc, #216]	; (8005584 <prvInitialiseNewTask+0xf0>)
 80054aa:	468c      	mov	ip, r1
 80054ac:	4463      	add	r3, ip
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	18d3      	adds	r3, r2, r3
 80054b2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	2207      	movs	r2, #7
 80054b8:	4393      	bics	r3, r2
 80054ba:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	2207      	movs	r2, #7
 80054c0:	4013      	ands	r3, r2
 80054c2:	d001      	beq.n	80054c8 <prvInitialiseNewTask+0x34>
 80054c4:	b672      	cpsid	i
 80054c6:	e7fe      	b.n	80054c6 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054c8:	2300      	movs	r3, #0
 80054ca:	617b      	str	r3, [r7, #20]
 80054cc:	e013      	b.n	80054f6 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	18d3      	adds	r3, r2, r3
 80054d4:	7818      	ldrb	r0, [r3, #0]
 80054d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054d8:	2134      	movs	r1, #52	; 0x34
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	18d3      	adds	r3, r2, r3
 80054de:	185b      	adds	r3, r3, r1
 80054e0:	1c02      	adds	r2, r0, #0
 80054e2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	18d3      	adds	r3, r2, r3
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d006      	beq.n	80054fe <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	3301      	adds	r3, #1
 80054f4:	617b      	str	r3, [r7, #20]
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2b0f      	cmp	r3, #15
 80054fa:	d9e8      	bls.n	80054ce <prvInitialiseNewTask+0x3a>
 80054fc:	e000      	b.n	8005500 <prvInitialiseNewTask+0x6c>
		{
			break;
 80054fe:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005502:	2243      	movs	r2, #67	; 0x43
 8005504:	2100      	movs	r1, #0
 8005506:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	2b06      	cmp	r3, #6
 800550c:	d901      	bls.n	8005512 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800550e:	2306      	movs	r3, #6
 8005510:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005514:	6a3a      	ldr	r2, [r7, #32]
 8005516:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551a:	6a3a      	ldr	r2, [r7, #32]
 800551c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800551e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005520:	2200      	movs	r2, #0
 8005522:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005526:	3304      	adds	r3, #4
 8005528:	0018      	movs	r0, r3
 800552a:	f7ff fecf 	bl	80052cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800552e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005530:	3318      	adds	r3, #24
 8005532:	0018      	movs	r0, r3
 8005534:	f7ff feca 	bl	80052cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800553c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	2207      	movs	r2, #7
 8005542:	1ad2      	subs	r2, r2, r3
 8005544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005546:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800554c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800554e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005550:	2200      	movs	r2, #0
 8005552:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005556:	2250      	movs	r2, #80	; 0x50
 8005558:	2100      	movs	r1, #0
 800555a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	68f9      	ldr	r1, [r7, #12]
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	0018      	movs	r0, r3
 8005564:	f000 fb2e 	bl	8005bc4 <pxPortInitialiseStack>
 8005568:	0002      	movs	r2, r0
 800556a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	2b00      	cmp	r3, #0
 8005572:	d002      	beq.n	800557a <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005578:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800557a:	46c0      	nop			; (mov r8, r8)
 800557c:	46bd      	mov	sp, r7
 800557e:	b006      	add	sp, #24
 8005580:	bd80      	pop	{r7, pc}
 8005582:	46c0      	nop			; (mov r8, r8)
 8005584:	3fffffff 	.word	0x3fffffff

08005588 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005590:	f000 fbb6 	bl	8005d00 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005594:	4b28      	ldr	r3, [pc, #160]	; (8005638 <prvAddNewTaskToReadyList+0xb0>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	1c5a      	adds	r2, r3, #1
 800559a:	4b27      	ldr	r3, [pc, #156]	; (8005638 <prvAddNewTaskToReadyList+0xb0>)
 800559c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800559e:	4b27      	ldr	r3, [pc, #156]	; (800563c <prvAddNewTaskToReadyList+0xb4>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d109      	bne.n	80055ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80055a6:	4b25      	ldr	r3, [pc, #148]	; (800563c <prvAddNewTaskToReadyList+0xb4>)
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055ac:	4b22      	ldr	r3, [pc, #136]	; (8005638 <prvAddNewTaskToReadyList+0xb0>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d110      	bne.n	80055d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80055b4:	f000 fa48 	bl	8005a48 <prvInitialiseTaskLists>
 80055b8:	e00d      	b.n	80055d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80055ba:	4b21      	ldr	r3, [pc, #132]	; (8005640 <prvAddNewTaskToReadyList+0xb8>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d109      	bne.n	80055d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80055c2:	4b1e      	ldr	r3, [pc, #120]	; (800563c <prvAddNewTaskToReadyList+0xb4>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d802      	bhi.n	80055d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80055d0:	4b1a      	ldr	r3, [pc, #104]	; (800563c <prvAddNewTaskToReadyList+0xb4>)
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80055d6:	4b1b      	ldr	r3, [pc, #108]	; (8005644 <prvAddNewTaskToReadyList+0xbc>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	1c5a      	adds	r2, r3, #1
 80055dc:	4b19      	ldr	r3, [pc, #100]	; (8005644 <prvAddNewTaskToReadyList+0xbc>)
 80055de:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e4:	4b18      	ldr	r3, [pc, #96]	; (8005648 <prvAddNewTaskToReadyList+0xc0>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d903      	bls.n	80055f4 <prvAddNewTaskToReadyList+0x6c>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f0:	4b15      	ldr	r3, [pc, #84]	; (8005648 <prvAddNewTaskToReadyList+0xc0>)
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f8:	0013      	movs	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	189b      	adds	r3, r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4a12      	ldr	r2, [pc, #72]	; (800564c <prvAddNewTaskToReadyList+0xc4>)
 8005602:	189a      	adds	r2, r3, r2
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	3304      	adds	r3, #4
 8005608:	0019      	movs	r1, r3
 800560a:	0010      	movs	r0, r2
 800560c:	f7ff fe69 	bl	80052e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005610:	f000 fb88 	bl	8005d24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005614:	4b0a      	ldr	r3, [pc, #40]	; (8005640 <prvAddNewTaskToReadyList+0xb8>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d008      	beq.n	800562e <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800561c:	4b07      	ldr	r3, [pc, #28]	; (800563c <prvAddNewTaskToReadyList+0xb4>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005626:	429a      	cmp	r2, r3
 8005628:	d201      	bcs.n	800562e <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800562a:	f000 fb59 	bl	8005ce0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800562e:	46c0      	nop			; (mov r8, r8)
 8005630:	46bd      	mov	sp, r7
 8005632:	b002      	add	sp, #8
 8005634:	bd80      	pop	{r7, pc}
 8005636:	46c0      	nop			; (mov r8, r8)
 8005638:	20000594 	.word	0x20000594
 800563c:	20000494 	.word	0x20000494
 8005640:	200005a0 	.word	0x200005a0
 8005644:	200005b0 	.word	0x200005b0
 8005648:	2000059c 	.word	0x2000059c
 800564c:	20000498 	.word	0x20000498

08005650 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005650:	b590      	push	{r4, r7, lr}
 8005652:	b089      	sub	sp, #36	; 0x24
 8005654:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005656:	2300      	movs	r3, #0
 8005658:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800565a:	2300      	movs	r3, #0
 800565c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800565e:	003a      	movs	r2, r7
 8005660:	1d39      	adds	r1, r7, #4
 8005662:	2308      	movs	r3, #8
 8005664:	18fb      	adds	r3, r7, r3
 8005666:	0018      	movs	r0, r3
 8005668:	f7fb fff2 	bl	8001650 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800566c:	683c      	ldr	r4, [r7, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	4918      	ldr	r1, [pc, #96]	; (80056d4 <vTaskStartScheduler+0x84>)
 8005674:	4818      	ldr	r0, [pc, #96]	; (80056d8 <vTaskStartScheduler+0x88>)
 8005676:	9202      	str	r2, [sp, #8]
 8005678:	9301      	str	r3, [sp, #4]
 800567a:	2300      	movs	r3, #0
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	2300      	movs	r3, #0
 8005680:	0022      	movs	r2, r4
 8005682:	f7ff fe78 	bl	8005376 <xTaskCreateStatic>
 8005686:	0002      	movs	r2, r0
 8005688:	4b14      	ldr	r3, [pc, #80]	; (80056dc <vTaskStartScheduler+0x8c>)
 800568a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800568c:	4b13      	ldr	r3, [pc, #76]	; (80056dc <vTaskStartScheduler+0x8c>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005694:	2301      	movs	r3, #1
 8005696:	60fb      	str	r3, [r7, #12]
 8005698:	e001      	b.n	800569e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800569a:	2300      	movs	r3, #0
 800569c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d10d      	bne.n	80056c0 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80056a4:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80056a6:	4b0e      	ldr	r3, [pc, #56]	; (80056e0 <vTaskStartScheduler+0x90>)
 80056a8:	2201      	movs	r2, #1
 80056aa:	4252      	negs	r2, r2
 80056ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80056ae:	4b0d      	ldr	r3, [pc, #52]	; (80056e4 <vTaskStartScheduler+0x94>)
 80056b0:	2201      	movs	r2, #1
 80056b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80056b4:	4b0c      	ldr	r3, [pc, #48]	; (80056e8 <vTaskStartScheduler+0x98>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80056ba:	f000 faed 	bl	8005c98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80056be:	e004      	b.n	80056ca <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	3301      	adds	r3, #1
 80056c4:	d101      	bne.n	80056ca <vTaskStartScheduler+0x7a>
 80056c6:	b672      	cpsid	i
 80056c8:	e7fe      	b.n	80056c8 <vTaskStartScheduler+0x78>
}
 80056ca:	46c0      	nop			; (mov r8, r8)
 80056cc:	46bd      	mov	sp, r7
 80056ce:	b005      	add	sp, #20
 80056d0:	bd90      	pop	{r4, r7, pc}
 80056d2:	46c0      	nop			; (mov r8, r8)
 80056d4:	08006cf8 	.word	0x08006cf8
 80056d8:	08005a29 	.word	0x08005a29
 80056dc:	200005b8 	.word	0x200005b8
 80056e0:	200005b4 	.word	0x200005b4
 80056e4:	200005a0 	.word	0x200005a0
 80056e8:	20000598 	.word	0x20000598

080056ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80056f0:	4b03      	ldr	r3, [pc, #12]	; (8005700 <vTaskSuspendAll+0x14>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	1c5a      	adds	r2, r3, #1
 80056f6:	4b02      	ldr	r3, [pc, #8]	; (8005700 <vTaskSuspendAll+0x14>)
 80056f8:	601a      	str	r2, [r3, #0]
}
 80056fa:	46c0      	nop			; (mov r8, r8)
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	200005bc 	.word	0x200005bc

08005704 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800570a:	2300      	movs	r3, #0
 800570c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800570e:	2300      	movs	r3, #0
 8005710:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005712:	4b3a      	ldr	r3, [pc, #232]	; (80057fc <xTaskResumeAll+0xf8>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <xTaskResumeAll+0x1a>
 800571a:	b672      	cpsid	i
 800571c:	e7fe      	b.n	800571c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800571e:	f000 faef 	bl	8005d00 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005722:	4b36      	ldr	r3, [pc, #216]	; (80057fc <xTaskResumeAll+0xf8>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	1e5a      	subs	r2, r3, #1
 8005728:	4b34      	ldr	r3, [pc, #208]	; (80057fc <xTaskResumeAll+0xf8>)
 800572a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800572c:	4b33      	ldr	r3, [pc, #204]	; (80057fc <xTaskResumeAll+0xf8>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d15b      	bne.n	80057ec <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005734:	4b32      	ldr	r3, [pc, #200]	; (8005800 <xTaskResumeAll+0xfc>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d057      	beq.n	80057ec <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800573c:	e02f      	b.n	800579e <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800573e:	4b31      	ldr	r3, [pc, #196]	; (8005804 <xTaskResumeAll+0x100>)
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	3318      	adds	r3, #24
 800574a:	0018      	movs	r0, r3
 800574c:	f7ff fdeb 	bl	8005326 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	3304      	adds	r3, #4
 8005754:	0018      	movs	r0, r3
 8005756:	f7ff fde6 	bl	8005326 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800575e:	4b2a      	ldr	r3, [pc, #168]	; (8005808 <xTaskResumeAll+0x104>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	429a      	cmp	r2, r3
 8005764:	d903      	bls.n	800576e <xTaskResumeAll+0x6a>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800576a:	4b27      	ldr	r3, [pc, #156]	; (8005808 <xTaskResumeAll+0x104>)
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005772:	0013      	movs	r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	189b      	adds	r3, r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4a24      	ldr	r2, [pc, #144]	; (800580c <xTaskResumeAll+0x108>)
 800577c:	189a      	adds	r2, r3, r2
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	3304      	adds	r3, #4
 8005782:	0019      	movs	r1, r3
 8005784:	0010      	movs	r0, r2
 8005786:	f7ff fdac 	bl	80052e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800578e:	4b20      	ldr	r3, [pc, #128]	; (8005810 <xTaskResumeAll+0x10c>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005794:	429a      	cmp	r2, r3
 8005796:	d302      	bcc.n	800579e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8005798:	4b1e      	ldr	r3, [pc, #120]	; (8005814 <xTaskResumeAll+0x110>)
 800579a:	2201      	movs	r2, #1
 800579c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800579e:	4b19      	ldr	r3, [pc, #100]	; (8005804 <xTaskResumeAll+0x100>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1cb      	bne.n	800573e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80057ac:	f000 f9e6 	bl	8005b7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80057b0:	4b19      	ldr	r3, [pc, #100]	; (8005818 <xTaskResumeAll+0x114>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00f      	beq.n	80057dc <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80057bc:	f000 f82e 	bl	800581c <xTaskIncrementTick>
 80057c0:	1e03      	subs	r3, r0, #0
 80057c2:	d002      	beq.n	80057ca <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80057c4:	4b13      	ldr	r3, [pc, #76]	; (8005814 <xTaskResumeAll+0x110>)
 80057c6:	2201      	movs	r2, #1
 80057c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	3b01      	subs	r3, #1
 80057ce:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1f2      	bne.n	80057bc <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80057d6:	4b10      	ldr	r3, [pc, #64]	; (8005818 <xTaskResumeAll+0x114>)
 80057d8:	2200      	movs	r2, #0
 80057da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80057dc:	4b0d      	ldr	r3, [pc, #52]	; (8005814 <xTaskResumeAll+0x110>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d003      	beq.n	80057ec <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80057e4:	2301      	movs	r3, #1
 80057e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80057e8:	f000 fa7a 	bl	8005ce0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057ec:	f000 fa9a 	bl	8005d24 <vPortExitCritical>

	return xAlreadyYielded;
 80057f0:	68bb      	ldr	r3, [r7, #8]
}
 80057f2:	0018      	movs	r0, r3
 80057f4:	46bd      	mov	sp, r7
 80057f6:	b004      	add	sp, #16
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	46c0      	nop			; (mov r8, r8)
 80057fc:	200005bc 	.word	0x200005bc
 8005800:	20000594 	.word	0x20000594
 8005804:	20000554 	.word	0x20000554
 8005808:	2000059c 	.word	0x2000059c
 800580c:	20000498 	.word	0x20000498
 8005810:	20000494 	.word	0x20000494
 8005814:	200005a8 	.word	0x200005a8
 8005818:	200005a4 	.word	0x200005a4

0800581c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005822:	2300      	movs	r3, #0
 8005824:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005826:	4b4c      	ldr	r3, [pc, #304]	; (8005958 <xTaskIncrementTick+0x13c>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d000      	beq.n	8005830 <xTaskIncrementTick+0x14>
 800582e:	e083      	b.n	8005938 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005830:	4b4a      	ldr	r3, [pc, #296]	; (800595c <xTaskIncrementTick+0x140>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	3301      	adds	r3, #1
 8005836:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005838:	4b48      	ldr	r3, [pc, #288]	; (800595c <xTaskIncrementTick+0x140>)
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d117      	bne.n	8005874 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8005844:	4b46      	ldr	r3, [pc, #280]	; (8005960 <xTaskIncrementTick+0x144>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <xTaskIncrementTick+0x36>
 800584e:	b672      	cpsid	i
 8005850:	e7fe      	b.n	8005850 <xTaskIncrementTick+0x34>
 8005852:	4b43      	ldr	r3, [pc, #268]	; (8005960 <xTaskIncrementTick+0x144>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	4b42      	ldr	r3, [pc, #264]	; (8005964 <xTaskIncrementTick+0x148>)
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	4b40      	ldr	r3, [pc, #256]	; (8005960 <xTaskIncrementTick+0x144>)
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	4b40      	ldr	r3, [pc, #256]	; (8005964 <xTaskIncrementTick+0x148>)
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	601a      	str	r2, [r3, #0]
 8005866:	4b40      	ldr	r3, [pc, #256]	; (8005968 <xTaskIncrementTick+0x14c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	1c5a      	adds	r2, r3, #1
 800586c:	4b3e      	ldr	r3, [pc, #248]	; (8005968 <xTaskIncrementTick+0x14c>)
 800586e:	601a      	str	r2, [r3, #0]
 8005870:	f000 f984 	bl	8005b7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005874:	4b3d      	ldr	r3, [pc, #244]	; (800596c <xTaskIncrementTick+0x150>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	429a      	cmp	r2, r3
 800587c:	d34e      	bcc.n	800591c <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800587e:	4b38      	ldr	r3, [pc, #224]	; (8005960 <xTaskIncrementTick+0x144>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <xTaskIncrementTick+0x70>
 8005888:	2301      	movs	r3, #1
 800588a:	e000      	b.n	800588e <xTaskIncrementTick+0x72>
 800588c:	2300      	movs	r3, #0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d004      	beq.n	800589c <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005892:	4b36      	ldr	r3, [pc, #216]	; (800596c <xTaskIncrementTick+0x150>)
 8005894:	2201      	movs	r2, #1
 8005896:	4252      	negs	r2, r2
 8005898:	601a      	str	r2, [r3, #0]
					break;
 800589a:	e03f      	b.n	800591c <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800589c:	4b30      	ldr	r3, [pc, #192]	; (8005960 <xTaskIncrementTick+0x144>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d203      	bcs.n	80058bc <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80058b4:	4b2d      	ldr	r3, [pc, #180]	; (800596c <xTaskIncrementTick+0x150>)
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	601a      	str	r2, [r3, #0]
						break;
 80058ba:	e02f      	b.n	800591c <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	3304      	adds	r3, #4
 80058c0:	0018      	movs	r0, r3
 80058c2:	f7ff fd30 	bl	8005326 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d004      	beq.n	80058d8 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	3318      	adds	r3, #24
 80058d2:	0018      	movs	r0, r3
 80058d4:	f7ff fd27 	bl	8005326 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058dc:	4b24      	ldr	r3, [pc, #144]	; (8005970 <xTaskIncrementTick+0x154>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d903      	bls.n	80058ec <xTaskIncrementTick+0xd0>
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e8:	4b21      	ldr	r3, [pc, #132]	; (8005970 <xTaskIncrementTick+0x154>)
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f0:	0013      	movs	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	189b      	adds	r3, r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4a1e      	ldr	r2, [pc, #120]	; (8005974 <xTaskIncrementTick+0x158>)
 80058fa:	189a      	adds	r2, r3, r2
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	3304      	adds	r3, #4
 8005900:	0019      	movs	r1, r3
 8005902:	0010      	movs	r0, r2
 8005904:	f7ff fced 	bl	80052e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800590c:	4b1a      	ldr	r3, [pc, #104]	; (8005978 <xTaskIncrementTick+0x15c>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005912:	429a      	cmp	r2, r3
 8005914:	d3b3      	bcc.n	800587e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8005916:	2301      	movs	r3, #1
 8005918:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800591a:	e7b0      	b.n	800587e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800591c:	4b16      	ldr	r3, [pc, #88]	; (8005978 <xTaskIncrementTick+0x15c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005922:	4914      	ldr	r1, [pc, #80]	; (8005974 <xTaskIncrementTick+0x158>)
 8005924:	0013      	movs	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	189b      	adds	r3, r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	585b      	ldr	r3, [r3, r1]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d907      	bls.n	8005942 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005932:	2301      	movs	r3, #1
 8005934:	617b      	str	r3, [r7, #20]
 8005936:	e004      	b.n	8005942 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005938:	4b10      	ldr	r3, [pc, #64]	; (800597c <xTaskIncrementTick+0x160>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	1c5a      	adds	r2, r3, #1
 800593e:	4b0f      	ldr	r3, [pc, #60]	; (800597c <xTaskIncrementTick+0x160>)
 8005940:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005942:	4b0f      	ldr	r3, [pc, #60]	; (8005980 <xTaskIncrementTick+0x164>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 800594a:	2301      	movs	r3, #1
 800594c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800594e:	697b      	ldr	r3, [r7, #20]
}
 8005950:	0018      	movs	r0, r3
 8005952:	46bd      	mov	sp, r7
 8005954:	b006      	add	sp, #24
 8005956:	bd80      	pop	{r7, pc}
 8005958:	200005bc 	.word	0x200005bc
 800595c:	20000598 	.word	0x20000598
 8005960:	2000054c 	.word	0x2000054c
 8005964:	20000550 	.word	0x20000550
 8005968:	200005ac 	.word	0x200005ac
 800596c:	200005b4 	.word	0x200005b4
 8005970:	2000059c 	.word	0x2000059c
 8005974:	20000498 	.word	0x20000498
 8005978:	20000494 	.word	0x20000494
 800597c:	200005a4 	.word	0x200005a4
 8005980:	200005a8 	.word	0x200005a8

08005984 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800598a:	4b22      	ldr	r3, [pc, #136]	; (8005a14 <vTaskSwitchContext+0x90>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005992:	4b21      	ldr	r3, [pc, #132]	; (8005a18 <vTaskSwitchContext+0x94>)
 8005994:	2201      	movs	r2, #1
 8005996:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005998:	e037      	b.n	8005a0a <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 800599a:	4b1f      	ldr	r3, [pc, #124]	; (8005a18 <vTaskSwitchContext+0x94>)
 800599c:	2200      	movs	r2, #0
 800599e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80059a0:	4b1e      	ldr	r3, [pc, #120]	; (8005a1c <vTaskSwitchContext+0x98>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	607b      	str	r3, [r7, #4]
 80059a6:	e007      	b.n	80059b8 <vTaskSwitchContext+0x34>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <vTaskSwitchContext+0x2e>
 80059ae:	b672      	cpsid	i
 80059b0:	e7fe      	b.n	80059b0 <vTaskSwitchContext+0x2c>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	3b01      	subs	r3, #1
 80059b6:	607b      	str	r3, [r7, #4]
 80059b8:	4919      	ldr	r1, [pc, #100]	; (8005a20 <vTaskSwitchContext+0x9c>)
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	0013      	movs	r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	189b      	adds	r3, r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	585b      	ldr	r3, [r3, r1]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d0ee      	beq.n	80059a8 <vTaskSwitchContext+0x24>
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	0013      	movs	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	189b      	adds	r3, r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4a12      	ldr	r2, [pc, #72]	; (8005a20 <vTaskSwitchContext+0x9c>)
 80059d6:	189b      	adds	r3, r3, r2
 80059d8:	603b      	str	r3, [r7, #0]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	605a      	str	r2, [r3, #4]
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	3308      	adds	r3, #8
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d104      	bne.n	80059fa <vTaskSwitchContext+0x76>
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	605a      	str	r2, [r3, #4]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	68da      	ldr	r2, [r3, #12]
 8005a00:	4b08      	ldr	r3, [pc, #32]	; (8005a24 <vTaskSwitchContext+0xa0>)
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	4b05      	ldr	r3, [pc, #20]	; (8005a1c <vTaskSwitchContext+0x98>)
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	601a      	str	r2, [r3, #0]
}
 8005a0a:	46c0      	nop			; (mov r8, r8)
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	b002      	add	sp, #8
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	46c0      	nop			; (mov r8, r8)
 8005a14:	200005bc 	.word	0x200005bc
 8005a18:	200005a8 	.word	0x200005a8
 8005a1c:	2000059c 	.word	0x2000059c
 8005a20:	20000498 	.word	0x20000498
 8005a24:	20000494 	.word	0x20000494

08005a28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a30:	f000 f84e 	bl	8005ad0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a34:	4b03      	ldr	r3, [pc, #12]	; (8005a44 <prvIdleTask+0x1c>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d9f9      	bls.n	8005a30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a3c:	f000 f950 	bl	8005ce0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8005a40:	e7f6      	b.n	8005a30 <prvIdleTask+0x8>
 8005a42:	46c0      	nop			; (mov r8, r8)
 8005a44:	20000498 	.word	0x20000498

08005a48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a4e:	2300      	movs	r3, #0
 8005a50:	607b      	str	r3, [r7, #4]
 8005a52:	e00c      	b.n	8005a6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	0013      	movs	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	189b      	adds	r3, r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4a14      	ldr	r2, [pc, #80]	; (8005ab0 <prvInitialiseTaskLists+0x68>)
 8005a60:	189b      	adds	r3, r3, r2
 8005a62:	0018      	movs	r0, r3
 8005a64:	f7ff fc14 	bl	8005290 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	607b      	str	r3, [r7, #4]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b06      	cmp	r3, #6
 8005a72:	d9ef      	bls.n	8005a54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a74:	4b0f      	ldr	r3, [pc, #60]	; (8005ab4 <prvInitialiseTaskLists+0x6c>)
 8005a76:	0018      	movs	r0, r3
 8005a78:	f7ff fc0a 	bl	8005290 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a7c:	4b0e      	ldr	r3, [pc, #56]	; (8005ab8 <prvInitialiseTaskLists+0x70>)
 8005a7e:	0018      	movs	r0, r3
 8005a80:	f7ff fc06 	bl	8005290 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a84:	4b0d      	ldr	r3, [pc, #52]	; (8005abc <prvInitialiseTaskLists+0x74>)
 8005a86:	0018      	movs	r0, r3
 8005a88:	f7ff fc02 	bl	8005290 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a8c:	4b0c      	ldr	r3, [pc, #48]	; (8005ac0 <prvInitialiseTaskLists+0x78>)
 8005a8e:	0018      	movs	r0, r3
 8005a90:	f7ff fbfe 	bl	8005290 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a94:	4b0b      	ldr	r3, [pc, #44]	; (8005ac4 <prvInitialiseTaskLists+0x7c>)
 8005a96:	0018      	movs	r0, r3
 8005a98:	f7ff fbfa 	bl	8005290 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a9c:	4b0a      	ldr	r3, [pc, #40]	; (8005ac8 <prvInitialiseTaskLists+0x80>)
 8005a9e:	4a05      	ldr	r2, [pc, #20]	; (8005ab4 <prvInitialiseTaskLists+0x6c>)
 8005aa0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005aa2:	4b0a      	ldr	r3, [pc, #40]	; (8005acc <prvInitialiseTaskLists+0x84>)
 8005aa4:	4a04      	ldr	r2, [pc, #16]	; (8005ab8 <prvInitialiseTaskLists+0x70>)
 8005aa6:	601a      	str	r2, [r3, #0]
}
 8005aa8:	46c0      	nop			; (mov r8, r8)
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	b002      	add	sp, #8
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	20000498 	.word	0x20000498
 8005ab4:	20000524 	.word	0x20000524
 8005ab8:	20000538 	.word	0x20000538
 8005abc:	20000554 	.word	0x20000554
 8005ac0:	20000568 	.word	0x20000568
 8005ac4:	20000580 	.word	0x20000580
 8005ac8:	2000054c 	.word	0x2000054c
 8005acc:	20000550 	.word	0x20000550

08005ad0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ad6:	e01a      	b.n	8005b0e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8005ad8:	f000 f912 	bl	8005d00 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005adc:	4b10      	ldr	r3, [pc, #64]	; (8005b20 <prvCheckTasksWaitingTermination+0x50>)
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	3304      	adds	r3, #4
 8005ae8:	0018      	movs	r0, r3
 8005aea:	f7ff fc1c 	bl	8005326 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005aee:	4b0d      	ldr	r3, [pc, #52]	; (8005b24 <prvCheckTasksWaitingTermination+0x54>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	1e5a      	subs	r2, r3, #1
 8005af4:	4b0b      	ldr	r3, [pc, #44]	; (8005b24 <prvCheckTasksWaitingTermination+0x54>)
 8005af6:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005af8:	4b0b      	ldr	r3, [pc, #44]	; (8005b28 <prvCheckTasksWaitingTermination+0x58>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	1e5a      	subs	r2, r3, #1
 8005afe:	4b0a      	ldr	r3, [pc, #40]	; (8005b28 <prvCheckTasksWaitingTermination+0x58>)
 8005b00:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8005b02:	f000 f90f 	bl	8005d24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	0018      	movs	r0, r3
 8005b0a:	f000 f80f 	bl	8005b2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b0e:	4b06      	ldr	r3, [pc, #24]	; (8005b28 <prvCheckTasksWaitingTermination+0x58>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1e0      	bne.n	8005ad8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b16:	46c0      	nop			; (mov r8, r8)
 8005b18:	46c0      	nop			; (mov r8, r8)
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	b002      	add	sp, #8
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	20000568 	.word	0x20000568
 8005b24:	20000594 	.word	0x20000594
 8005b28:	2000057c 	.word	0x2000057c

08005b2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2251      	movs	r2, #81	; 0x51
 8005b38:	5c9b      	ldrb	r3, [r3, r2]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d109      	bne.n	8005b52 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b42:	0018      	movs	r0, r3
 8005b44:	f000 fa1a 	bl	8005f7c <vPortFree>
				vPortFree( pxTCB );
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	0018      	movs	r0, r3
 8005b4c:	f000 fa16 	bl	8005f7c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b50:	e010      	b.n	8005b74 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2251      	movs	r2, #81	; 0x51
 8005b56:	5c9b      	ldrb	r3, [r3, r2]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d104      	bne.n	8005b66 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	0018      	movs	r0, r3
 8005b60:	f000 fa0c 	bl	8005f7c <vPortFree>
	}
 8005b64:	e006      	b.n	8005b74 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2251      	movs	r2, #81	; 0x51
 8005b6a:	5c9b      	ldrb	r3, [r3, r2]
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d001      	beq.n	8005b74 <prvDeleteTCB+0x48>
 8005b70:	b672      	cpsid	i
 8005b72:	e7fe      	b.n	8005b72 <prvDeleteTCB+0x46>
	}
 8005b74:	46c0      	nop			; (mov r8, r8)
 8005b76:	46bd      	mov	sp, r7
 8005b78:	b002      	add	sp, #8
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b82:	4b0e      	ldr	r3, [pc, #56]	; (8005bbc <prvResetNextTaskUnblockTime+0x40>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d101      	bne.n	8005b90 <prvResetNextTaskUnblockTime+0x14>
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e000      	b.n	8005b92 <prvResetNextTaskUnblockTime+0x16>
 8005b90:	2300      	movs	r3, #0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d004      	beq.n	8005ba0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b96:	4b0a      	ldr	r3, [pc, #40]	; (8005bc0 <prvResetNextTaskUnblockTime+0x44>)
 8005b98:	2201      	movs	r2, #1
 8005b9a:	4252      	negs	r2, r2
 8005b9c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b9e:	e008      	b.n	8005bb2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005ba0:	4b06      	ldr	r3, [pc, #24]	; (8005bbc <prvResetNextTaskUnblockTime+0x40>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	4b04      	ldr	r3, [pc, #16]	; (8005bc0 <prvResetNextTaskUnblockTime+0x44>)
 8005bb0:	601a      	str	r2, [r3, #0]
}
 8005bb2:	46c0      	nop			; (mov r8, r8)
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	b002      	add	sp, #8
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	46c0      	nop			; (mov r8, r8)
 8005bbc:	2000054c 	.word	0x2000054c
 8005bc0:	200005b4 	.word	0x200005b4

08005bc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	3b04      	subs	r3, #4
 8005bd4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2280      	movs	r2, #128	; 0x80
 8005bda:	0452      	lsls	r2, r2, #17
 8005bdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	3b04      	subs	r3, #4
 8005be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	3b04      	subs	r3, #4
 8005bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005bf0:	4a08      	ldr	r2, [pc, #32]	; (8005c14 <pxPortInitialiseStack+0x50>)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	3b14      	subs	r3, #20
 8005bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	3b20      	subs	r3, #32
 8005c06:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c08:	68fb      	ldr	r3, [r7, #12]
}
 8005c0a:	0018      	movs	r0, r3
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	b004      	add	sp, #16
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	46c0      	nop			; (mov r8, r8)
 8005c14:	08005c19 	.word	0x08005c19

08005c18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c22:	4b08      	ldr	r3, [pc, #32]	; (8005c44 <prvTaskExitError+0x2c>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	3301      	adds	r3, #1
 8005c28:	d001      	beq.n	8005c2e <prvTaskExitError+0x16>
 8005c2a:	b672      	cpsid	i
 8005c2c:	e7fe      	b.n	8005c2c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8005c2e:	b672      	cpsid	i
	while( ulDummy == 0 )
 8005c30:	46c0      	nop			; (mov r8, r8)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d0fc      	beq.n	8005c32 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c38:	46c0      	nop			; (mov r8, r8)
 8005c3a:	46c0      	nop			; (mov r8, r8)
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	b002      	add	sp, #8
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	46c0      	nop			; (mov r8, r8)
 8005c44:	2000001c 	.word	0x2000001c

08005c48 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8005c4c:	46c0      	nop			; (mov r8, r8)
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
	...

08005c60 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005c60:	4a0b      	ldr	r2, [pc, #44]	; (8005c90 <pxCurrentTCBConst2>)
 8005c62:	6813      	ldr	r3, [r2, #0]
 8005c64:	6818      	ldr	r0, [r3, #0]
 8005c66:	3020      	adds	r0, #32
 8005c68:	f380 8809 	msr	PSP, r0
 8005c6c:	2002      	movs	r0, #2
 8005c6e:	f380 8814 	msr	CONTROL, r0
 8005c72:	f3bf 8f6f 	isb	sy
 8005c76:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005c78:	46ae      	mov	lr, r5
 8005c7a:	bc08      	pop	{r3}
 8005c7c:	bc04      	pop	{r2}
 8005c7e:	b662      	cpsie	i
 8005c80:	4718      	bx	r3
 8005c82:	46c0      	nop			; (mov r8, r8)
 8005c84:	46c0      	nop			; (mov r8, r8)
 8005c86:	46c0      	nop			; (mov r8, r8)
 8005c88:	46c0      	nop			; (mov r8, r8)
 8005c8a:	46c0      	nop			; (mov r8, r8)
 8005c8c:	46c0      	nop			; (mov r8, r8)
 8005c8e:	46c0      	nop			; (mov r8, r8)

08005c90 <pxCurrentTCBConst2>:
 8005c90:	20000494 	.word	0x20000494
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8005c94:	46c0      	nop			; (mov r8, r8)
 8005c96:	46c0      	nop			; (mov r8, r8)

08005c98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8005c9c:	4b0e      	ldr	r3, [pc, #56]	; (8005cd8 <xPortStartScheduler+0x40>)
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	4b0d      	ldr	r3, [pc, #52]	; (8005cd8 <xPortStartScheduler+0x40>)
 8005ca2:	21ff      	movs	r1, #255	; 0xff
 8005ca4:	0409      	lsls	r1, r1, #16
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8005caa:	4b0b      	ldr	r3, [pc, #44]	; (8005cd8 <xPortStartScheduler+0x40>)
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	4b0a      	ldr	r3, [pc, #40]	; (8005cd8 <xPortStartScheduler+0x40>)
 8005cb0:	21ff      	movs	r1, #255	; 0xff
 8005cb2:	0609      	lsls	r1, r1, #24
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8005cb8:	f000 f898 	bl	8005dec <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005cbc:	4b07      	ldr	r3, [pc, #28]	; (8005cdc <xPortStartScheduler+0x44>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8005cc2:	f7ff ffcd 	bl	8005c60 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005cc6:	f7ff fe5d 	bl	8005984 <vTaskSwitchContext>
	prvTaskExitError();
 8005cca:	f7ff ffa5 	bl	8005c18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	46c0      	nop			; (mov r8, r8)
 8005cd8:	e000ed20 	.word	0xe000ed20
 8005cdc:	2000001c 	.word	0x2000001c

08005ce0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8005ce4:	4b05      	ldr	r3, [pc, #20]	; (8005cfc <vPortYield+0x1c>)
 8005ce6:	2280      	movs	r2, #128	; 0x80
 8005ce8:	0552      	lsls	r2, r2, #21
 8005cea:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8005cec:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005cf0:	f3bf 8f6f 	isb	sy
}
 8005cf4:	46c0      	nop			; (mov r8, r8)
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	46c0      	nop			; (mov r8, r8)
 8005cfc:	e000ed04 	.word	0xe000ed04

08005d00 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8005d04:	b672      	cpsid	i
    uxCriticalNesting++;
 8005d06:	4b06      	ldr	r3, [pc, #24]	; (8005d20 <vPortEnterCritical+0x20>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	1c5a      	adds	r2, r3, #1
 8005d0c:	4b04      	ldr	r3, [pc, #16]	; (8005d20 <vPortEnterCritical+0x20>)
 8005d0e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005d10:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005d14:	f3bf 8f6f 	isb	sy
}
 8005d18:	46c0      	nop			; (mov r8, r8)
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	46c0      	nop			; (mov r8, r8)
 8005d20:	2000001c 	.word	0x2000001c

08005d24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d28:	4b09      	ldr	r3, [pc, #36]	; (8005d50 <vPortExitCritical+0x2c>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d101      	bne.n	8005d34 <vPortExitCritical+0x10>
 8005d30:	b672      	cpsid	i
 8005d32:	e7fe      	b.n	8005d32 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8005d34:	4b06      	ldr	r3, [pc, #24]	; (8005d50 <vPortExitCritical+0x2c>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	1e5a      	subs	r2, r3, #1
 8005d3a:	4b05      	ldr	r3, [pc, #20]	; (8005d50 <vPortExitCritical+0x2c>)
 8005d3c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8005d3e:	4b04      	ldr	r3, [pc, #16]	; (8005d50 <vPortExitCritical+0x2c>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d100      	bne.n	8005d48 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8005d46:	b662      	cpsie	i
    }
}
 8005d48:	46c0      	nop			; (mov r8, r8)
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	46c0      	nop			; (mov r8, r8)
 8005d50:	2000001c 	.word	0x2000001c

08005d54 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005d54:	f3ef 8010 	mrs	r0, PRIMASK
 8005d58:	b672      	cpsid	i
 8005d5a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8005d5c:	46c0      	nop			; (mov r8, r8)
 8005d5e:	0018      	movs	r0, r3

08005d60 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005d60:	f380 8810 	msr	PRIMASK, r0
 8005d64:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8005d66:	46c0      	nop			; (mov r8, r8)
	...

08005d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d70:	f3ef 8009 	mrs	r0, PSP
 8005d74:	4b0e      	ldr	r3, [pc, #56]	; (8005db0 <pxCurrentTCBConst>)
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	3820      	subs	r0, #32
 8005d7a:	6010      	str	r0, [r2, #0]
 8005d7c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005d7e:	4644      	mov	r4, r8
 8005d80:	464d      	mov	r5, r9
 8005d82:	4656      	mov	r6, sl
 8005d84:	465f      	mov	r7, fp
 8005d86:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005d88:	b508      	push	{r3, lr}
 8005d8a:	b672      	cpsid	i
 8005d8c:	f7ff fdfa 	bl	8005984 <vTaskSwitchContext>
 8005d90:	b662      	cpsie	i
 8005d92:	bc0c      	pop	{r2, r3}
 8005d94:	6811      	ldr	r1, [r2, #0]
 8005d96:	6808      	ldr	r0, [r1, #0]
 8005d98:	3010      	adds	r0, #16
 8005d9a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005d9c:	46a0      	mov	r8, r4
 8005d9e:	46a9      	mov	r9, r5
 8005da0:	46b2      	mov	sl, r6
 8005da2:	46bb      	mov	fp, r7
 8005da4:	f380 8809 	msr	PSP, r0
 8005da8:	3820      	subs	r0, #32
 8005daa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005dac:	4718      	bx	r3
 8005dae:	46c0      	nop			; (mov r8, r8)

08005db0 <pxCurrentTCBConst>:
 8005db0:	20000494 	.word	0x20000494
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005db4:	46c0      	nop			; (mov r8, r8)
 8005db6:	46c0      	nop			; (mov r8, r8)

08005db8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8005dbe:	f7ff ffc9 	bl	8005d54 <ulSetInterruptMaskFromISR>
 8005dc2:	0003      	movs	r3, r0
 8005dc4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005dc6:	f7ff fd29 	bl	800581c <xTaskIncrementTick>
 8005dca:	1e03      	subs	r3, r0, #0
 8005dcc:	d003      	beq.n	8005dd6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8005dce:	4b06      	ldr	r3, [pc, #24]	; (8005de8 <SysTick_Handler+0x30>)
 8005dd0:	2280      	movs	r2, #128	; 0x80
 8005dd2:	0552      	lsls	r2, r2, #21
 8005dd4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	0018      	movs	r0, r3
 8005dda:	f7ff ffc1 	bl	8005d60 <vClearInterruptMaskFromISR>
}
 8005dde:	46c0      	nop			; (mov r8, r8)
 8005de0:	46bd      	mov	sp, r7
 8005de2:	b002      	add	sp, #8
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	46c0      	nop			; (mov r8, r8)
 8005de8:	e000ed04 	.word	0xe000ed04

08005dec <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8005df0:	4b0b      	ldr	r3, [pc, #44]	; (8005e20 <prvSetupTimerInterrupt+0x34>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8005df6:	4b0b      	ldr	r3, [pc, #44]	; (8005e24 <prvSetupTimerInterrupt+0x38>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005dfc:	4b0a      	ldr	r3, [pc, #40]	; (8005e28 <prvSetupTimerInterrupt+0x3c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	22fa      	movs	r2, #250	; 0xfa
 8005e02:	0091      	lsls	r1, r2, #2
 8005e04:	0018      	movs	r0, r3
 8005e06:	f7fa f989 	bl	800011c <__udivsi3>
 8005e0a:	0003      	movs	r3, r0
 8005e0c:	001a      	movs	r2, r3
 8005e0e:	4b07      	ldr	r3, [pc, #28]	; (8005e2c <prvSetupTimerInterrupt+0x40>)
 8005e10:	3a01      	subs	r2, #1
 8005e12:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8005e14:	4b02      	ldr	r3, [pc, #8]	; (8005e20 <prvSetupTimerInterrupt+0x34>)
 8005e16:	2207      	movs	r2, #7
 8005e18:	601a      	str	r2, [r3, #0]
}
 8005e1a:	46c0      	nop			; (mov r8, r8)
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	e000e010 	.word	0xe000e010
 8005e24:	e000e018 	.word	0xe000e018
 8005e28:	20000010 	.word	0x20000010
 8005e2c:	e000e014 	.word	0xe000e014

08005e30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8005e3c:	f7ff fc56 	bl	80056ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005e40:	4b49      	ldr	r3, [pc, #292]	; (8005f68 <pvPortMalloc+0x138>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005e48:	f000 f8e0 	bl	800600c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e4c:	4b47      	ldr	r3, [pc, #284]	; (8005f6c <pvPortMalloc+0x13c>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	4013      	ands	r3, r2
 8005e54:	d000      	beq.n	8005e58 <pvPortMalloc+0x28>
 8005e56:	e079      	b.n	8005f4c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d012      	beq.n	8005e84 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8005e5e:	2208      	movs	r2, #8
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	189b      	adds	r3, r3, r2
 8005e64:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2207      	movs	r2, #7
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	d00a      	beq.n	8005e84 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2207      	movs	r2, #7
 8005e72:	4393      	bics	r3, r2
 8005e74:	3308      	adds	r3, #8
 8005e76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2207      	movs	r2, #7
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	d001      	beq.n	8005e84 <pvPortMalloc+0x54>
 8005e80:	b672      	cpsid	i
 8005e82:	e7fe      	b.n	8005e82 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d060      	beq.n	8005f4c <pvPortMalloc+0x11c>
 8005e8a:	4b39      	ldr	r3, [pc, #228]	; (8005f70 <pvPortMalloc+0x140>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d85b      	bhi.n	8005f4c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005e94:	4b37      	ldr	r3, [pc, #220]	; (8005f74 <pvPortMalloc+0x144>)
 8005e96:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8005e98:	4b36      	ldr	r3, [pc, #216]	; (8005f74 <pvPortMalloc+0x144>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e9e:	e004      	b.n	8005eaa <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d903      	bls.n	8005ebc <pvPortMalloc+0x8c>
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1f1      	bne.n	8005ea0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ebc:	4b2a      	ldr	r3, [pc, #168]	; (8005f68 <pvPortMalloc+0x138>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d042      	beq.n	8005f4c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2208      	movs	r2, #8
 8005ecc:	189b      	adds	r3, r3, r2
 8005ece:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	1ad2      	subs	r2, r2, r3
 8005ee0:	2308      	movs	r3, #8
 8005ee2:	005b      	lsls	r3, r3, #1
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d916      	bls.n	8005f16 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	18d3      	adds	r3, r2, r3
 8005eee:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2207      	movs	r2, #7
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	d001      	beq.n	8005efc <pvPortMalloc+0xcc>
 8005ef8:	b672      	cpsid	i
 8005efa:	e7fe      	b.n	8005efa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	1ad2      	subs	r2, r2, r3
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	0018      	movs	r0, r3
 8005f12:	f000 f8db 	bl	80060cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f16:	4b16      	ldr	r3, [pc, #88]	; (8005f70 <pvPortMalloc+0x140>)
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	1ad2      	subs	r2, r2, r3
 8005f20:	4b13      	ldr	r3, [pc, #76]	; (8005f70 <pvPortMalloc+0x140>)
 8005f22:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f24:	4b12      	ldr	r3, [pc, #72]	; (8005f70 <pvPortMalloc+0x140>)
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	4b13      	ldr	r3, [pc, #76]	; (8005f78 <pvPortMalloc+0x148>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d203      	bcs.n	8005f38 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f30:	4b0f      	ldr	r3, [pc, #60]	; (8005f70 <pvPortMalloc+0x140>)
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	4b10      	ldr	r3, [pc, #64]	; (8005f78 <pvPortMalloc+0x148>)
 8005f36:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	4b0b      	ldr	r3, [pc, #44]	; (8005f6c <pvPortMalloc+0x13c>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	431a      	orrs	r2, r3
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005f4c:	f7ff fbda 	bl	8005704 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2207      	movs	r2, #7
 8005f54:	4013      	ands	r3, r2
 8005f56:	d001      	beq.n	8005f5c <pvPortMalloc+0x12c>
 8005f58:	b672      	cpsid	i
 8005f5a:	e7fe      	b.n	8005f5a <pvPortMalloc+0x12a>
	return pvReturn;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
}
 8005f5e:	0018      	movs	r0, r3
 8005f60:	46bd      	mov	sp, r7
 8005f62:	b006      	add	sp, #24
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	46c0      	nop			; (mov r8, r8)
 8005f68:	200011c8 	.word	0x200011c8
 8005f6c:	200011d4 	.word	0x200011d4
 8005f70:	200011cc 	.word	0x200011cc
 8005f74:	200011c0 	.word	0x200011c0
 8005f78:	200011d0 	.word	0x200011d0

08005f7c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d035      	beq.n	8005ffa <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005f8e:	2308      	movs	r3, #8
 8005f90:	425b      	negs	r3, r3
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	18d3      	adds	r3, r2, r3
 8005f96:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	4b18      	ldr	r3, [pc, #96]	; (8006004 <vPortFree+0x88>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	d101      	bne.n	8005fac <vPortFree+0x30>
 8005fa8:	b672      	cpsid	i
 8005faa:	e7fe      	b.n	8005faa <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <vPortFree+0x3c>
 8005fb4:	b672      	cpsid	i
 8005fb6:	e7fe      	b.n	8005fb6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	4b11      	ldr	r3, [pc, #68]	; (8006004 <vPortFree+0x88>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	d01a      	beq.n	8005ffa <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d116      	bne.n	8005ffa <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	4b0c      	ldr	r3, [pc, #48]	; (8006004 <vPortFree+0x88>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	43db      	mvns	r3, r3
 8005fd6:	401a      	ands	r2, r3
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005fdc:	f7ff fb86 	bl	80056ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	4b08      	ldr	r3, [pc, #32]	; (8006008 <vPortFree+0x8c>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	18d2      	adds	r2, r2, r3
 8005fea:	4b07      	ldr	r3, [pc, #28]	; (8006008 <vPortFree+0x8c>)
 8005fec:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	0018      	movs	r0, r3
 8005ff2:	f000 f86b 	bl	80060cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005ff6:	f7ff fb85 	bl	8005704 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005ffa:	46c0      	nop			; (mov r8, r8)
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	b004      	add	sp, #16
 8006000:	bd80      	pop	{r7, pc}
 8006002:	46c0      	nop			; (mov r8, r8)
 8006004:	200011d4 	.word	0x200011d4
 8006008:	200011cc 	.word	0x200011cc

0800600c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006012:	23c0      	movs	r3, #192	; 0xc0
 8006014:	011b      	lsls	r3, r3, #4
 8006016:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006018:	4b26      	ldr	r3, [pc, #152]	; (80060b4 <prvHeapInit+0xa8>)
 800601a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2207      	movs	r2, #7
 8006020:	4013      	ands	r3, r2
 8006022:	d00c      	beq.n	800603e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	3307      	adds	r3, #7
 8006028:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2207      	movs	r2, #7
 800602e:	4393      	bics	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	1ad2      	subs	r2, r2, r3
 8006038:	4b1e      	ldr	r3, [pc, #120]	; (80060b4 <prvHeapInit+0xa8>)
 800603a:	18d3      	adds	r3, r2, r3
 800603c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006042:	4b1d      	ldr	r3, [pc, #116]	; (80060b8 <prvHeapInit+0xac>)
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006048:	4b1b      	ldr	r3, [pc, #108]	; (80060b8 <prvHeapInit+0xac>)
 800604a:	2200      	movs	r2, #0
 800604c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	18d3      	adds	r3, r2, r3
 8006054:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006056:	2208      	movs	r2, #8
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	1a9b      	subs	r3, r3, r2
 800605c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2207      	movs	r2, #7
 8006062:	4393      	bics	r3, r2
 8006064:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	4b14      	ldr	r3, [pc, #80]	; (80060bc <prvHeapInit+0xb0>)
 800606a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800606c:	4b13      	ldr	r3, [pc, #76]	; (80060bc <prvHeapInit+0xb0>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2200      	movs	r2, #0
 8006072:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006074:	4b11      	ldr	r3, [pc, #68]	; (80060bc <prvHeapInit+0xb0>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2200      	movs	r2, #0
 800607a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	1ad2      	subs	r2, r2, r3
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800608a:	4b0c      	ldr	r3, [pc, #48]	; (80060bc <prvHeapInit+0xb0>)
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	4b0a      	ldr	r3, [pc, #40]	; (80060c0 <prvHeapInit+0xb4>)
 8006098:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	685a      	ldr	r2, [r3, #4]
 800609e:	4b09      	ldr	r3, [pc, #36]	; (80060c4 <prvHeapInit+0xb8>)
 80060a0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80060a2:	4b09      	ldr	r3, [pc, #36]	; (80060c8 <prvHeapInit+0xbc>)
 80060a4:	2280      	movs	r2, #128	; 0x80
 80060a6:	0612      	lsls	r2, r2, #24
 80060a8:	601a      	str	r2, [r3, #0]
}
 80060aa:	46c0      	nop			; (mov r8, r8)
 80060ac:	46bd      	mov	sp, r7
 80060ae:	b004      	add	sp, #16
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	46c0      	nop			; (mov r8, r8)
 80060b4:	200005c0 	.word	0x200005c0
 80060b8:	200011c0 	.word	0x200011c0
 80060bc:	200011c8 	.word	0x200011c8
 80060c0:	200011d0 	.word	0x200011d0
 80060c4:	200011cc 	.word	0x200011cc
 80060c8:	200011d4 	.word	0x200011d4

080060cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80060d4:	4b27      	ldr	r3, [pc, #156]	; (8006174 <prvInsertBlockIntoFreeList+0xa8>)
 80060d6:	60fb      	str	r3, [r7, #12]
 80060d8:	e002      	b.n	80060e0 <prvInsertBlockIntoFreeList+0x14>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	60fb      	str	r3, [r7, #12]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d8f7      	bhi.n	80060da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	18d3      	adds	r3, r2, r3
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d108      	bne.n	800610e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	18d2      	adds	r2, r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	18d2      	adds	r2, r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	429a      	cmp	r2, r3
 8006120:	d118      	bne.n	8006154 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	4b14      	ldr	r3, [pc, #80]	; (8006178 <prvInsertBlockIntoFreeList+0xac>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	429a      	cmp	r2, r3
 800612c:	d00d      	beq.n	800614a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	18d2      	adds	r2, r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	601a      	str	r2, [r3, #0]
 8006148:	e008      	b.n	800615c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800614a:	4b0b      	ldr	r3, [pc, #44]	; (8006178 <prvInsertBlockIntoFreeList+0xac>)
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	601a      	str	r2, [r3, #0]
 8006152:	e003      	b.n	800615c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	429a      	cmp	r2, r3
 8006162:	d002      	beq.n	800616a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800616a:	46c0      	nop			; (mov r8, r8)
 800616c:	46bd      	mov	sp, r7
 800616e:	b004      	add	sp, #16
 8006170:	bd80      	pop	{r7, pc}
 8006172:	46c0      	nop			; (mov r8, r8)
 8006174:	200011c0 	.word	0x200011c0
 8006178:	200011c8 	.word	0x200011c8

0800617c <atoi>:
 800617c:	b510      	push	{r4, lr}
 800617e:	220a      	movs	r2, #10
 8006180:	2100      	movs	r1, #0
 8006182:	f000 f8eb 	bl	800635c <strtol>
 8006186:	bd10      	pop	{r4, pc}

08006188 <__errno>:
 8006188:	4b01      	ldr	r3, [pc, #4]	; (8006190 <__errno+0x8>)
 800618a:	6818      	ldr	r0, [r3, #0]
 800618c:	4770      	bx	lr
 800618e:	46c0      	nop			; (mov r8, r8)
 8006190:	20000020 	.word	0x20000020

08006194 <__libc_init_array>:
 8006194:	b570      	push	{r4, r5, r6, lr}
 8006196:	2600      	movs	r6, #0
 8006198:	4d0c      	ldr	r5, [pc, #48]	; (80061cc <__libc_init_array+0x38>)
 800619a:	4c0d      	ldr	r4, [pc, #52]	; (80061d0 <__libc_init_array+0x3c>)
 800619c:	1b64      	subs	r4, r4, r5
 800619e:	10a4      	asrs	r4, r4, #2
 80061a0:	42a6      	cmp	r6, r4
 80061a2:	d109      	bne.n	80061b8 <__libc_init_array+0x24>
 80061a4:	2600      	movs	r6, #0
 80061a6:	f000 fd25 	bl	8006bf4 <_init>
 80061aa:	4d0a      	ldr	r5, [pc, #40]	; (80061d4 <__libc_init_array+0x40>)
 80061ac:	4c0a      	ldr	r4, [pc, #40]	; (80061d8 <__libc_init_array+0x44>)
 80061ae:	1b64      	subs	r4, r4, r5
 80061b0:	10a4      	asrs	r4, r4, #2
 80061b2:	42a6      	cmp	r6, r4
 80061b4:	d105      	bne.n	80061c2 <__libc_init_array+0x2e>
 80061b6:	bd70      	pop	{r4, r5, r6, pc}
 80061b8:	00b3      	lsls	r3, r6, #2
 80061ba:	58eb      	ldr	r3, [r5, r3]
 80061bc:	4798      	blx	r3
 80061be:	3601      	adds	r6, #1
 80061c0:	e7ee      	b.n	80061a0 <__libc_init_array+0xc>
 80061c2:	00b3      	lsls	r3, r6, #2
 80061c4:	58eb      	ldr	r3, [r5, r3]
 80061c6:	4798      	blx	r3
 80061c8:	3601      	adds	r6, #1
 80061ca:	e7f2      	b.n	80061b2 <__libc_init_array+0x1e>
 80061cc:	08006eec 	.word	0x08006eec
 80061d0:	08006eec 	.word	0x08006eec
 80061d4:	08006eec 	.word	0x08006eec
 80061d8:	08006ef0 	.word	0x08006ef0

080061dc <memcpy>:
 80061dc:	2300      	movs	r3, #0
 80061de:	b510      	push	{r4, lr}
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d100      	bne.n	80061e6 <memcpy+0xa>
 80061e4:	bd10      	pop	{r4, pc}
 80061e6:	5ccc      	ldrb	r4, [r1, r3]
 80061e8:	54c4      	strb	r4, [r0, r3]
 80061ea:	3301      	adds	r3, #1
 80061ec:	e7f8      	b.n	80061e0 <memcpy+0x4>

080061ee <memset>:
 80061ee:	0003      	movs	r3, r0
 80061f0:	1882      	adds	r2, r0, r2
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d100      	bne.n	80061f8 <memset+0xa>
 80061f6:	4770      	bx	lr
 80061f8:	7019      	strb	r1, [r3, #0]
 80061fa:	3301      	adds	r3, #1
 80061fc:	e7f9      	b.n	80061f2 <memset+0x4>
	...

08006200 <siprintf>:
 8006200:	b40e      	push	{r1, r2, r3}
 8006202:	b500      	push	{lr}
 8006204:	490b      	ldr	r1, [pc, #44]	; (8006234 <siprintf+0x34>)
 8006206:	b09c      	sub	sp, #112	; 0x70
 8006208:	ab1d      	add	r3, sp, #116	; 0x74
 800620a:	9002      	str	r0, [sp, #8]
 800620c:	9006      	str	r0, [sp, #24]
 800620e:	9107      	str	r1, [sp, #28]
 8006210:	9104      	str	r1, [sp, #16]
 8006212:	4809      	ldr	r0, [pc, #36]	; (8006238 <siprintf+0x38>)
 8006214:	4909      	ldr	r1, [pc, #36]	; (800623c <siprintf+0x3c>)
 8006216:	cb04      	ldmia	r3!, {r2}
 8006218:	9105      	str	r1, [sp, #20]
 800621a:	6800      	ldr	r0, [r0, #0]
 800621c:	a902      	add	r1, sp, #8
 800621e:	9301      	str	r3, [sp, #4]
 8006220:	f000 f90a 	bl	8006438 <_svfiprintf_r>
 8006224:	2300      	movs	r3, #0
 8006226:	9a02      	ldr	r2, [sp, #8]
 8006228:	7013      	strb	r3, [r2, #0]
 800622a:	b01c      	add	sp, #112	; 0x70
 800622c:	bc08      	pop	{r3}
 800622e:	b003      	add	sp, #12
 8006230:	4718      	bx	r3
 8006232:	46c0      	nop			; (mov r8, r8)
 8006234:	7fffffff 	.word	0x7fffffff
 8006238:	20000020 	.word	0x20000020
 800623c:	ffff0208 	.word	0xffff0208

08006240 <_strtol_l.constprop.0>:
 8006240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006242:	b087      	sub	sp, #28
 8006244:	001e      	movs	r6, r3
 8006246:	9005      	str	r0, [sp, #20]
 8006248:	9101      	str	r1, [sp, #4]
 800624a:	9202      	str	r2, [sp, #8]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d045      	beq.n	80062dc <_strtol_l.constprop.0+0x9c>
 8006250:	000b      	movs	r3, r1
 8006252:	2e24      	cmp	r6, #36	; 0x24
 8006254:	d842      	bhi.n	80062dc <_strtol_l.constprop.0+0x9c>
 8006256:	4a3f      	ldr	r2, [pc, #252]	; (8006354 <_strtol_l.constprop.0+0x114>)
 8006258:	2108      	movs	r1, #8
 800625a:	4694      	mov	ip, r2
 800625c:	001a      	movs	r2, r3
 800625e:	4660      	mov	r0, ip
 8006260:	7814      	ldrb	r4, [r2, #0]
 8006262:	3301      	adds	r3, #1
 8006264:	5d00      	ldrb	r0, [r0, r4]
 8006266:	001d      	movs	r5, r3
 8006268:	0007      	movs	r7, r0
 800626a:	400f      	ands	r7, r1
 800626c:	4208      	tst	r0, r1
 800626e:	d1f5      	bne.n	800625c <_strtol_l.constprop.0+0x1c>
 8006270:	2c2d      	cmp	r4, #45	; 0x2d
 8006272:	d13a      	bne.n	80062ea <_strtol_l.constprop.0+0xaa>
 8006274:	2701      	movs	r7, #1
 8006276:	781c      	ldrb	r4, [r3, #0]
 8006278:	1c95      	adds	r5, r2, #2
 800627a:	2e00      	cmp	r6, #0
 800627c:	d065      	beq.n	800634a <_strtol_l.constprop.0+0x10a>
 800627e:	2e10      	cmp	r6, #16
 8006280:	d109      	bne.n	8006296 <_strtol_l.constprop.0+0x56>
 8006282:	2c30      	cmp	r4, #48	; 0x30
 8006284:	d107      	bne.n	8006296 <_strtol_l.constprop.0+0x56>
 8006286:	2220      	movs	r2, #32
 8006288:	782b      	ldrb	r3, [r5, #0]
 800628a:	4393      	bics	r3, r2
 800628c:	2b58      	cmp	r3, #88	; 0x58
 800628e:	d157      	bne.n	8006340 <_strtol_l.constprop.0+0x100>
 8006290:	2610      	movs	r6, #16
 8006292:	786c      	ldrb	r4, [r5, #1]
 8006294:	3502      	adds	r5, #2
 8006296:	4b30      	ldr	r3, [pc, #192]	; (8006358 <_strtol_l.constprop.0+0x118>)
 8006298:	0031      	movs	r1, r6
 800629a:	18fb      	adds	r3, r7, r3
 800629c:	0018      	movs	r0, r3
 800629e:	9303      	str	r3, [sp, #12]
 80062a0:	f7f9 ffc2 	bl	8000228 <__aeabi_uidivmod>
 80062a4:	2300      	movs	r3, #0
 80062a6:	2201      	movs	r2, #1
 80062a8:	4684      	mov	ip, r0
 80062aa:	0018      	movs	r0, r3
 80062ac:	9104      	str	r1, [sp, #16]
 80062ae:	4252      	negs	r2, r2
 80062b0:	0021      	movs	r1, r4
 80062b2:	3930      	subs	r1, #48	; 0x30
 80062b4:	2909      	cmp	r1, #9
 80062b6:	d81d      	bhi.n	80062f4 <_strtol_l.constprop.0+0xb4>
 80062b8:	000c      	movs	r4, r1
 80062ba:	42a6      	cmp	r6, r4
 80062bc:	dd28      	ble.n	8006310 <_strtol_l.constprop.0+0xd0>
 80062be:	2b00      	cmp	r3, #0
 80062c0:	db24      	blt.n	800630c <_strtol_l.constprop.0+0xcc>
 80062c2:	0013      	movs	r3, r2
 80062c4:	4584      	cmp	ip, r0
 80062c6:	d306      	bcc.n	80062d6 <_strtol_l.constprop.0+0x96>
 80062c8:	d102      	bne.n	80062d0 <_strtol_l.constprop.0+0x90>
 80062ca:	9904      	ldr	r1, [sp, #16]
 80062cc:	42a1      	cmp	r1, r4
 80062ce:	db02      	blt.n	80062d6 <_strtol_l.constprop.0+0x96>
 80062d0:	2301      	movs	r3, #1
 80062d2:	4370      	muls	r0, r6
 80062d4:	1820      	adds	r0, r4, r0
 80062d6:	782c      	ldrb	r4, [r5, #0]
 80062d8:	3501      	adds	r5, #1
 80062da:	e7e9      	b.n	80062b0 <_strtol_l.constprop.0+0x70>
 80062dc:	f7ff ff54 	bl	8006188 <__errno>
 80062e0:	2316      	movs	r3, #22
 80062e2:	6003      	str	r3, [r0, #0]
 80062e4:	2000      	movs	r0, #0
 80062e6:	b007      	add	sp, #28
 80062e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062ea:	2c2b      	cmp	r4, #43	; 0x2b
 80062ec:	d1c5      	bne.n	800627a <_strtol_l.constprop.0+0x3a>
 80062ee:	781c      	ldrb	r4, [r3, #0]
 80062f0:	1c95      	adds	r5, r2, #2
 80062f2:	e7c2      	b.n	800627a <_strtol_l.constprop.0+0x3a>
 80062f4:	0021      	movs	r1, r4
 80062f6:	3941      	subs	r1, #65	; 0x41
 80062f8:	2919      	cmp	r1, #25
 80062fa:	d801      	bhi.n	8006300 <_strtol_l.constprop.0+0xc0>
 80062fc:	3c37      	subs	r4, #55	; 0x37
 80062fe:	e7dc      	b.n	80062ba <_strtol_l.constprop.0+0x7a>
 8006300:	0021      	movs	r1, r4
 8006302:	3961      	subs	r1, #97	; 0x61
 8006304:	2919      	cmp	r1, #25
 8006306:	d803      	bhi.n	8006310 <_strtol_l.constprop.0+0xd0>
 8006308:	3c57      	subs	r4, #87	; 0x57
 800630a:	e7d6      	b.n	80062ba <_strtol_l.constprop.0+0x7a>
 800630c:	0013      	movs	r3, r2
 800630e:	e7e2      	b.n	80062d6 <_strtol_l.constprop.0+0x96>
 8006310:	2b00      	cmp	r3, #0
 8006312:	da09      	bge.n	8006328 <_strtol_l.constprop.0+0xe8>
 8006314:	2322      	movs	r3, #34	; 0x22
 8006316:	9a05      	ldr	r2, [sp, #20]
 8006318:	9803      	ldr	r0, [sp, #12]
 800631a:	6013      	str	r3, [r2, #0]
 800631c:	9b02      	ldr	r3, [sp, #8]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d0e1      	beq.n	80062e6 <_strtol_l.constprop.0+0xa6>
 8006322:	1e6b      	subs	r3, r5, #1
 8006324:	9301      	str	r3, [sp, #4]
 8006326:	e007      	b.n	8006338 <_strtol_l.constprop.0+0xf8>
 8006328:	2f00      	cmp	r7, #0
 800632a:	d000      	beq.n	800632e <_strtol_l.constprop.0+0xee>
 800632c:	4240      	negs	r0, r0
 800632e:	9a02      	ldr	r2, [sp, #8]
 8006330:	2a00      	cmp	r2, #0
 8006332:	d0d8      	beq.n	80062e6 <_strtol_l.constprop.0+0xa6>
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1f4      	bne.n	8006322 <_strtol_l.constprop.0+0xe2>
 8006338:	9b02      	ldr	r3, [sp, #8]
 800633a:	9a01      	ldr	r2, [sp, #4]
 800633c:	601a      	str	r2, [r3, #0]
 800633e:	e7d2      	b.n	80062e6 <_strtol_l.constprop.0+0xa6>
 8006340:	2430      	movs	r4, #48	; 0x30
 8006342:	2e00      	cmp	r6, #0
 8006344:	d1a7      	bne.n	8006296 <_strtol_l.constprop.0+0x56>
 8006346:	3608      	adds	r6, #8
 8006348:	e7a5      	b.n	8006296 <_strtol_l.constprop.0+0x56>
 800634a:	2c30      	cmp	r4, #48	; 0x30
 800634c:	d09b      	beq.n	8006286 <_strtol_l.constprop.0+0x46>
 800634e:	260a      	movs	r6, #10
 8006350:	e7a1      	b.n	8006296 <_strtol_l.constprop.0+0x56>
 8006352:	46c0      	nop			; (mov r8, r8)
 8006354:	08006db9 	.word	0x08006db9
 8006358:	7fffffff 	.word	0x7fffffff

0800635c <strtol>:
 800635c:	b510      	push	{r4, lr}
 800635e:	0013      	movs	r3, r2
 8006360:	000a      	movs	r2, r1
 8006362:	0001      	movs	r1, r0
 8006364:	4802      	ldr	r0, [pc, #8]	; (8006370 <strtol+0x14>)
 8006366:	6800      	ldr	r0, [r0, #0]
 8006368:	f7ff ff6a 	bl	8006240 <_strtol_l.constprop.0>
 800636c:	bd10      	pop	{r4, pc}
 800636e:	46c0      	nop			; (mov r8, r8)
 8006370:	20000020 	.word	0x20000020

08006374 <__ssputs_r>:
 8006374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006376:	688e      	ldr	r6, [r1, #8]
 8006378:	b085      	sub	sp, #20
 800637a:	0007      	movs	r7, r0
 800637c:	000c      	movs	r4, r1
 800637e:	9203      	str	r2, [sp, #12]
 8006380:	9301      	str	r3, [sp, #4]
 8006382:	429e      	cmp	r6, r3
 8006384:	d83c      	bhi.n	8006400 <__ssputs_r+0x8c>
 8006386:	2390      	movs	r3, #144	; 0x90
 8006388:	898a      	ldrh	r2, [r1, #12]
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	421a      	tst	r2, r3
 800638e:	d034      	beq.n	80063fa <__ssputs_r+0x86>
 8006390:	6909      	ldr	r1, [r1, #16]
 8006392:	6823      	ldr	r3, [r4, #0]
 8006394:	6960      	ldr	r0, [r4, #20]
 8006396:	1a5b      	subs	r3, r3, r1
 8006398:	9302      	str	r3, [sp, #8]
 800639a:	2303      	movs	r3, #3
 800639c:	4343      	muls	r3, r0
 800639e:	0fdd      	lsrs	r5, r3, #31
 80063a0:	18ed      	adds	r5, r5, r3
 80063a2:	9b01      	ldr	r3, [sp, #4]
 80063a4:	9802      	ldr	r0, [sp, #8]
 80063a6:	3301      	adds	r3, #1
 80063a8:	181b      	adds	r3, r3, r0
 80063aa:	106d      	asrs	r5, r5, #1
 80063ac:	42ab      	cmp	r3, r5
 80063ae:	d900      	bls.n	80063b2 <__ssputs_r+0x3e>
 80063b0:	001d      	movs	r5, r3
 80063b2:	0553      	lsls	r3, r2, #21
 80063b4:	d532      	bpl.n	800641c <__ssputs_r+0xa8>
 80063b6:	0029      	movs	r1, r5
 80063b8:	0038      	movs	r0, r7
 80063ba:	f000 fb49 	bl	8006a50 <_malloc_r>
 80063be:	1e06      	subs	r6, r0, #0
 80063c0:	d109      	bne.n	80063d6 <__ssputs_r+0x62>
 80063c2:	230c      	movs	r3, #12
 80063c4:	603b      	str	r3, [r7, #0]
 80063c6:	2340      	movs	r3, #64	; 0x40
 80063c8:	2001      	movs	r0, #1
 80063ca:	89a2      	ldrh	r2, [r4, #12]
 80063cc:	4240      	negs	r0, r0
 80063ce:	4313      	orrs	r3, r2
 80063d0:	81a3      	strh	r3, [r4, #12]
 80063d2:	b005      	add	sp, #20
 80063d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063d6:	9a02      	ldr	r2, [sp, #8]
 80063d8:	6921      	ldr	r1, [r4, #16]
 80063da:	f7ff feff 	bl	80061dc <memcpy>
 80063de:	89a3      	ldrh	r3, [r4, #12]
 80063e0:	4a14      	ldr	r2, [pc, #80]	; (8006434 <__ssputs_r+0xc0>)
 80063e2:	401a      	ands	r2, r3
 80063e4:	2380      	movs	r3, #128	; 0x80
 80063e6:	4313      	orrs	r3, r2
 80063e8:	81a3      	strh	r3, [r4, #12]
 80063ea:	9b02      	ldr	r3, [sp, #8]
 80063ec:	6126      	str	r6, [r4, #16]
 80063ee:	18f6      	adds	r6, r6, r3
 80063f0:	6026      	str	r6, [r4, #0]
 80063f2:	6165      	str	r5, [r4, #20]
 80063f4:	9e01      	ldr	r6, [sp, #4]
 80063f6:	1aed      	subs	r5, r5, r3
 80063f8:	60a5      	str	r5, [r4, #8]
 80063fa:	9b01      	ldr	r3, [sp, #4]
 80063fc:	429e      	cmp	r6, r3
 80063fe:	d900      	bls.n	8006402 <__ssputs_r+0x8e>
 8006400:	9e01      	ldr	r6, [sp, #4]
 8006402:	0032      	movs	r2, r6
 8006404:	9903      	ldr	r1, [sp, #12]
 8006406:	6820      	ldr	r0, [r4, #0]
 8006408:	f000 faa3 	bl	8006952 <memmove>
 800640c:	68a3      	ldr	r3, [r4, #8]
 800640e:	2000      	movs	r0, #0
 8006410:	1b9b      	subs	r3, r3, r6
 8006412:	60a3      	str	r3, [r4, #8]
 8006414:	6823      	ldr	r3, [r4, #0]
 8006416:	199e      	adds	r6, r3, r6
 8006418:	6026      	str	r6, [r4, #0]
 800641a:	e7da      	b.n	80063d2 <__ssputs_r+0x5e>
 800641c:	002a      	movs	r2, r5
 800641e:	0038      	movs	r0, r7
 8006420:	f000 fb8c 	bl	8006b3c <_realloc_r>
 8006424:	1e06      	subs	r6, r0, #0
 8006426:	d1e0      	bne.n	80063ea <__ssputs_r+0x76>
 8006428:	0038      	movs	r0, r7
 800642a:	6921      	ldr	r1, [r4, #16]
 800642c:	f000 faa4 	bl	8006978 <_free_r>
 8006430:	e7c7      	b.n	80063c2 <__ssputs_r+0x4e>
 8006432:	46c0      	nop			; (mov r8, r8)
 8006434:	fffffb7f 	.word	0xfffffb7f

08006438 <_svfiprintf_r>:
 8006438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800643a:	b0a1      	sub	sp, #132	; 0x84
 800643c:	9003      	str	r0, [sp, #12]
 800643e:	001d      	movs	r5, r3
 8006440:	898b      	ldrh	r3, [r1, #12]
 8006442:	000f      	movs	r7, r1
 8006444:	0016      	movs	r6, r2
 8006446:	061b      	lsls	r3, r3, #24
 8006448:	d511      	bpl.n	800646e <_svfiprintf_r+0x36>
 800644a:	690b      	ldr	r3, [r1, #16]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10e      	bne.n	800646e <_svfiprintf_r+0x36>
 8006450:	2140      	movs	r1, #64	; 0x40
 8006452:	f000 fafd 	bl	8006a50 <_malloc_r>
 8006456:	6038      	str	r0, [r7, #0]
 8006458:	6138      	str	r0, [r7, #16]
 800645a:	2800      	cmp	r0, #0
 800645c:	d105      	bne.n	800646a <_svfiprintf_r+0x32>
 800645e:	230c      	movs	r3, #12
 8006460:	9a03      	ldr	r2, [sp, #12]
 8006462:	3801      	subs	r0, #1
 8006464:	6013      	str	r3, [r2, #0]
 8006466:	b021      	add	sp, #132	; 0x84
 8006468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800646a:	2340      	movs	r3, #64	; 0x40
 800646c:	617b      	str	r3, [r7, #20]
 800646e:	2300      	movs	r3, #0
 8006470:	ac08      	add	r4, sp, #32
 8006472:	6163      	str	r3, [r4, #20]
 8006474:	3320      	adds	r3, #32
 8006476:	7663      	strb	r3, [r4, #25]
 8006478:	3310      	adds	r3, #16
 800647a:	76a3      	strb	r3, [r4, #26]
 800647c:	9507      	str	r5, [sp, #28]
 800647e:	0035      	movs	r5, r6
 8006480:	782b      	ldrb	r3, [r5, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d001      	beq.n	800648a <_svfiprintf_r+0x52>
 8006486:	2b25      	cmp	r3, #37	; 0x25
 8006488:	d147      	bne.n	800651a <_svfiprintf_r+0xe2>
 800648a:	1bab      	subs	r3, r5, r6
 800648c:	9305      	str	r3, [sp, #20]
 800648e:	42b5      	cmp	r5, r6
 8006490:	d00c      	beq.n	80064ac <_svfiprintf_r+0x74>
 8006492:	0032      	movs	r2, r6
 8006494:	0039      	movs	r1, r7
 8006496:	9803      	ldr	r0, [sp, #12]
 8006498:	f7ff ff6c 	bl	8006374 <__ssputs_r>
 800649c:	1c43      	adds	r3, r0, #1
 800649e:	d100      	bne.n	80064a2 <_svfiprintf_r+0x6a>
 80064a0:	e0ae      	b.n	8006600 <_svfiprintf_r+0x1c8>
 80064a2:	6962      	ldr	r2, [r4, #20]
 80064a4:	9b05      	ldr	r3, [sp, #20]
 80064a6:	4694      	mov	ip, r2
 80064a8:	4463      	add	r3, ip
 80064aa:	6163      	str	r3, [r4, #20]
 80064ac:	782b      	ldrb	r3, [r5, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d100      	bne.n	80064b4 <_svfiprintf_r+0x7c>
 80064b2:	e0a5      	b.n	8006600 <_svfiprintf_r+0x1c8>
 80064b4:	2201      	movs	r2, #1
 80064b6:	2300      	movs	r3, #0
 80064b8:	4252      	negs	r2, r2
 80064ba:	6062      	str	r2, [r4, #4]
 80064bc:	a904      	add	r1, sp, #16
 80064be:	3254      	adds	r2, #84	; 0x54
 80064c0:	1852      	adds	r2, r2, r1
 80064c2:	1c6e      	adds	r6, r5, #1
 80064c4:	6023      	str	r3, [r4, #0]
 80064c6:	60e3      	str	r3, [r4, #12]
 80064c8:	60a3      	str	r3, [r4, #8]
 80064ca:	7013      	strb	r3, [r2, #0]
 80064cc:	65a3      	str	r3, [r4, #88]	; 0x58
 80064ce:	2205      	movs	r2, #5
 80064d0:	7831      	ldrb	r1, [r6, #0]
 80064d2:	4854      	ldr	r0, [pc, #336]	; (8006624 <_svfiprintf_r+0x1ec>)
 80064d4:	f000 fa32 	bl	800693c <memchr>
 80064d8:	1c75      	adds	r5, r6, #1
 80064da:	2800      	cmp	r0, #0
 80064dc:	d11f      	bne.n	800651e <_svfiprintf_r+0xe6>
 80064de:	6822      	ldr	r2, [r4, #0]
 80064e0:	06d3      	lsls	r3, r2, #27
 80064e2:	d504      	bpl.n	80064ee <_svfiprintf_r+0xb6>
 80064e4:	2353      	movs	r3, #83	; 0x53
 80064e6:	a904      	add	r1, sp, #16
 80064e8:	185b      	adds	r3, r3, r1
 80064ea:	2120      	movs	r1, #32
 80064ec:	7019      	strb	r1, [r3, #0]
 80064ee:	0713      	lsls	r3, r2, #28
 80064f0:	d504      	bpl.n	80064fc <_svfiprintf_r+0xc4>
 80064f2:	2353      	movs	r3, #83	; 0x53
 80064f4:	a904      	add	r1, sp, #16
 80064f6:	185b      	adds	r3, r3, r1
 80064f8:	212b      	movs	r1, #43	; 0x2b
 80064fa:	7019      	strb	r1, [r3, #0]
 80064fc:	7833      	ldrb	r3, [r6, #0]
 80064fe:	2b2a      	cmp	r3, #42	; 0x2a
 8006500:	d016      	beq.n	8006530 <_svfiprintf_r+0xf8>
 8006502:	0035      	movs	r5, r6
 8006504:	2100      	movs	r1, #0
 8006506:	200a      	movs	r0, #10
 8006508:	68e3      	ldr	r3, [r4, #12]
 800650a:	782a      	ldrb	r2, [r5, #0]
 800650c:	1c6e      	adds	r6, r5, #1
 800650e:	3a30      	subs	r2, #48	; 0x30
 8006510:	2a09      	cmp	r2, #9
 8006512:	d94e      	bls.n	80065b2 <_svfiprintf_r+0x17a>
 8006514:	2900      	cmp	r1, #0
 8006516:	d111      	bne.n	800653c <_svfiprintf_r+0x104>
 8006518:	e017      	b.n	800654a <_svfiprintf_r+0x112>
 800651a:	3501      	adds	r5, #1
 800651c:	e7b0      	b.n	8006480 <_svfiprintf_r+0x48>
 800651e:	4b41      	ldr	r3, [pc, #260]	; (8006624 <_svfiprintf_r+0x1ec>)
 8006520:	6822      	ldr	r2, [r4, #0]
 8006522:	1ac0      	subs	r0, r0, r3
 8006524:	2301      	movs	r3, #1
 8006526:	4083      	lsls	r3, r0
 8006528:	4313      	orrs	r3, r2
 800652a:	002e      	movs	r6, r5
 800652c:	6023      	str	r3, [r4, #0]
 800652e:	e7ce      	b.n	80064ce <_svfiprintf_r+0x96>
 8006530:	9b07      	ldr	r3, [sp, #28]
 8006532:	1d19      	adds	r1, r3, #4
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	9107      	str	r1, [sp, #28]
 8006538:	2b00      	cmp	r3, #0
 800653a:	db01      	blt.n	8006540 <_svfiprintf_r+0x108>
 800653c:	930b      	str	r3, [sp, #44]	; 0x2c
 800653e:	e004      	b.n	800654a <_svfiprintf_r+0x112>
 8006540:	425b      	negs	r3, r3
 8006542:	60e3      	str	r3, [r4, #12]
 8006544:	2302      	movs	r3, #2
 8006546:	4313      	orrs	r3, r2
 8006548:	6023      	str	r3, [r4, #0]
 800654a:	782b      	ldrb	r3, [r5, #0]
 800654c:	2b2e      	cmp	r3, #46	; 0x2e
 800654e:	d10a      	bne.n	8006566 <_svfiprintf_r+0x12e>
 8006550:	786b      	ldrb	r3, [r5, #1]
 8006552:	2b2a      	cmp	r3, #42	; 0x2a
 8006554:	d135      	bne.n	80065c2 <_svfiprintf_r+0x18a>
 8006556:	9b07      	ldr	r3, [sp, #28]
 8006558:	3502      	adds	r5, #2
 800655a:	1d1a      	adds	r2, r3, #4
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	9207      	str	r2, [sp, #28]
 8006560:	2b00      	cmp	r3, #0
 8006562:	db2b      	blt.n	80065bc <_svfiprintf_r+0x184>
 8006564:	9309      	str	r3, [sp, #36]	; 0x24
 8006566:	4e30      	ldr	r6, [pc, #192]	; (8006628 <_svfiprintf_r+0x1f0>)
 8006568:	2203      	movs	r2, #3
 800656a:	0030      	movs	r0, r6
 800656c:	7829      	ldrb	r1, [r5, #0]
 800656e:	f000 f9e5 	bl	800693c <memchr>
 8006572:	2800      	cmp	r0, #0
 8006574:	d006      	beq.n	8006584 <_svfiprintf_r+0x14c>
 8006576:	2340      	movs	r3, #64	; 0x40
 8006578:	1b80      	subs	r0, r0, r6
 800657a:	4083      	lsls	r3, r0
 800657c:	6822      	ldr	r2, [r4, #0]
 800657e:	3501      	adds	r5, #1
 8006580:	4313      	orrs	r3, r2
 8006582:	6023      	str	r3, [r4, #0]
 8006584:	7829      	ldrb	r1, [r5, #0]
 8006586:	2206      	movs	r2, #6
 8006588:	4828      	ldr	r0, [pc, #160]	; (800662c <_svfiprintf_r+0x1f4>)
 800658a:	1c6e      	adds	r6, r5, #1
 800658c:	7621      	strb	r1, [r4, #24]
 800658e:	f000 f9d5 	bl	800693c <memchr>
 8006592:	2800      	cmp	r0, #0
 8006594:	d03c      	beq.n	8006610 <_svfiprintf_r+0x1d8>
 8006596:	4b26      	ldr	r3, [pc, #152]	; (8006630 <_svfiprintf_r+0x1f8>)
 8006598:	2b00      	cmp	r3, #0
 800659a:	d125      	bne.n	80065e8 <_svfiprintf_r+0x1b0>
 800659c:	2207      	movs	r2, #7
 800659e:	9b07      	ldr	r3, [sp, #28]
 80065a0:	3307      	adds	r3, #7
 80065a2:	4393      	bics	r3, r2
 80065a4:	3308      	adds	r3, #8
 80065a6:	9307      	str	r3, [sp, #28]
 80065a8:	6963      	ldr	r3, [r4, #20]
 80065aa:	9a04      	ldr	r2, [sp, #16]
 80065ac:	189b      	adds	r3, r3, r2
 80065ae:	6163      	str	r3, [r4, #20]
 80065b0:	e765      	b.n	800647e <_svfiprintf_r+0x46>
 80065b2:	4343      	muls	r3, r0
 80065b4:	0035      	movs	r5, r6
 80065b6:	2101      	movs	r1, #1
 80065b8:	189b      	adds	r3, r3, r2
 80065ba:	e7a6      	b.n	800650a <_svfiprintf_r+0xd2>
 80065bc:	2301      	movs	r3, #1
 80065be:	425b      	negs	r3, r3
 80065c0:	e7d0      	b.n	8006564 <_svfiprintf_r+0x12c>
 80065c2:	2300      	movs	r3, #0
 80065c4:	200a      	movs	r0, #10
 80065c6:	001a      	movs	r2, r3
 80065c8:	3501      	adds	r5, #1
 80065ca:	6063      	str	r3, [r4, #4]
 80065cc:	7829      	ldrb	r1, [r5, #0]
 80065ce:	1c6e      	adds	r6, r5, #1
 80065d0:	3930      	subs	r1, #48	; 0x30
 80065d2:	2909      	cmp	r1, #9
 80065d4:	d903      	bls.n	80065de <_svfiprintf_r+0x1a6>
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d0c5      	beq.n	8006566 <_svfiprintf_r+0x12e>
 80065da:	9209      	str	r2, [sp, #36]	; 0x24
 80065dc:	e7c3      	b.n	8006566 <_svfiprintf_r+0x12e>
 80065de:	4342      	muls	r2, r0
 80065e0:	0035      	movs	r5, r6
 80065e2:	2301      	movs	r3, #1
 80065e4:	1852      	adds	r2, r2, r1
 80065e6:	e7f1      	b.n	80065cc <_svfiprintf_r+0x194>
 80065e8:	ab07      	add	r3, sp, #28
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	003a      	movs	r2, r7
 80065ee:	0021      	movs	r1, r4
 80065f0:	4b10      	ldr	r3, [pc, #64]	; (8006634 <_svfiprintf_r+0x1fc>)
 80065f2:	9803      	ldr	r0, [sp, #12]
 80065f4:	e000      	b.n	80065f8 <_svfiprintf_r+0x1c0>
 80065f6:	bf00      	nop
 80065f8:	9004      	str	r0, [sp, #16]
 80065fa:	9b04      	ldr	r3, [sp, #16]
 80065fc:	3301      	adds	r3, #1
 80065fe:	d1d3      	bne.n	80065a8 <_svfiprintf_r+0x170>
 8006600:	89bb      	ldrh	r3, [r7, #12]
 8006602:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006604:	065b      	lsls	r3, r3, #25
 8006606:	d400      	bmi.n	800660a <_svfiprintf_r+0x1d2>
 8006608:	e72d      	b.n	8006466 <_svfiprintf_r+0x2e>
 800660a:	2001      	movs	r0, #1
 800660c:	4240      	negs	r0, r0
 800660e:	e72a      	b.n	8006466 <_svfiprintf_r+0x2e>
 8006610:	ab07      	add	r3, sp, #28
 8006612:	9300      	str	r3, [sp, #0]
 8006614:	003a      	movs	r2, r7
 8006616:	0021      	movs	r1, r4
 8006618:	4b06      	ldr	r3, [pc, #24]	; (8006634 <_svfiprintf_r+0x1fc>)
 800661a:	9803      	ldr	r0, [sp, #12]
 800661c:	f000 f87c 	bl	8006718 <_printf_i>
 8006620:	e7ea      	b.n	80065f8 <_svfiprintf_r+0x1c0>
 8006622:	46c0      	nop			; (mov r8, r8)
 8006624:	08006eb9 	.word	0x08006eb9
 8006628:	08006ebf 	.word	0x08006ebf
 800662c:	08006ec3 	.word	0x08006ec3
 8006630:	00000000 	.word	0x00000000
 8006634:	08006375 	.word	0x08006375

08006638 <_printf_common>:
 8006638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800663a:	0015      	movs	r5, r2
 800663c:	9301      	str	r3, [sp, #4]
 800663e:	688a      	ldr	r2, [r1, #8]
 8006640:	690b      	ldr	r3, [r1, #16]
 8006642:	000c      	movs	r4, r1
 8006644:	9000      	str	r0, [sp, #0]
 8006646:	4293      	cmp	r3, r2
 8006648:	da00      	bge.n	800664c <_printf_common+0x14>
 800664a:	0013      	movs	r3, r2
 800664c:	0022      	movs	r2, r4
 800664e:	602b      	str	r3, [r5, #0]
 8006650:	3243      	adds	r2, #67	; 0x43
 8006652:	7812      	ldrb	r2, [r2, #0]
 8006654:	2a00      	cmp	r2, #0
 8006656:	d001      	beq.n	800665c <_printf_common+0x24>
 8006658:	3301      	adds	r3, #1
 800665a:	602b      	str	r3, [r5, #0]
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	069b      	lsls	r3, r3, #26
 8006660:	d502      	bpl.n	8006668 <_printf_common+0x30>
 8006662:	682b      	ldr	r3, [r5, #0]
 8006664:	3302      	adds	r3, #2
 8006666:	602b      	str	r3, [r5, #0]
 8006668:	6822      	ldr	r2, [r4, #0]
 800666a:	2306      	movs	r3, #6
 800666c:	0017      	movs	r7, r2
 800666e:	401f      	ands	r7, r3
 8006670:	421a      	tst	r2, r3
 8006672:	d027      	beq.n	80066c4 <_printf_common+0x8c>
 8006674:	0023      	movs	r3, r4
 8006676:	3343      	adds	r3, #67	; 0x43
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	1e5a      	subs	r2, r3, #1
 800667c:	4193      	sbcs	r3, r2
 800667e:	6822      	ldr	r2, [r4, #0]
 8006680:	0692      	lsls	r2, r2, #26
 8006682:	d430      	bmi.n	80066e6 <_printf_common+0xae>
 8006684:	0022      	movs	r2, r4
 8006686:	9901      	ldr	r1, [sp, #4]
 8006688:	9800      	ldr	r0, [sp, #0]
 800668a:	9e08      	ldr	r6, [sp, #32]
 800668c:	3243      	adds	r2, #67	; 0x43
 800668e:	47b0      	blx	r6
 8006690:	1c43      	adds	r3, r0, #1
 8006692:	d025      	beq.n	80066e0 <_printf_common+0xa8>
 8006694:	2306      	movs	r3, #6
 8006696:	6820      	ldr	r0, [r4, #0]
 8006698:	682a      	ldr	r2, [r5, #0]
 800669a:	68e1      	ldr	r1, [r4, #12]
 800669c:	2500      	movs	r5, #0
 800669e:	4003      	ands	r3, r0
 80066a0:	2b04      	cmp	r3, #4
 80066a2:	d103      	bne.n	80066ac <_printf_common+0x74>
 80066a4:	1a8d      	subs	r5, r1, r2
 80066a6:	43eb      	mvns	r3, r5
 80066a8:	17db      	asrs	r3, r3, #31
 80066aa:	401d      	ands	r5, r3
 80066ac:	68a3      	ldr	r3, [r4, #8]
 80066ae:	6922      	ldr	r2, [r4, #16]
 80066b0:	4293      	cmp	r3, r2
 80066b2:	dd01      	ble.n	80066b8 <_printf_common+0x80>
 80066b4:	1a9b      	subs	r3, r3, r2
 80066b6:	18ed      	adds	r5, r5, r3
 80066b8:	2700      	movs	r7, #0
 80066ba:	42bd      	cmp	r5, r7
 80066bc:	d120      	bne.n	8006700 <_printf_common+0xc8>
 80066be:	2000      	movs	r0, #0
 80066c0:	e010      	b.n	80066e4 <_printf_common+0xac>
 80066c2:	3701      	adds	r7, #1
 80066c4:	68e3      	ldr	r3, [r4, #12]
 80066c6:	682a      	ldr	r2, [r5, #0]
 80066c8:	1a9b      	subs	r3, r3, r2
 80066ca:	42bb      	cmp	r3, r7
 80066cc:	ddd2      	ble.n	8006674 <_printf_common+0x3c>
 80066ce:	0022      	movs	r2, r4
 80066d0:	2301      	movs	r3, #1
 80066d2:	9901      	ldr	r1, [sp, #4]
 80066d4:	9800      	ldr	r0, [sp, #0]
 80066d6:	9e08      	ldr	r6, [sp, #32]
 80066d8:	3219      	adds	r2, #25
 80066da:	47b0      	blx	r6
 80066dc:	1c43      	adds	r3, r0, #1
 80066de:	d1f0      	bne.n	80066c2 <_printf_common+0x8a>
 80066e0:	2001      	movs	r0, #1
 80066e2:	4240      	negs	r0, r0
 80066e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80066e6:	2030      	movs	r0, #48	; 0x30
 80066e8:	18e1      	adds	r1, r4, r3
 80066ea:	3143      	adds	r1, #67	; 0x43
 80066ec:	7008      	strb	r0, [r1, #0]
 80066ee:	0021      	movs	r1, r4
 80066f0:	1c5a      	adds	r2, r3, #1
 80066f2:	3145      	adds	r1, #69	; 0x45
 80066f4:	7809      	ldrb	r1, [r1, #0]
 80066f6:	18a2      	adds	r2, r4, r2
 80066f8:	3243      	adds	r2, #67	; 0x43
 80066fa:	3302      	adds	r3, #2
 80066fc:	7011      	strb	r1, [r2, #0]
 80066fe:	e7c1      	b.n	8006684 <_printf_common+0x4c>
 8006700:	0022      	movs	r2, r4
 8006702:	2301      	movs	r3, #1
 8006704:	9901      	ldr	r1, [sp, #4]
 8006706:	9800      	ldr	r0, [sp, #0]
 8006708:	9e08      	ldr	r6, [sp, #32]
 800670a:	321a      	adds	r2, #26
 800670c:	47b0      	blx	r6
 800670e:	1c43      	adds	r3, r0, #1
 8006710:	d0e6      	beq.n	80066e0 <_printf_common+0xa8>
 8006712:	3701      	adds	r7, #1
 8006714:	e7d1      	b.n	80066ba <_printf_common+0x82>
	...

08006718 <_printf_i>:
 8006718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800671a:	b08b      	sub	sp, #44	; 0x2c
 800671c:	9206      	str	r2, [sp, #24]
 800671e:	000a      	movs	r2, r1
 8006720:	3243      	adds	r2, #67	; 0x43
 8006722:	9307      	str	r3, [sp, #28]
 8006724:	9005      	str	r0, [sp, #20]
 8006726:	9204      	str	r2, [sp, #16]
 8006728:	7e0a      	ldrb	r2, [r1, #24]
 800672a:	000c      	movs	r4, r1
 800672c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800672e:	2a78      	cmp	r2, #120	; 0x78
 8006730:	d807      	bhi.n	8006742 <_printf_i+0x2a>
 8006732:	2a62      	cmp	r2, #98	; 0x62
 8006734:	d809      	bhi.n	800674a <_printf_i+0x32>
 8006736:	2a00      	cmp	r2, #0
 8006738:	d100      	bne.n	800673c <_printf_i+0x24>
 800673a:	e0c1      	b.n	80068c0 <_printf_i+0x1a8>
 800673c:	2a58      	cmp	r2, #88	; 0x58
 800673e:	d100      	bne.n	8006742 <_printf_i+0x2a>
 8006740:	e08c      	b.n	800685c <_printf_i+0x144>
 8006742:	0026      	movs	r6, r4
 8006744:	3642      	adds	r6, #66	; 0x42
 8006746:	7032      	strb	r2, [r6, #0]
 8006748:	e022      	b.n	8006790 <_printf_i+0x78>
 800674a:	0010      	movs	r0, r2
 800674c:	3863      	subs	r0, #99	; 0x63
 800674e:	2815      	cmp	r0, #21
 8006750:	d8f7      	bhi.n	8006742 <_printf_i+0x2a>
 8006752:	f7f9 fcd9 	bl	8000108 <__gnu_thumb1_case_shi>
 8006756:	0016      	.short	0x0016
 8006758:	fff6001f 	.word	0xfff6001f
 800675c:	fff6fff6 	.word	0xfff6fff6
 8006760:	001ffff6 	.word	0x001ffff6
 8006764:	fff6fff6 	.word	0xfff6fff6
 8006768:	fff6fff6 	.word	0xfff6fff6
 800676c:	003600a8 	.word	0x003600a8
 8006770:	fff6009a 	.word	0xfff6009a
 8006774:	00b9fff6 	.word	0x00b9fff6
 8006778:	0036fff6 	.word	0x0036fff6
 800677c:	fff6fff6 	.word	0xfff6fff6
 8006780:	009e      	.short	0x009e
 8006782:	0026      	movs	r6, r4
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	3642      	adds	r6, #66	; 0x42
 8006788:	1d11      	adds	r1, r2, #4
 800678a:	6019      	str	r1, [r3, #0]
 800678c:	6813      	ldr	r3, [r2, #0]
 800678e:	7033      	strb	r3, [r6, #0]
 8006790:	2301      	movs	r3, #1
 8006792:	e0a7      	b.n	80068e4 <_printf_i+0x1cc>
 8006794:	6808      	ldr	r0, [r1, #0]
 8006796:	6819      	ldr	r1, [r3, #0]
 8006798:	1d0a      	adds	r2, r1, #4
 800679a:	0605      	lsls	r5, r0, #24
 800679c:	d50b      	bpl.n	80067b6 <_printf_i+0x9e>
 800679e:	680d      	ldr	r5, [r1, #0]
 80067a0:	601a      	str	r2, [r3, #0]
 80067a2:	2d00      	cmp	r5, #0
 80067a4:	da03      	bge.n	80067ae <_printf_i+0x96>
 80067a6:	232d      	movs	r3, #45	; 0x2d
 80067a8:	9a04      	ldr	r2, [sp, #16]
 80067aa:	426d      	negs	r5, r5
 80067ac:	7013      	strb	r3, [r2, #0]
 80067ae:	4b61      	ldr	r3, [pc, #388]	; (8006934 <_printf_i+0x21c>)
 80067b0:	270a      	movs	r7, #10
 80067b2:	9303      	str	r3, [sp, #12]
 80067b4:	e01b      	b.n	80067ee <_printf_i+0xd6>
 80067b6:	680d      	ldr	r5, [r1, #0]
 80067b8:	601a      	str	r2, [r3, #0]
 80067ba:	0641      	lsls	r1, r0, #25
 80067bc:	d5f1      	bpl.n	80067a2 <_printf_i+0x8a>
 80067be:	b22d      	sxth	r5, r5
 80067c0:	e7ef      	b.n	80067a2 <_printf_i+0x8a>
 80067c2:	680d      	ldr	r5, [r1, #0]
 80067c4:	6819      	ldr	r1, [r3, #0]
 80067c6:	1d08      	adds	r0, r1, #4
 80067c8:	6018      	str	r0, [r3, #0]
 80067ca:	062e      	lsls	r6, r5, #24
 80067cc:	d501      	bpl.n	80067d2 <_printf_i+0xba>
 80067ce:	680d      	ldr	r5, [r1, #0]
 80067d0:	e003      	b.n	80067da <_printf_i+0xc2>
 80067d2:	066d      	lsls	r5, r5, #25
 80067d4:	d5fb      	bpl.n	80067ce <_printf_i+0xb6>
 80067d6:	680d      	ldr	r5, [r1, #0]
 80067d8:	b2ad      	uxth	r5, r5
 80067da:	4b56      	ldr	r3, [pc, #344]	; (8006934 <_printf_i+0x21c>)
 80067dc:	2708      	movs	r7, #8
 80067de:	9303      	str	r3, [sp, #12]
 80067e0:	2a6f      	cmp	r2, #111	; 0x6f
 80067e2:	d000      	beq.n	80067e6 <_printf_i+0xce>
 80067e4:	3702      	adds	r7, #2
 80067e6:	0023      	movs	r3, r4
 80067e8:	2200      	movs	r2, #0
 80067ea:	3343      	adds	r3, #67	; 0x43
 80067ec:	701a      	strb	r2, [r3, #0]
 80067ee:	6863      	ldr	r3, [r4, #4]
 80067f0:	60a3      	str	r3, [r4, #8]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	db03      	blt.n	80067fe <_printf_i+0xe6>
 80067f6:	2204      	movs	r2, #4
 80067f8:	6821      	ldr	r1, [r4, #0]
 80067fa:	4391      	bics	r1, r2
 80067fc:	6021      	str	r1, [r4, #0]
 80067fe:	2d00      	cmp	r5, #0
 8006800:	d102      	bne.n	8006808 <_printf_i+0xf0>
 8006802:	9e04      	ldr	r6, [sp, #16]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00c      	beq.n	8006822 <_printf_i+0x10a>
 8006808:	9e04      	ldr	r6, [sp, #16]
 800680a:	0028      	movs	r0, r5
 800680c:	0039      	movs	r1, r7
 800680e:	f7f9 fd0b 	bl	8000228 <__aeabi_uidivmod>
 8006812:	9b03      	ldr	r3, [sp, #12]
 8006814:	3e01      	subs	r6, #1
 8006816:	5c5b      	ldrb	r3, [r3, r1]
 8006818:	7033      	strb	r3, [r6, #0]
 800681a:	002b      	movs	r3, r5
 800681c:	0005      	movs	r5, r0
 800681e:	429f      	cmp	r7, r3
 8006820:	d9f3      	bls.n	800680a <_printf_i+0xf2>
 8006822:	2f08      	cmp	r7, #8
 8006824:	d109      	bne.n	800683a <_printf_i+0x122>
 8006826:	6823      	ldr	r3, [r4, #0]
 8006828:	07db      	lsls	r3, r3, #31
 800682a:	d506      	bpl.n	800683a <_printf_i+0x122>
 800682c:	6863      	ldr	r3, [r4, #4]
 800682e:	6922      	ldr	r2, [r4, #16]
 8006830:	4293      	cmp	r3, r2
 8006832:	dc02      	bgt.n	800683a <_printf_i+0x122>
 8006834:	2330      	movs	r3, #48	; 0x30
 8006836:	3e01      	subs	r6, #1
 8006838:	7033      	strb	r3, [r6, #0]
 800683a:	9b04      	ldr	r3, [sp, #16]
 800683c:	1b9b      	subs	r3, r3, r6
 800683e:	6123      	str	r3, [r4, #16]
 8006840:	9b07      	ldr	r3, [sp, #28]
 8006842:	0021      	movs	r1, r4
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	9805      	ldr	r0, [sp, #20]
 8006848:	9b06      	ldr	r3, [sp, #24]
 800684a:	aa09      	add	r2, sp, #36	; 0x24
 800684c:	f7ff fef4 	bl	8006638 <_printf_common>
 8006850:	1c43      	adds	r3, r0, #1
 8006852:	d14c      	bne.n	80068ee <_printf_i+0x1d6>
 8006854:	2001      	movs	r0, #1
 8006856:	4240      	negs	r0, r0
 8006858:	b00b      	add	sp, #44	; 0x2c
 800685a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800685c:	3145      	adds	r1, #69	; 0x45
 800685e:	700a      	strb	r2, [r1, #0]
 8006860:	4a34      	ldr	r2, [pc, #208]	; (8006934 <_printf_i+0x21c>)
 8006862:	9203      	str	r2, [sp, #12]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	6821      	ldr	r1, [r4, #0]
 8006868:	ca20      	ldmia	r2!, {r5}
 800686a:	601a      	str	r2, [r3, #0]
 800686c:	0608      	lsls	r0, r1, #24
 800686e:	d516      	bpl.n	800689e <_printf_i+0x186>
 8006870:	07cb      	lsls	r3, r1, #31
 8006872:	d502      	bpl.n	800687a <_printf_i+0x162>
 8006874:	2320      	movs	r3, #32
 8006876:	4319      	orrs	r1, r3
 8006878:	6021      	str	r1, [r4, #0]
 800687a:	2710      	movs	r7, #16
 800687c:	2d00      	cmp	r5, #0
 800687e:	d1b2      	bne.n	80067e6 <_printf_i+0xce>
 8006880:	2320      	movs	r3, #32
 8006882:	6822      	ldr	r2, [r4, #0]
 8006884:	439a      	bics	r2, r3
 8006886:	6022      	str	r2, [r4, #0]
 8006888:	e7ad      	b.n	80067e6 <_printf_i+0xce>
 800688a:	2220      	movs	r2, #32
 800688c:	6809      	ldr	r1, [r1, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	6022      	str	r2, [r4, #0]
 8006892:	0022      	movs	r2, r4
 8006894:	2178      	movs	r1, #120	; 0x78
 8006896:	3245      	adds	r2, #69	; 0x45
 8006898:	7011      	strb	r1, [r2, #0]
 800689a:	4a27      	ldr	r2, [pc, #156]	; (8006938 <_printf_i+0x220>)
 800689c:	e7e1      	b.n	8006862 <_printf_i+0x14a>
 800689e:	0648      	lsls	r0, r1, #25
 80068a0:	d5e6      	bpl.n	8006870 <_printf_i+0x158>
 80068a2:	b2ad      	uxth	r5, r5
 80068a4:	e7e4      	b.n	8006870 <_printf_i+0x158>
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	680d      	ldr	r5, [r1, #0]
 80068aa:	1d10      	adds	r0, r2, #4
 80068ac:	6949      	ldr	r1, [r1, #20]
 80068ae:	6018      	str	r0, [r3, #0]
 80068b0:	6813      	ldr	r3, [r2, #0]
 80068b2:	062e      	lsls	r6, r5, #24
 80068b4:	d501      	bpl.n	80068ba <_printf_i+0x1a2>
 80068b6:	6019      	str	r1, [r3, #0]
 80068b8:	e002      	b.n	80068c0 <_printf_i+0x1a8>
 80068ba:	066d      	lsls	r5, r5, #25
 80068bc:	d5fb      	bpl.n	80068b6 <_printf_i+0x19e>
 80068be:	8019      	strh	r1, [r3, #0]
 80068c0:	2300      	movs	r3, #0
 80068c2:	9e04      	ldr	r6, [sp, #16]
 80068c4:	6123      	str	r3, [r4, #16]
 80068c6:	e7bb      	b.n	8006840 <_printf_i+0x128>
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	1d11      	adds	r1, r2, #4
 80068cc:	6019      	str	r1, [r3, #0]
 80068ce:	6816      	ldr	r6, [r2, #0]
 80068d0:	2100      	movs	r1, #0
 80068d2:	0030      	movs	r0, r6
 80068d4:	6862      	ldr	r2, [r4, #4]
 80068d6:	f000 f831 	bl	800693c <memchr>
 80068da:	2800      	cmp	r0, #0
 80068dc:	d001      	beq.n	80068e2 <_printf_i+0x1ca>
 80068de:	1b80      	subs	r0, r0, r6
 80068e0:	6060      	str	r0, [r4, #4]
 80068e2:	6863      	ldr	r3, [r4, #4]
 80068e4:	6123      	str	r3, [r4, #16]
 80068e6:	2300      	movs	r3, #0
 80068e8:	9a04      	ldr	r2, [sp, #16]
 80068ea:	7013      	strb	r3, [r2, #0]
 80068ec:	e7a8      	b.n	8006840 <_printf_i+0x128>
 80068ee:	6923      	ldr	r3, [r4, #16]
 80068f0:	0032      	movs	r2, r6
 80068f2:	9906      	ldr	r1, [sp, #24]
 80068f4:	9805      	ldr	r0, [sp, #20]
 80068f6:	9d07      	ldr	r5, [sp, #28]
 80068f8:	47a8      	blx	r5
 80068fa:	1c43      	adds	r3, r0, #1
 80068fc:	d0aa      	beq.n	8006854 <_printf_i+0x13c>
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	079b      	lsls	r3, r3, #30
 8006902:	d415      	bmi.n	8006930 <_printf_i+0x218>
 8006904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006906:	68e0      	ldr	r0, [r4, #12]
 8006908:	4298      	cmp	r0, r3
 800690a:	daa5      	bge.n	8006858 <_printf_i+0x140>
 800690c:	0018      	movs	r0, r3
 800690e:	e7a3      	b.n	8006858 <_printf_i+0x140>
 8006910:	0022      	movs	r2, r4
 8006912:	2301      	movs	r3, #1
 8006914:	9906      	ldr	r1, [sp, #24]
 8006916:	9805      	ldr	r0, [sp, #20]
 8006918:	9e07      	ldr	r6, [sp, #28]
 800691a:	3219      	adds	r2, #25
 800691c:	47b0      	blx	r6
 800691e:	1c43      	adds	r3, r0, #1
 8006920:	d098      	beq.n	8006854 <_printf_i+0x13c>
 8006922:	3501      	adds	r5, #1
 8006924:	68e3      	ldr	r3, [r4, #12]
 8006926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006928:	1a9b      	subs	r3, r3, r2
 800692a:	42ab      	cmp	r3, r5
 800692c:	dcf0      	bgt.n	8006910 <_printf_i+0x1f8>
 800692e:	e7e9      	b.n	8006904 <_printf_i+0x1ec>
 8006930:	2500      	movs	r5, #0
 8006932:	e7f7      	b.n	8006924 <_printf_i+0x20c>
 8006934:	08006eca 	.word	0x08006eca
 8006938:	08006edb 	.word	0x08006edb

0800693c <memchr>:
 800693c:	b2c9      	uxtb	r1, r1
 800693e:	1882      	adds	r2, r0, r2
 8006940:	4290      	cmp	r0, r2
 8006942:	d101      	bne.n	8006948 <memchr+0xc>
 8006944:	2000      	movs	r0, #0
 8006946:	4770      	bx	lr
 8006948:	7803      	ldrb	r3, [r0, #0]
 800694a:	428b      	cmp	r3, r1
 800694c:	d0fb      	beq.n	8006946 <memchr+0xa>
 800694e:	3001      	adds	r0, #1
 8006950:	e7f6      	b.n	8006940 <memchr+0x4>

08006952 <memmove>:
 8006952:	b510      	push	{r4, lr}
 8006954:	4288      	cmp	r0, r1
 8006956:	d902      	bls.n	800695e <memmove+0xc>
 8006958:	188b      	adds	r3, r1, r2
 800695a:	4298      	cmp	r0, r3
 800695c:	d303      	bcc.n	8006966 <memmove+0x14>
 800695e:	2300      	movs	r3, #0
 8006960:	e007      	b.n	8006972 <memmove+0x20>
 8006962:	5c8b      	ldrb	r3, [r1, r2]
 8006964:	5483      	strb	r3, [r0, r2]
 8006966:	3a01      	subs	r2, #1
 8006968:	d2fb      	bcs.n	8006962 <memmove+0x10>
 800696a:	bd10      	pop	{r4, pc}
 800696c:	5ccc      	ldrb	r4, [r1, r3]
 800696e:	54c4      	strb	r4, [r0, r3]
 8006970:	3301      	adds	r3, #1
 8006972:	429a      	cmp	r2, r3
 8006974:	d1fa      	bne.n	800696c <memmove+0x1a>
 8006976:	e7f8      	b.n	800696a <memmove+0x18>

08006978 <_free_r>:
 8006978:	b570      	push	{r4, r5, r6, lr}
 800697a:	0005      	movs	r5, r0
 800697c:	2900      	cmp	r1, #0
 800697e:	d010      	beq.n	80069a2 <_free_r+0x2a>
 8006980:	1f0c      	subs	r4, r1, #4
 8006982:	6823      	ldr	r3, [r4, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	da00      	bge.n	800698a <_free_r+0x12>
 8006988:	18e4      	adds	r4, r4, r3
 800698a:	0028      	movs	r0, r5
 800698c:	f000 f918 	bl	8006bc0 <__malloc_lock>
 8006990:	4a1d      	ldr	r2, [pc, #116]	; (8006a08 <_free_r+0x90>)
 8006992:	6813      	ldr	r3, [r2, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d105      	bne.n	80069a4 <_free_r+0x2c>
 8006998:	6063      	str	r3, [r4, #4]
 800699a:	6014      	str	r4, [r2, #0]
 800699c:	0028      	movs	r0, r5
 800699e:	f000 f917 	bl	8006bd0 <__malloc_unlock>
 80069a2:	bd70      	pop	{r4, r5, r6, pc}
 80069a4:	42a3      	cmp	r3, r4
 80069a6:	d908      	bls.n	80069ba <_free_r+0x42>
 80069a8:	6821      	ldr	r1, [r4, #0]
 80069aa:	1860      	adds	r0, r4, r1
 80069ac:	4283      	cmp	r3, r0
 80069ae:	d1f3      	bne.n	8006998 <_free_r+0x20>
 80069b0:	6818      	ldr	r0, [r3, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	1841      	adds	r1, r0, r1
 80069b6:	6021      	str	r1, [r4, #0]
 80069b8:	e7ee      	b.n	8006998 <_free_r+0x20>
 80069ba:	001a      	movs	r2, r3
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <_free_r+0x4e>
 80069c2:	42a3      	cmp	r3, r4
 80069c4:	d9f9      	bls.n	80069ba <_free_r+0x42>
 80069c6:	6811      	ldr	r1, [r2, #0]
 80069c8:	1850      	adds	r0, r2, r1
 80069ca:	42a0      	cmp	r0, r4
 80069cc:	d10b      	bne.n	80069e6 <_free_r+0x6e>
 80069ce:	6820      	ldr	r0, [r4, #0]
 80069d0:	1809      	adds	r1, r1, r0
 80069d2:	1850      	adds	r0, r2, r1
 80069d4:	6011      	str	r1, [r2, #0]
 80069d6:	4283      	cmp	r3, r0
 80069d8:	d1e0      	bne.n	800699c <_free_r+0x24>
 80069da:	6818      	ldr	r0, [r3, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	1841      	adds	r1, r0, r1
 80069e0:	6011      	str	r1, [r2, #0]
 80069e2:	6053      	str	r3, [r2, #4]
 80069e4:	e7da      	b.n	800699c <_free_r+0x24>
 80069e6:	42a0      	cmp	r0, r4
 80069e8:	d902      	bls.n	80069f0 <_free_r+0x78>
 80069ea:	230c      	movs	r3, #12
 80069ec:	602b      	str	r3, [r5, #0]
 80069ee:	e7d5      	b.n	800699c <_free_r+0x24>
 80069f0:	6821      	ldr	r1, [r4, #0]
 80069f2:	1860      	adds	r0, r4, r1
 80069f4:	4283      	cmp	r3, r0
 80069f6:	d103      	bne.n	8006a00 <_free_r+0x88>
 80069f8:	6818      	ldr	r0, [r3, #0]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	1841      	adds	r1, r0, r1
 80069fe:	6021      	str	r1, [r4, #0]
 8006a00:	6063      	str	r3, [r4, #4]
 8006a02:	6054      	str	r4, [r2, #4]
 8006a04:	e7ca      	b.n	800699c <_free_r+0x24>
 8006a06:	46c0      	nop			; (mov r8, r8)
 8006a08:	200011d8 	.word	0x200011d8

08006a0c <sbrk_aligned>:
 8006a0c:	b570      	push	{r4, r5, r6, lr}
 8006a0e:	4e0f      	ldr	r6, [pc, #60]	; (8006a4c <sbrk_aligned+0x40>)
 8006a10:	000d      	movs	r5, r1
 8006a12:	6831      	ldr	r1, [r6, #0]
 8006a14:	0004      	movs	r4, r0
 8006a16:	2900      	cmp	r1, #0
 8006a18:	d102      	bne.n	8006a20 <sbrk_aligned+0x14>
 8006a1a:	f000 f8bf 	bl	8006b9c <_sbrk_r>
 8006a1e:	6030      	str	r0, [r6, #0]
 8006a20:	0029      	movs	r1, r5
 8006a22:	0020      	movs	r0, r4
 8006a24:	f000 f8ba 	bl	8006b9c <_sbrk_r>
 8006a28:	1c43      	adds	r3, r0, #1
 8006a2a:	d00a      	beq.n	8006a42 <sbrk_aligned+0x36>
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	1cc5      	adds	r5, r0, #3
 8006a30:	439d      	bics	r5, r3
 8006a32:	42a8      	cmp	r0, r5
 8006a34:	d007      	beq.n	8006a46 <sbrk_aligned+0x3a>
 8006a36:	1a29      	subs	r1, r5, r0
 8006a38:	0020      	movs	r0, r4
 8006a3a:	f000 f8af 	bl	8006b9c <_sbrk_r>
 8006a3e:	1c43      	adds	r3, r0, #1
 8006a40:	d101      	bne.n	8006a46 <sbrk_aligned+0x3a>
 8006a42:	2501      	movs	r5, #1
 8006a44:	426d      	negs	r5, r5
 8006a46:	0028      	movs	r0, r5
 8006a48:	bd70      	pop	{r4, r5, r6, pc}
 8006a4a:	46c0      	nop			; (mov r8, r8)
 8006a4c:	200011dc 	.word	0x200011dc

08006a50 <_malloc_r>:
 8006a50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a52:	2203      	movs	r2, #3
 8006a54:	1ccb      	adds	r3, r1, #3
 8006a56:	4393      	bics	r3, r2
 8006a58:	3308      	adds	r3, #8
 8006a5a:	0006      	movs	r6, r0
 8006a5c:	001f      	movs	r7, r3
 8006a5e:	2b0c      	cmp	r3, #12
 8006a60:	d232      	bcs.n	8006ac8 <_malloc_r+0x78>
 8006a62:	270c      	movs	r7, #12
 8006a64:	42b9      	cmp	r1, r7
 8006a66:	d831      	bhi.n	8006acc <_malloc_r+0x7c>
 8006a68:	0030      	movs	r0, r6
 8006a6a:	f000 f8a9 	bl	8006bc0 <__malloc_lock>
 8006a6e:	4d32      	ldr	r5, [pc, #200]	; (8006b38 <_malloc_r+0xe8>)
 8006a70:	682b      	ldr	r3, [r5, #0]
 8006a72:	001c      	movs	r4, r3
 8006a74:	2c00      	cmp	r4, #0
 8006a76:	d12e      	bne.n	8006ad6 <_malloc_r+0x86>
 8006a78:	0039      	movs	r1, r7
 8006a7a:	0030      	movs	r0, r6
 8006a7c:	f7ff ffc6 	bl	8006a0c <sbrk_aligned>
 8006a80:	0004      	movs	r4, r0
 8006a82:	1c43      	adds	r3, r0, #1
 8006a84:	d11e      	bne.n	8006ac4 <_malloc_r+0x74>
 8006a86:	682c      	ldr	r4, [r5, #0]
 8006a88:	0025      	movs	r5, r4
 8006a8a:	2d00      	cmp	r5, #0
 8006a8c:	d14a      	bne.n	8006b24 <_malloc_r+0xd4>
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	0029      	movs	r1, r5
 8006a92:	18e3      	adds	r3, r4, r3
 8006a94:	0030      	movs	r0, r6
 8006a96:	9301      	str	r3, [sp, #4]
 8006a98:	f000 f880 	bl	8006b9c <_sbrk_r>
 8006a9c:	9b01      	ldr	r3, [sp, #4]
 8006a9e:	4283      	cmp	r3, r0
 8006aa0:	d143      	bne.n	8006b2a <_malloc_r+0xda>
 8006aa2:	6823      	ldr	r3, [r4, #0]
 8006aa4:	3703      	adds	r7, #3
 8006aa6:	1aff      	subs	r7, r7, r3
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	439f      	bics	r7, r3
 8006aac:	3708      	adds	r7, #8
 8006aae:	2f0c      	cmp	r7, #12
 8006ab0:	d200      	bcs.n	8006ab4 <_malloc_r+0x64>
 8006ab2:	270c      	movs	r7, #12
 8006ab4:	0039      	movs	r1, r7
 8006ab6:	0030      	movs	r0, r6
 8006ab8:	f7ff ffa8 	bl	8006a0c <sbrk_aligned>
 8006abc:	1c43      	adds	r3, r0, #1
 8006abe:	d034      	beq.n	8006b2a <_malloc_r+0xda>
 8006ac0:	6823      	ldr	r3, [r4, #0]
 8006ac2:	19df      	adds	r7, r3, r7
 8006ac4:	6027      	str	r7, [r4, #0]
 8006ac6:	e013      	b.n	8006af0 <_malloc_r+0xa0>
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	dacb      	bge.n	8006a64 <_malloc_r+0x14>
 8006acc:	230c      	movs	r3, #12
 8006ace:	2500      	movs	r5, #0
 8006ad0:	6033      	str	r3, [r6, #0]
 8006ad2:	0028      	movs	r0, r5
 8006ad4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006ad6:	6822      	ldr	r2, [r4, #0]
 8006ad8:	1bd1      	subs	r1, r2, r7
 8006ada:	d420      	bmi.n	8006b1e <_malloc_r+0xce>
 8006adc:	290b      	cmp	r1, #11
 8006ade:	d917      	bls.n	8006b10 <_malloc_r+0xc0>
 8006ae0:	19e2      	adds	r2, r4, r7
 8006ae2:	6027      	str	r7, [r4, #0]
 8006ae4:	42a3      	cmp	r3, r4
 8006ae6:	d111      	bne.n	8006b0c <_malloc_r+0xbc>
 8006ae8:	602a      	str	r2, [r5, #0]
 8006aea:	6863      	ldr	r3, [r4, #4]
 8006aec:	6011      	str	r1, [r2, #0]
 8006aee:	6053      	str	r3, [r2, #4]
 8006af0:	0030      	movs	r0, r6
 8006af2:	0025      	movs	r5, r4
 8006af4:	f000 f86c 	bl	8006bd0 <__malloc_unlock>
 8006af8:	2207      	movs	r2, #7
 8006afa:	350b      	adds	r5, #11
 8006afc:	1d23      	adds	r3, r4, #4
 8006afe:	4395      	bics	r5, r2
 8006b00:	1aea      	subs	r2, r5, r3
 8006b02:	429d      	cmp	r5, r3
 8006b04:	d0e5      	beq.n	8006ad2 <_malloc_r+0x82>
 8006b06:	1b5b      	subs	r3, r3, r5
 8006b08:	50a3      	str	r3, [r4, r2]
 8006b0a:	e7e2      	b.n	8006ad2 <_malloc_r+0x82>
 8006b0c:	605a      	str	r2, [r3, #4]
 8006b0e:	e7ec      	b.n	8006aea <_malloc_r+0x9a>
 8006b10:	6862      	ldr	r2, [r4, #4]
 8006b12:	42a3      	cmp	r3, r4
 8006b14:	d101      	bne.n	8006b1a <_malloc_r+0xca>
 8006b16:	602a      	str	r2, [r5, #0]
 8006b18:	e7ea      	b.n	8006af0 <_malloc_r+0xa0>
 8006b1a:	605a      	str	r2, [r3, #4]
 8006b1c:	e7e8      	b.n	8006af0 <_malloc_r+0xa0>
 8006b1e:	0023      	movs	r3, r4
 8006b20:	6864      	ldr	r4, [r4, #4]
 8006b22:	e7a7      	b.n	8006a74 <_malloc_r+0x24>
 8006b24:	002c      	movs	r4, r5
 8006b26:	686d      	ldr	r5, [r5, #4]
 8006b28:	e7af      	b.n	8006a8a <_malloc_r+0x3a>
 8006b2a:	230c      	movs	r3, #12
 8006b2c:	0030      	movs	r0, r6
 8006b2e:	6033      	str	r3, [r6, #0]
 8006b30:	f000 f84e 	bl	8006bd0 <__malloc_unlock>
 8006b34:	e7cd      	b.n	8006ad2 <_malloc_r+0x82>
 8006b36:	46c0      	nop			; (mov r8, r8)
 8006b38:	200011d8 	.word	0x200011d8

08006b3c <_realloc_r>:
 8006b3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b3e:	0007      	movs	r7, r0
 8006b40:	000e      	movs	r6, r1
 8006b42:	0014      	movs	r4, r2
 8006b44:	2900      	cmp	r1, #0
 8006b46:	d105      	bne.n	8006b54 <_realloc_r+0x18>
 8006b48:	0011      	movs	r1, r2
 8006b4a:	f7ff ff81 	bl	8006a50 <_malloc_r>
 8006b4e:	0005      	movs	r5, r0
 8006b50:	0028      	movs	r0, r5
 8006b52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b54:	2a00      	cmp	r2, #0
 8006b56:	d103      	bne.n	8006b60 <_realloc_r+0x24>
 8006b58:	f7ff ff0e 	bl	8006978 <_free_r>
 8006b5c:	0025      	movs	r5, r4
 8006b5e:	e7f7      	b.n	8006b50 <_realloc_r+0x14>
 8006b60:	f000 f83e 	bl	8006be0 <_malloc_usable_size_r>
 8006b64:	9001      	str	r0, [sp, #4]
 8006b66:	4284      	cmp	r4, r0
 8006b68:	d803      	bhi.n	8006b72 <_realloc_r+0x36>
 8006b6a:	0035      	movs	r5, r6
 8006b6c:	0843      	lsrs	r3, r0, #1
 8006b6e:	42a3      	cmp	r3, r4
 8006b70:	d3ee      	bcc.n	8006b50 <_realloc_r+0x14>
 8006b72:	0021      	movs	r1, r4
 8006b74:	0038      	movs	r0, r7
 8006b76:	f7ff ff6b 	bl	8006a50 <_malloc_r>
 8006b7a:	1e05      	subs	r5, r0, #0
 8006b7c:	d0e8      	beq.n	8006b50 <_realloc_r+0x14>
 8006b7e:	9b01      	ldr	r3, [sp, #4]
 8006b80:	0022      	movs	r2, r4
 8006b82:	429c      	cmp	r4, r3
 8006b84:	d900      	bls.n	8006b88 <_realloc_r+0x4c>
 8006b86:	001a      	movs	r2, r3
 8006b88:	0031      	movs	r1, r6
 8006b8a:	0028      	movs	r0, r5
 8006b8c:	f7ff fb26 	bl	80061dc <memcpy>
 8006b90:	0031      	movs	r1, r6
 8006b92:	0038      	movs	r0, r7
 8006b94:	f7ff fef0 	bl	8006978 <_free_r>
 8006b98:	e7da      	b.n	8006b50 <_realloc_r+0x14>
	...

08006b9c <_sbrk_r>:
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	b570      	push	{r4, r5, r6, lr}
 8006ba0:	4d06      	ldr	r5, [pc, #24]	; (8006bbc <_sbrk_r+0x20>)
 8006ba2:	0004      	movs	r4, r0
 8006ba4:	0008      	movs	r0, r1
 8006ba6:	602b      	str	r3, [r5, #0]
 8006ba8:	f7fb fdcc 	bl	8002744 <_sbrk>
 8006bac:	1c43      	adds	r3, r0, #1
 8006bae:	d103      	bne.n	8006bb8 <_sbrk_r+0x1c>
 8006bb0:	682b      	ldr	r3, [r5, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d000      	beq.n	8006bb8 <_sbrk_r+0x1c>
 8006bb6:	6023      	str	r3, [r4, #0]
 8006bb8:	bd70      	pop	{r4, r5, r6, pc}
 8006bba:	46c0      	nop			; (mov r8, r8)
 8006bbc:	200011e0 	.word	0x200011e0

08006bc0 <__malloc_lock>:
 8006bc0:	b510      	push	{r4, lr}
 8006bc2:	4802      	ldr	r0, [pc, #8]	; (8006bcc <__malloc_lock+0xc>)
 8006bc4:	f000 f814 	bl	8006bf0 <__retarget_lock_acquire_recursive>
 8006bc8:	bd10      	pop	{r4, pc}
 8006bca:	46c0      	nop			; (mov r8, r8)
 8006bcc:	200011e4 	.word	0x200011e4

08006bd0 <__malloc_unlock>:
 8006bd0:	b510      	push	{r4, lr}
 8006bd2:	4802      	ldr	r0, [pc, #8]	; (8006bdc <__malloc_unlock+0xc>)
 8006bd4:	f000 f80d 	bl	8006bf2 <__retarget_lock_release_recursive>
 8006bd8:	bd10      	pop	{r4, pc}
 8006bda:	46c0      	nop			; (mov r8, r8)
 8006bdc:	200011e4 	.word	0x200011e4

08006be0 <_malloc_usable_size_r>:
 8006be0:	1f0b      	subs	r3, r1, #4
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	1f18      	subs	r0, r3, #4
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	da01      	bge.n	8006bee <_malloc_usable_size_r+0xe>
 8006bea:	580b      	ldr	r3, [r1, r0]
 8006bec:	18c0      	adds	r0, r0, r3
 8006bee:	4770      	bx	lr

08006bf0 <__retarget_lock_acquire_recursive>:
 8006bf0:	4770      	bx	lr

08006bf2 <__retarget_lock_release_recursive>:
 8006bf2:	4770      	bx	lr

08006bf4 <_init>:
 8006bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf6:	46c0      	nop			; (mov r8, r8)
 8006bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bfa:	bc08      	pop	{r3}
 8006bfc:	469e      	mov	lr, r3
 8006bfe:	4770      	bx	lr

08006c00 <_fini>:
 8006c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c02:	46c0      	nop			; (mov r8, r8)
 8006c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c06:	bc08      	pop	{r3}
 8006c08:	469e      	mov	lr, r3
 8006c0a:	4770      	bx	lr
